
TP_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007190  08007190  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007198  08007198  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000078  08007218  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08007218  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001044b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002936  00000000  00000000  000304f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00032e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b65  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012500  00000000  00000000  00058215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf5d7  00000000  00000000  0006a715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  00139d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006fa4 	.word	0x08006fa4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006fa4 	.word	0x08006fa4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <BMP280_check>:
uint32_t Timeout = 1000;


BMP280_S32_t t_fine;

int BMP280_check() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8000eb6:	23d0      	movs	r3, #208	; 0xd0
 8000eb8:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000eba:	23ee      	movs	r3, #238	; 0xee
 8000ebc:	b299      	uxth	r1, r3
 8000ebe:	1d3a      	adds	r2, r7, #4
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4819      	ldr	r0, [pc, #100]	; (8000f30 <BMP280_check+0x80>)
 8000eca:	f001 ffbf 	bl	8002e4c <HAL_I2C_Master_Transmit>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <BMP280_check+0x84>)
 8000eda:	f005 f9c5 	bl	8006268 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 8000ede:	23ee      	movs	r3, #238	; 0xee
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	1d3a      	adds	r2, r7, #4
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	9000      	str	r0, [sp, #0]
 8000eee:	4810      	ldr	r0, [pc, #64]	; (8000f30 <BMP280_check+0x80>)
 8000ef0:	f002 f8aa 	bl	8003048 <HAL_I2C_Master_Receive>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 8000efe:	480e      	ldr	r0, [pc, #56]	; (8000f38 <BMP280_check+0x88>)
 8000f00:	f005 f9b2 	bl	8006268 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <BMP280_check+0x8c>)
 8000f0a:	f005 f927 	bl	800615c <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	2258      	movs	r2, #88	; 0x58
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d104      	bne.n	8000f20 <BMP280_check+0x70>
		printf("Ok\r\n");
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <BMP280_check+0x90>)
 8000f18:	f005 f9a6 	bl	8006268 <puts>
		return 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	e003      	b.n	8000f28 <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <BMP280_check+0x94>)
 8000f22:	f005 f9a1 	bl	8006268 <puts>
		return 1;
 8000f26:	2301      	movs	r3, #1
	}
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000108 	.word	0x20000108
 8000f34:	08006fbc 	.word	0x08006fbc
 8000f38:	08006fe0 	.word	0x08006fe0
 8000f3c:	08007004 	.word	0x08007004
 8000f40:	08007010 	.word	0x08007010
 8000f44:	08007014 	.word	0x08007014

08000f48 <BMP280_init>:

int BMP280_init() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000f4e:	2357      	movs	r3, #87	; 0x57
 8000f50:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <BMP280_init+0x40>)
 8000f54:	f005 f988 	bl	8006268 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000f58:	22f4      	movs	r2, #244	; 0xf4
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f000 f8ca 	bl	80010f8 <BMP280_Write_Reg>
 8000f64:	4603      	mov	r3, r0
 8000f66:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d104      	bne.n	8000f78 <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <BMP280_init+0x44>)
 8000f70:	f005 f97a 	bl	8006268 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e003      	b.n	8000f80 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 8000f78:	4805      	ldr	r0, [pc, #20]	; (8000f90 <BMP280_init+0x48>)
 8000f7a:	f005 f975 	bl	8006268 <puts>
		return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08007020 	.word	0x08007020
 8000f8c:	08007030 	.word	0x08007030
 8000f90:	0800703c 	.word	0x0800703c

08000f94 <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af04      	add	r7, sp, #16
	uint8_t rx_buff[24];

	//HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_BMP280, ADDRESS_CALIB_00, 1, 10000);
	//HAL_I2C_Master_Receive(&hi2c1, ADDRESS_BMP280, &rx_buff[0], 24, 10000);

	HAL_I2C_Mem_Read(&hi2c1, ADDRESS_BMP280, ADDRESS_CALIB_00, I2C_MEMADD_SIZE_8BIT, &rx_buff[0], 24, Timeout);
 8000f9a:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <BMP280_get_calib_values+0x12c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	9302      	str	r3, [sp, #8]
 8000fa0:	2318      	movs	r3, #24
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	2288      	movs	r2, #136	; 0x88
 8000fac:	21ee      	movs	r1, #238	; 0xee
 8000fae:	4845      	ldr	r0, [pc, #276]	; (80010c4 <BMP280_get_calib_values+0x130>)
 8000fb0:	f002 fb6a 	bl	8003688 <HAL_I2C_Mem_Read>

	dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 8000fb4:	783b      	ldrb	r3, [r7, #0]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <BMP280_get_calib_values+0x134>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	//printf("%d\r\n",dig_T1);
	dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8000fc8:	78bb      	ldrb	r3, [r7, #2]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <BMP280_get_calib_values+0x138>)
 8000fdc:	801a      	strh	r2, [r3, #0]
	dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8000fde:	793b      	ldrb	r3, [r7, #4]
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4b37      	ldr	r3, [pc, #220]	; (80010d0 <BMP280_get_calib_values+0x13c>)
 8000ff2:	801a      	strh	r2, [r3, #0]
	dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4413      	add	r3, r2
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <BMP280_get_calib_values+0x140>)
 8001006:	801a      	strh	r2, [r3, #0]
	dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 8001008:	7a3b      	ldrb	r3, [r7, #8]
 800100a:	b29a      	uxth	r2, r3
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	b29b      	uxth	r3, r3
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <BMP280_get_calib_values+0x144>)
 800101c:	801a      	strh	r2, [r3, #0]
	dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	b29a      	uxth	r2, r3
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	b29b      	uxth	r3, r3
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	4413      	add	r3, r2
 800102c:	b29b      	uxth	r3, r3
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <BMP280_get_calib_values+0x148>)
 8001032:	801a      	strh	r2, [r3, #0]
	dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	b29a      	uxth	r2, r3
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	b29b      	uxth	r3, r3
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	4413      	add	r3, r2
 8001042:	b29b      	uxth	r3, r3
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <BMP280_get_calib_values+0x14c>)
 8001048:	801a      	strh	r2, [r3, #0]
	dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	b29a      	uxth	r2, r3
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	b29b      	uxth	r3, r3
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b29b      	uxth	r3, r3
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <BMP280_get_calib_values+0x150>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 8001060:	7c3b      	ldrb	r3, [r7, #16]
 8001062:	b29a      	uxth	r2, r3
 8001064:	7c7b      	ldrb	r3, [r7, #17]
 8001066:	b29b      	uxth	r3, r3
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b29b      	uxth	r3, r3
 800106c:	4413      	add	r3, r2
 800106e:	b29b      	uxth	r3, r3
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <BMP280_get_calib_values+0x154>)
 8001074:	801a      	strh	r2, [r3, #0]
	dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 8001076:	7cbb      	ldrb	r3, [r7, #18]
 8001078:	b29a      	uxth	r2, r3
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	b29b      	uxth	r3, r3
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b29b      	uxth	r3, r3
 8001082:	4413      	add	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <BMP280_get_calib_values+0x158>)
 800108a:	801a      	strh	r2, [r3, #0]
	dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 800108c:	7d3b      	ldrb	r3, [r7, #20]
 800108e:	b29a      	uxth	r2, r3
 8001090:	7d7b      	ldrb	r3, [r7, #21]
 8001092:	b29b      	uxth	r3, r3
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <BMP280_get_calib_values+0x15c>)
 80010a0:	801a      	strh	r2, [r3, #0]
	dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 80010a2:	7dbb      	ldrb	r3, [r7, #22]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4413      	add	r3, r2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <BMP280_get_calib_values+0x160>)
 80010b6:	801a      	strh	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000108 	.word	0x20000108
 80010c8:	20000094 	.word	0x20000094
 80010cc:	20000096 	.word	0x20000096
 80010d0:	20000098 	.word	0x20000098
 80010d4:	2000009a 	.word	0x2000009a
 80010d8:	2000009c 	.word	0x2000009c
 80010dc:	2000009e 	.word	0x2000009e
 80010e0:	200000a0 	.word	0x200000a0
 80010e4:	200000a2 	.word	0x200000a2
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	200000a6 	.word	0x200000a6
 80010f0:	200000a8 	.word	0x200000a8
 80010f4:	200000aa 	.word	0x200000aa

080010f8 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8001110:	23ee      	movs	r3, #238	; 0xee
 8001112:	b299      	uxth	r1, r3
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2302      	movs	r3, #2
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <BMP280_Write_Reg+0x7c>)
 8001122:	f001 fe93 	bl	8002e4c <HAL_I2C_Master_Transmit>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <BMP280_Write_Reg+0x80>)
 8001132:	f005 f899 	bl	8006268 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8001136:	23ee      	movs	r3, #238	; 0xee
 8001138:	b299      	uxth	r1, r3
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <BMP280_Write_Reg+0x7c>)
 8001148:	f001 ff7e 	bl	8003048 <HAL_I2C_Master_Receive>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 8001156:	4809      	ldr	r0, [pc, #36]	; (800117c <BMP280_Write_Reg+0x84>)
 8001158:	f005 f886 	bl	8006268 <puts>
	}

	if (buf[0] == value) {
 800115c:	7b3b      	ldrb	r3, [r7, #12]
 800115e:	79ba      	ldrb	r2, [r7, #6]
 8001160:	429a      	cmp	r2, r3
 8001162:	d101      	bne.n	8001168 <BMP280_Write_Reg+0x70>
		return 0;
 8001164:	2300      	movs	r3, #0
 8001166:	e000      	b.n	800116a <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8001168:	2301      	movs	r3, #1
	}
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000108 	.word	0x20000108
 8001178:	0800704c 	.word	0x0800704c
 800117c:	08007068 	.word	0x08007068

08001180 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8001190:	23ee      	movs	r3, #238	; 0xee
 8001192:	b299      	uxth	r1, r3
 8001194:	1dfa      	adds	r2, r7, #7
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <BMP280_Read_Reg+0x70>)
 80011a0:	f001 fe54 	bl	8002e4c <HAL_I2C_Master_Transmit>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <BMP280_Read_Reg+0x74>)
 80011b0:	f005 f85a 	bl	8006268 <puts>
	}

	buf = (uint8_t*) malloc(length);
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 fed8 	bl	8005f6c <malloc>
 80011bc:	4603      	mov	r3, r0
 80011be:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 80011c0:	23ee      	movs	r3, #238	; 0xee
 80011c2:	b299      	uxth	r1, r3
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	4807      	ldr	r0, [pc, #28]	; (80011f0 <BMP280_Read_Reg+0x70>)
 80011d2:	f001 ff39 	bl	8003048 <HAL_I2C_Master_Receive>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <BMP280_Read_Reg+0x78>)
 80011e2:	f005 f841 	bl	8006268 <puts>
	}

	return buf;
 80011e6:	68bb      	ldr	r3, [r7, #8]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000108 	.word	0x20000108
 80011f4:	0800704c 	.word	0x0800704c
 80011f8:	08007068 	.word	0x08007068

080011fc <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 80011fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8001204:	23fa      	movs	r3, #250	; 0xfa
 8001206:	2203      	movs	r2, #3
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffb8 	bl	8001180 <BMP280_Read_Reg>
 8001210:	61f8      	str	r0, [r7, #28]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	031a      	lsls	r2, r3, #12
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3301      	adds	r3, #1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	3202      	adds	r2, #2
 8001226:	7812      	ldrb	r2, [r2, #0]
 8001228:	0912      	lsrs	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
	t_fine = var1 + var2;
	T = (t_fine * 5 + 128) >> 8;*/


	double var1, var2, T;
	var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0) * ((double)dig_T2);
 8001230:	69b8      	ldr	r0, [r7, #24]
 8001232:	f7ff f98f 	bl	8000554 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b5c      	ldr	r3, [pc, #368]	; (80013ac <BMP280_get_temperature+0x1b0>)
 800123c:	f7ff fb1e 	bl	800087c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4614      	mov	r4, r2
 8001246:	461d      	mov	r5, r3
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <BMP280_get_temperature+0x1b4>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f971 	bl	8000534 <__aeabi_ui2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <BMP280_get_temperature+0x1b8>)
 8001258:	f7ff fb10 	bl	800087c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f828 	bl	80002b8 <__aeabi_dsub>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4614      	mov	r4, r2
 800126e:	461d      	mov	r5, r3
 8001270:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <BMP280_get_temperature+0x1bc>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f96c 	bl	8000554 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff f9d0 	bl	8000628 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = ((((double)adc_T)/131072.0-((double)dig_T1)/8192.0) * (((double)adc_T)/131072.0-((double) dig_T1)/8192.0)) * ((double)dig_T3);
 8001290:	69b8      	ldr	r0, [r7, #24]
 8001292:	f7ff f95f 	bl	8000554 <__aeabi_i2d>
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800129e:	f7ff faed 	bl	800087c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4614      	mov	r4, r2
 80012a8:	461d      	mov	r5, r3
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <BMP280_get_temperature+0x1b4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f940 	bl	8000534 <__aeabi_ui2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b40      	ldr	r3, [pc, #256]	; (80013bc <BMP280_get_temperature+0x1c0>)
 80012ba:	f7ff fadf 	bl	800087c <__aeabi_ddiv>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7fe fff7 	bl	80002b8 <__aeabi_dsub>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	461d      	mov	r5, r3
 80012d2:	69b8      	ldr	r0, [r7, #24]
 80012d4:	f7ff f93e 	bl	8000554 <__aeabi_i2d>
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80012e0:	f7ff facc 	bl	800087c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4690      	mov	r8, r2
 80012ea:	4699      	mov	r9, r3
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <BMP280_get_temperature+0x1b4>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f91f 	bl	8000534 <__aeabi_ui2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <BMP280_get_temperature+0x1c0>)
 80012fc:	f7ff fabe 	bl	800087c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4640      	mov	r0, r8
 8001306:	4649      	mov	r1, r9
 8001308:	f7fe ffd6 	bl	80002b8 <__aeabi_dsub>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f988 	bl	8000628 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <BMP280_get_temperature+0x1c4>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f914 	bl	8000554 <__aeabi_i2d>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4620      	mov	r0, r4
 8001332:	4629      	mov	r1, r5
 8001334:	f7ff f978 	bl	8000628 <__aeabi_dmul>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	t_fine = (BMP280_S32_t)(var1 + var2);
 8001340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001348:	f7fe ffb8 	bl	80002bc <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc02 	bl	8000b5c <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <BMP280_get_temperature+0x1c8>)
 800135c:	6013      	str	r3, [r2, #0]
	T = (var1 + var2) / 5120.0;
 800135e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001362:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001366:	f7fe ffa9 	bl	80002bc <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <BMP280_get_temperature+0x1cc>)
 8001378:	f7ff fa80 	bl	800087c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	e9c7 2300 	strd	r2, r3, [r7]

	free(buf);
 8001384:	69f8      	ldr	r0, [r7, #28]
 8001386:	f004 fdf9 	bl	8005f7c <free>

	printf("Temperature: ");
 800138a:	4810      	ldr	r0, [pc, #64]	; (80013cc <BMP280_get_temperature+0x1d0>)
 800138c:	f004 fee6 	bl	800615c <iprintf>
	printf("%d", T);
 8001390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001394:	480e      	ldr	r0, [pc, #56]	; (80013d0 <BMP280_get_temperature+0x1d4>)
 8001396:	f004 fee1 	bl	800615c <iprintf>

	printf("\r\n");
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <BMP280_get_temperature+0x1d8>)
 800139c:	f004 ff64 	bl	8006268 <puts>

	return adc_T;
 80013a0:	69bb      	ldr	r3, [r7, #24]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3720      	adds	r7, #32
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ac:	40d00000 	.word	0x40d00000
 80013b0:	20000094 	.word	0x20000094
 80013b4:	40900000 	.word	0x40900000
 80013b8:	20000096 	.word	0x20000096
 80013bc:	40c00000 	.word	0x40c00000
 80013c0:	20000098 	.word	0x20000098
 80013c4:	200000ac 	.word	0x200000ac
 80013c8:	40b40000 	.word	0x40b40000
 80013cc:	08007084 	.word	0x08007084
 80013d0:	08007094 	.word	0x08007094
 80013d4:	08007098 	.word	0x08007098

080013d8 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 80013de:	23f7      	movs	r3, #247	; 0xf7
 80013e0:	2203      	movs	r2, #3
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fecb 	bl	8001180 <BMP280_Read_Reg>
 80013ea:	61f8      	str	r0, [r7, #28]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	031a      	lsls	r2, r3, #12
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	3202      	adds	r2, #2
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	0912      	lsrs	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
*/


	double var1, var2, p;
	var1 = ((double)t_fine/2.0)-64000.0;
 800140a:	4bc3      	ldr	r3, [pc, #780]	; (8001718 <BMP280_get_pressure+0x340>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff f8a0 	bl	8000554 <__aeabi_i2d>
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800141c:	f7ff fa2e 	bl	800087c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4bbb      	ldr	r3, [pc, #748]	; (800171c <BMP280_get_pressure+0x344>)
 800142e:	f7fe ff43 	bl	80002b8 <__aeabi_dsub>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var1 * var1 * ((double)dig_P6) / 32768.0;
 800143a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001442:	f7ff f8f1 	bl	8000628 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4614      	mov	r4, r2
 800144c:	461d      	mov	r5, r3
 800144e:	4bb4      	ldr	r3, [pc, #720]	; (8001720 <BMP280_get_pressure+0x348>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f87d 	bl	8000554 <__aeabi_i2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7ff f8e1 	bl	8000628 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4bac      	ldr	r3, [pc, #688]	; (8001724 <BMP280_get_pressure+0x34c>)
 8001474:	f7ff fa02 	bl	800087c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = var2 + var1 * ((double)dig_P5) * 2.0;
 8001480:	4ba9      	ldr	r3, [pc, #676]	; (8001728 <BMP280_get_pressure+0x350>)
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f864 	bl	8000554 <__aeabi_i2d>
 800148c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001490:	f7ff f8ca 	bl	8000628 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f7fe ff0c 	bl	80002bc <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ac:	f7fe ff06 	bl	80002bc <__adddf3>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2/4.0)+(((double)dig_P4) * 65536.0);
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b9b      	ldr	r3, [pc, #620]	; (800172c <BMP280_get_pressure+0x354>)
 80014be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014c2:	f7ff f9db 	bl	800087c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4614      	mov	r4, r2
 80014cc:	461d      	mov	r5, r3
 80014ce:	4b98      	ldr	r3, [pc, #608]	; (8001730 <BMP280_get_pressure+0x358>)
 80014d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f83d 	bl	8000554 <__aeabi_i2d>
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4b95      	ldr	r3, [pc, #596]	; (8001734 <BMP280_get_pressure+0x35c>)
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (((double)dig_P3) * var1 * var1 / 524288.0 + ((double)dig_P2) * var1) / 524288.0;
 80014f8:	4b8f      	ldr	r3, [pc, #572]	; (8001738 <BMP280_get_pressure+0x360>)
 80014fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f828 	bl	8000554 <__aeabi_i2d>
 8001504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001508:	f7ff f88e 	bl	8000628 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001518:	f7ff f886 	bl	8000628 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <BMP280_get_pressure+0x364>)
 800152a:	f7ff f9a7 	bl	800087c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4614      	mov	r4, r2
 8001534:	461d      	mov	r5, r3
 8001536:	4b82      	ldr	r3, [pc, #520]	; (8001740 <BMP280_get_pressure+0x368>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f809 	bl	8000554 <__aeabi_i2d>
 8001542:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001546:	f7ff f86f 	bl	8000628 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7fe feb3 	bl	80002bc <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <BMP280_get_pressure+0x364>)
 8001564:	f7ff f98a 	bl	800087c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = (1.0 + var1 / 32768.0)*((double)dig_P1);
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b6b      	ldr	r3, [pc, #428]	; (8001724 <BMP280_get_pressure+0x34c>)
 8001576:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800157a:	f7ff f97f 	bl	800087c <__aeabi_ddiv>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	4b6e      	ldr	r3, [pc, #440]	; (8001744 <BMP280_get_pressure+0x36c>)
 800158c:	f7fe fe96 	bl	80002bc <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	461d      	mov	r5, r3
 8001598:	4b6b      	ldr	r3, [pc, #428]	; (8001748 <BMP280_get_pressure+0x370>)
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ffc9 	bl	8000534 <__aeabi_ui2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff f83d 	bl	8000628 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (var1 == 0.0)
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c2:	f7ff fa99 	bl	8000af8 <__aeabi_dcmpeq>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <BMP280_get_pressure+0x1f8>
	{
	return 0; // avoid exception caused by division by zero
 80015cc:	2300      	movs	r3, #0
 80015ce:	e09a      	b.n	8001706 <BMP280_get_pressure+0x32e>
	}
	p = 1048576.0-(double)adc_P;
 80015d0:	69b8      	ldr	r0, [r7, #24]
 80015d2:	f7fe ffbf 	bl	8000554 <__aeabi_i2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	f04f 0000 	mov.w	r0, #0
 80015de:	495b      	ldr	r1, [pc, #364]	; (800174c <BMP280_get_pressure+0x374>)
 80015e0:	f7fe fe6a 	bl	80002b8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 2300 	strd	r2, r3, [r7]
	p = (p-(var2 / 4096.0)) * 6250.0 / var1;
 80015ec:	f04f 0200 	mov.w	r2, #0
 80015f0:	4b57      	ldr	r3, [pc, #348]	; (8001750 <BMP280_get_pressure+0x378>)
 80015f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015f6:	f7ff f941 	bl	800087c <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001602:	f7fe fe59 	bl	80002b8 <__aeabi_dsub>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	a340      	add	r3, pc, #256	; (adr r3, 8001710 <BMP280_get_pressure+0x338>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f808 	bl	8000628 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001624:	f7ff f92a 	bl	800087c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	e9c7 2300 	strd	r2, r3, [r7]
	var1 = ((double)dig_P9) * p * p / 2147483648.0;
 8001630:	4b48      	ldr	r3, [pc, #288]	; (8001754 <BMP280_get_pressure+0x37c>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff8c 	bl	8000554 <__aeabi_i2d>
 800163c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001640:	f7fe fff2 	bl	8000628 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001650:	f7fe ffea 	bl	8000628 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <BMP280_get_pressure+0x380>)
 8001662:	f7ff f90b 	bl	800087c <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = p * ((double)dig_P8) / 32768.0;
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <BMP280_get_pressure+0x384>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff6d 	bl	8000554 <__aeabi_i2d>
 800167a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800167e:	f7fe ffd3 	bl	8000628 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <BMP280_get_pressure+0x34c>)
 8001690:	f7ff f8f4 	bl	800087c <__aeabi_ddiv>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2302 	strd	r2, r3, [r7, #8]
	p = p + (var1 + var2 + ((double)dig_P7)) / 16.0;
 800169c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a4:	f7fe fe0a 	bl	80002bc <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	461d      	mov	r5, r3
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <BMP280_get_pressure+0x388>)
 80016b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff4c 	bl	8000554 <__aeabi_i2d>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fdfa 	bl	80002bc <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <BMP280_get_pressure+0x38c>)
 80016d6:	f7ff f8d1 	bl	800087c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e2:	f7fe fdeb 	bl	80002bc <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	e9c7 2300 	strd	r2, r3, [r7]


	free(buf);
 80016ee:	69f8      	ldr	r0, [r7, #28]
 80016f0:	f004 fc44 	bl	8005f7c <free>

	printf("Pressure:    ");
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <BMP280_get_pressure+0x390>)
 80016f6:	f004 fd31 	bl	800615c <iprintf>
	printf("%d\r\n", p);
 80016fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016fe:	481b      	ldr	r0, [pc, #108]	; (800176c <BMP280_get_pressure+0x394>)
 8001700:	f004 fd2c 	bl	800615c <iprintf>



	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	00000000 	.word	0x00000000
 8001714:	40b86a00 	.word	0x40b86a00
 8001718:	200000ac 	.word	0x200000ac
 800171c:	40ef4000 	.word	0x40ef4000
 8001720:	200000a4 	.word	0x200000a4
 8001724:	40e00000 	.word	0x40e00000
 8001728:	200000a2 	.word	0x200000a2
 800172c:	40100000 	.word	0x40100000
 8001730:	200000a0 	.word	0x200000a0
 8001734:	40f00000 	.word	0x40f00000
 8001738:	2000009e 	.word	0x2000009e
 800173c:	41200000 	.word	0x41200000
 8001740:	2000009c 	.word	0x2000009c
 8001744:	3ff00000 	.word	0x3ff00000
 8001748:	2000009a 	.word	0x2000009a
 800174c:	41300000 	.word	0x41300000
 8001750:	40b00000 	.word	0x40b00000
 8001754:	200000aa 	.word	0x200000aa
 8001758:	41e00000 	.word	0x41e00000
 800175c:	200000a8 	.word	0x200000a8
 8001760:	200000a6 	.word	0x200000a6
 8001764:	40300000 	.word	0x40300000
 8001768:	0800709c 	.word	0x0800709c
 800176c:	080070ac 	.word	0x080070ac

08001770 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_CAN1_Init+0x88>)
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <MX_CAN1_Init+0x8c>)
 8001778:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <MX_CAN1_Init+0x88>)
 800177c:	2210      	movs	r2, #16
 800177e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_CAN1_Init+0x88>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <MX_CAN1_Init+0x88>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800178c:	4b1a      	ldr	r3, [pc, #104]	; (80017f8 <MX_CAN1_Init+0x88>)
 800178e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001792:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <MX_CAN1_Init+0x88>)
 8001796:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800179a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_CAN1_Init+0x88>)
 800179e:	2200      	movs	r2, #0
 80017a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017bc:	2200      	movs	r2, #0
 80017be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017c0:	480d      	ldr	r0, [pc, #52]	; (80017f8 <MX_CAN1_Init+0x88>)
 80017c2:	f000 fcad 	bl	8002120 <HAL_CAN_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80017cc:	f000 f9e6 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  pHeader.StdId = 0x61;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_CAN1_Init+0x90>)
 80017d2:	2261      	movs	r2, #97	; 0x61
 80017d4:	601a      	str	r2, [r3, #0]
  pHeader.ExtId = 0x00; //ne sera pas utilisée
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <MX_CAN1_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  pHeader.IDE = CAN_ID_STD;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_CAN1_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <MX_CAN1_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  pHeader.DLC = 2;
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <MX_CAN1_Init+0x90>)
 80017ea:	2202      	movs	r2, #2
 80017ec:	611a      	str	r2, [r3, #16]
  pHeader.TransmitGlobalTime = DISABLE;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <MX_CAN1_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200000c8 	.word	0x200000c8
 80017fc:	40006400 	.word	0x40006400
 8001800:	200000b0 	.word	0x200000b0

08001804 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	; (8001888 <HAL_CAN_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12c      	bne.n	8001880 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_CAN_MspInit+0x88>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_CAN_MspInit+0x88>)
 8001830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_CAN_MspInit+0x88>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_CAN_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_CAN_MspInit+0x88>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_CAN_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800185e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001870:	2309      	movs	r3, #9
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_CAN_MspInit+0x8c>)
 800187c:	f001 f80e 	bl	800289c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	; 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40006400 	.word	0x40006400
 800188c:	40023800 	.word	0x40023800
 8001890:	40020400 	.word	0x40020400

08001894 <main_comm>:
extern int16_t dig_P8;
extern int16_t dig_P9;



void main_comm(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af04      	add	r7, sp, #16

	//HAL_I2C_Master_Transmit(&hi2c1, ADDRESS_BMP280, buf, 1, Timeout); inutile

	//Lecture Id
	HAL_I2C_Mem_Read(&hi2c1, ADDRESS_BMP280, ADDRESS_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, Timeout1);
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <main_comm+0x60>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	2301      	movs	r3, #1
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <main_comm+0x64>)
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	22d0      	movs	r2, #208	; 0xd0
 80018ac:	21ee      	movs	r1, #238	; 0xee
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <main_comm+0x68>)
 80018b0:	f001 feea 	bl	8003688 <HAL_I2C_Mem_Read>
	//printf("%d\r\n",buf[0]);

	//Configuration BMP280
	buf1[0]=3;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <main_comm+0x6c>)
 80018b6:	2203      	movs	r2, #3
 80018b8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,ADDRESS_BMP280,ADDRESS_POWER_MODES,I2C_MEMADD_SIZE_8BIT,buf1,2,Timeout1);
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <main_comm+0x60>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2302      	movs	r3, #2
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <main_comm+0x6c>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	22f4      	movs	r2, #244	; 0xf4
 80018cc:	21ee      	movs	r1, #238	; 0xee
 80018ce:	480b      	ldr	r0, [pc, #44]	; (80018fc <main_comm+0x68>)
 80018d0:	f001 fde0 	bl	8003494 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c1,ADDRESS_BMP280,ADDRESS_POWER_MODES,I2C_MEMADD_SIZE_8BIT,buf,2,Timeout1);
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <main_comm+0x60>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	2302      	movs	r3, #2
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <main_comm+0x64>)
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2301      	movs	r3, #1
 80018e4:	22f4      	movs	r2, #244	; 0xf4
 80018e6:	21ee      	movs	r1, #238	; 0xee
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <main_comm+0x68>)
 80018ea:	f001 fecd 	bl	8003688 <HAL_I2C_Mem_Read>
	//printf("%d\r\n",buf[0]);

}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000004 	.word	0x20000004
 80018f8:	200000f0 	.word	0x200000f0
 80018fc:	20000108 	.word	0x20000108
 8001900:	200000fc 	.word	0x200000fc

08001904 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_GPIO_Init+0x4c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <MX_GPIO_Init+0x4c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_GPIO_Init+0x4c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_GPIO_Init+0x4c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a08      	ldr	r2, [pc, #32]	; (8001950 <MX_GPIO_Init+0x4c>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_GPIO_Init+0x4c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <MX_I2C1_Init+0x50>)
 800195a:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <MX_I2C1_Init+0x54>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_I2C1_Init+0x58>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001976:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001990:	4804      	ldr	r0, [pc, #16]	; (80019a4 <MX_I2C1_Init+0x50>)
 8001992:	f001 f917 	bl	8002bc4 <HAL_I2C_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800199c:	f000 f8fe 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000108 	.word	0x20000108
 80019a8:	40005400 	.word	0x40005400
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_I2C_MspInit+0x84>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12b      	bne.n	8001a2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ee:	23c0      	movs	r3, #192	; 0xc0
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f2:	2312      	movs	r3, #18
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fe:	2304      	movs	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <HAL_I2C_MspInit+0x8c>)
 8001a0a:	f000 ff47 	bl	800289c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_I2C_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40005400 	.word	0x40005400
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400

08001a40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a44:	f000 fad6 	bl	8001ff4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a48:	f000 f83c 	bl	8001ac4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a4c:	f7ff ff5a 	bl	8001904 <MX_GPIO_Init>
	MX_CAN1_Init();
 8001a50:	f7ff fe8e 	bl	8001770 <MX_CAN1_Init>
	MX_I2C1_Init();
 8001a54:	f7ff ff7e 	bl	8001954 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 8001a58:	f000 f9ca 	bl	8001df0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001a5c:	f000 f9f2 	bl	8001e44 <MX_USART2_UART_Init>
	/*printf("bonjour\r\n");
	int size = snprintf(buffer,max_len,"bonjour\r\n");
	HAL_UART_Transmit(&huart2, buffer, size, 0xFFFF);*/


	printf("\r\nChecking for BMP280\r\n");
 8001a60:	4812      	ldr	r0, [pc, #72]	; (8001aac <main+0x6c>)
 8001a62:	f004 fc01 	bl	8006268 <puts>
	BMP280_check();
 8001a66:	f7ff fa23 	bl	8000eb0 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8001a6a:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <main+0x70>)
 8001a6c:	f004 fbfc 	bl	8006268 <puts>
	BMP280_init();
 8001a70:	f7ff fa6a 	bl	8000f48 <BMP280_init>
	main_comm();
 8001a74:	f7ff ff0e 	bl	8001894 <main_comm>
	BMP280_get_calib_values();
 8001a78:	f7ff fa8c 	bl	8000f94 <BMP280_get_calib_values>

	//bus CAN

	HAL_CAN_Start(&hcan1);
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <main+0x74>)
 8001a7e:	f000 fc4a 	bl	8002316 <HAL_CAN_Start>

	aData[0]=0x5A; //90 degres
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <main+0x78>)
 8001a84:	225a      	movs	r2, #90	; 0x5a
 8001a86:	701a      	strb	r2, [r3, #0]
	aData[1]=0x01; //négatif
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <main+0x78>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <main+0x7c>)
 8001a90:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <main+0x78>)
 8001a92:	490b      	ldr	r1, [pc, #44]	; (8001ac0 <main+0x80>)
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <main+0x74>)
 8001a96:	f000 fc82 	bl	800239e <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
		aData[1]=1;
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);*/
		//BUS CAN END

		BMP280_get_temperature();
 8001a9a:	f7ff fbaf 	bl	80011fc <BMP280_get_temperature>
		BMP280_get_pressure();
 8001a9e:	f7ff fc9b 	bl	80013d8 <BMP280_get_pressure>
		//HAL_UART_Transmit(&huart1, "Hello i'm nucleo board\r\n", 24, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart2, buffer, sizeof(buffer),HAL_MAX_DELAY);
		//HAL_UART_Transmit(&huart1, buffer[0], 24, HAL_MAX_DELAY);
		//printf('pointeur=%d',pt);
		HAL_Delay(1000);
 8001aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa6:	f000 fb17 	bl	80020d8 <HAL_Delay>
		BMP280_get_temperature();
 8001aaa:	e7f6      	b.n	8001a9a <main+0x5a>
 8001aac:	080070b4 	.word	0x080070b4
 8001ab0:	080070cc 	.word	0x080070cc
 8001ab4:	200000c8 	.word	0x200000c8
 8001ab8:	2000015c 	.word	0x2000015c
 8001abc:	20000164 	.word	0x20000164
 8001ac0:	200000b0 	.word	0x200000b0

08001ac4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b094      	sub	sp, #80	; 0x50
 8001ac8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aca:	f107 031c 	add.w	r3, r7, #28
 8001ace:	2234      	movs	r2, #52	; 0x34
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f004 fa5a 	bl	8005f8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <SystemClock_Config+0xd0>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a28      	ldr	r2, [pc, #160]	; (8001b94 <SystemClock_Config+0xd0>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b26      	ldr	r3, [pc, #152]	; (8001b94 <SystemClock_Config+0xd0>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <SystemClock_Config+0xd4>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b10:	4a21      	ldr	r2, [pc, #132]	; (8001b98 <SystemClock_Config+0xd4>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <SystemClock_Config+0xd4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b24:	2302      	movs	r3, #2
 8001b26:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b2c:	2310      	movs	r3, #16
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b30:	2302      	movs	r3, #2
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 80;
 8001b3c:	2350      	movs	r3, #80	; 0x50
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ff2f 	bl	80049b4 <HAL_RCC_OscConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001b5c:	f000 f81e 	bl	8001b9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b60:	230f      	movs	r3, #15
 8001b62:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b64:	2302      	movs	r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b70:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f002 fc55 	bl	800442c <HAL_RCC_ClockConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8001b88:	f000 f808 	bl	8001b9c <Error_Handler>
	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3750      	adds	r7, #80	; 0x50
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40007000 	.word	0x40007000

08001b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_MspInit+0x4c>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	//int size = snprintf(ch,sizeof(int),);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001c00:	1d39      	adds	r1, r7, #4
 8001c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c06:	2201      	movs	r2, #1
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <__io_putchar+0x20>)
 8001c0a:	f003 f9be 	bl	8004f8a <HAL_UART_Transmit>
	return ch;
 8001c0e:	687b      	ldr	r3, [r7, #4]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200001b0 	.word	0x200001b0

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 fa16 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	if(buffer[pt]='\n'){
		HAL_UART_Transmit(&huart1, )
	}
	pt++;*/
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <USART2_IRQHandler+0x10>)
 8001c76:	f003 fa1b 	bl	80050b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200001b0 	.word	0x200001b0

08001c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
	}

return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff8d 	bl	8001bf8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
	}
	return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f004 f8c2 	bl	8005f18 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000168 	.word	0x20000168
 8001dc8:	20000208 	.word	0x20000208

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_USART1_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART1_UART_Init+0x4c>)
 8001e28:	f003 f862 	bl	8004ef0 <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff feb3 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000016c 	.word	0x2000016c
 8001e40:	40011000 	.word	0x40011000

08001e44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <MX_USART2_UART_Init+0x50>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_USART2_UART_Init+0x4c>)
 8001e7c:	f003 f838 	bl	8004ef0 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e86:	f7ff fe89 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200001b0 	.word	0x200001b0
 8001e94:	40004400 	.word	0x40004400

08001e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a36      	ldr	r2, [pc, #216]	; (8001f90 <HAL_UART_MspInit+0xf8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12d      	bne.n	8001f16 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a34      	ldr	r2, [pc, #208]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001ec4:	f043 0310 	orr.w	r3, r3, #16
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ef2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f04:	2307      	movs	r3, #7
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4822      	ldr	r0, [pc, #136]	; (8001f98 <HAL_UART_MspInit+0x100>)
 8001f10:	f000 fcc4 	bl	800289c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f14:	e038      	b.n	8001f88 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_UART_MspInit+0x104>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d133      	bne.n	8001f88 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <HAL_UART_MspInit+0xfc>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f58:	230c      	movs	r3, #12
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f68:	2307      	movs	r3, #7
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_UART_MspInit+0x100>)
 8001f74:	f000 fc92 	bl	800289c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2026      	movs	r0, #38	; 0x26
 8001f7e:	f000 fbc4 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f82:	2026      	movs	r0, #38	; 0x26
 8001f84:	f000 fbdd 	bl	8002742 <HAL_NVIC_EnableIRQ>
}
 8001f88:	bf00      	nop
 8001f8a:	3730      	adds	r7, #48	; 0x30
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40011000 	.word	0x40011000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40004400 	.word	0x40004400

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa6:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fac:	e002      	b.n	8001fb4 <LoopCopyDataInit>

08001fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb2:	3304      	adds	r3, #4

08001fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb8:	d3f9      	bcc.n	8001fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fbc:	4c0b      	ldr	r4, [pc, #44]	; (8001fec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc0:	e001      	b.n	8001fc6 <LoopFillZerobss>

08001fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc4:	3204      	adds	r2, #4

08001fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc8:	d3fb      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fca:	f7ff feff 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f003 ffa9 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff fd35 	bl	8001a40 <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fe4:	080071a0 	.word	0x080071a0
  ldr r2, =_sbss
 8001fe8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fec:	20000208 	.word	0x20000208

08001ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_Init+0x40>)
 8001ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_Init+0x40>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x40>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 fb69 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	200f      	movs	r0, #15
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fdbe 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fb81 	bl	800275e <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 fb49 	bl	800270a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000008 	.word	0x20000008
 8002090:	20000010 	.word	0x20000010
 8002094:	2000000c 	.word	0x2000000c

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000010 	.word	0x20000010
 80020bc:	200001f4 	.word	0x200001f4

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200001f4 	.word	0x200001f4

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000010 	.word	0x20000010

08002120 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0ed      	b.n	800230e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fb60 	bl	8001804 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002154:	f7ff ffb4 	bl	80020c0 <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800215a:	e012      	b.n	8002182 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800215c:	f7ff ffb0 	bl	80020c0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b0a      	cmp	r3, #10
 8002168:	d90b      	bls.n	8002182 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2205      	movs	r2, #5
 800217a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0c5      	b.n	800230e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0e5      	beq.n	800215c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0202 	bic.w	r2, r2, #2
 800219e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a0:	f7ff ff8e 	bl	80020c0 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021a6:	e012      	b.n	80021ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021a8:	f7ff ff8a 	bl	80020c0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b0a      	cmp	r3, #10
 80021b4:	d90b      	bls.n	80021ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e09f      	b.n	800230e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e5      	bne.n	80021a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7e1b      	ldrb	r3, [r3, #24]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d108      	bne.n	80021f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e007      	b.n	8002206 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7e5b      	ldrb	r3, [r3, #25]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e007      	b.n	8002230 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7e9b      	ldrb	r3, [r3, #26]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d108      	bne.n	800224a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e007      	b.n	800225a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0220 	bic.w	r2, r2, #32
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7edb      	ldrb	r3, [r3, #27]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0210 	bic.w	r2, r2, #16
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e007      	b.n	8002284 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0210 	orr.w	r2, r2, #16
 8002282:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7f1b      	ldrb	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d108      	bne.n	800229e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0208 	orr.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	e007      	b.n	80022ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0208 	bic.w	r2, r2, #8
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7f5b      	ldrb	r3, [r3, #29]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0204 	orr.w	r2, r2, #4
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e007      	b.n	80022d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	ea42 0103 	orr.w	r1, r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d12e      	bne.n	8002388 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002342:	f7ff febd 	bl	80020c0 <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002348:	e012      	b.n	8002370 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800234a:	f7ff feb9 	bl	80020c0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b0a      	cmp	r3, #10
 8002356:	d90b      	bls.n	8002370 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2205      	movs	r2, #5
 8002368:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e012      	b.n	8002396 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1e5      	bne.n	800234a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e006      	b.n	8002396 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800239e:	b480      	push	{r7}
 80023a0:	b089      	sub	sp, #36	; 0x24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d003      	beq.n	80023ca <HAL_CAN_AddTxMessage+0x2c>
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 80b8 	bne.w	800253a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a0 	beq.w	800252a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	0e1b      	lsrs	r3, r3, #24
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d907      	bls.n	800240a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e09e      	b.n	8002548 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800240a:	2201      	movs	r2, #1
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	6809      	ldr	r1, [r1, #0]
 800242a:	431a      	orrs	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3318      	adds	r3, #24
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	440b      	add	r3, r1
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e00f      	b.n	8002458 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002442:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002448:	68f9      	ldr	r1, [r7, #12]
 800244a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800244c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3318      	adds	r3, #24
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	440b      	add	r3, r1
 8002456:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3318      	adds	r3, #24
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	7d1b      	ldrb	r3, [r3, #20]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d111      	bne.n	8002498 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3318      	adds	r3, #24
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	6811      	ldr	r1, [r2, #0]
 8002488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3318      	adds	r3, #24
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	440b      	add	r3, r1
 8002494:	3304      	adds	r3, #4
 8002496:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3307      	adds	r3, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	061a      	lsls	r2, r3, #24
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3306      	adds	r3, #6
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	041b      	lsls	r3, r3, #16
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3305      	adds	r3, #5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	4313      	orrs	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	3204      	adds	r2, #4
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4610      	mov	r0, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	6811      	ldr	r1, [r2, #0]
 80024c0:	ea43 0200 	orr.w	r2, r3, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80024ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3303      	adds	r3, #3
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	061a      	lsls	r2, r3, #24
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3302      	adds	r3, #2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3301      	adds	r3, #1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	4313      	orrs	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	7812      	ldrb	r2, [r2, #0]
 80024f0:	4610      	mov	r0, r2
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6811      	ldr	r1, [r2, #0]
 80024f6:	ea43 0200 	orr.w	r2, r3, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	440b      	add	r3, r1
 8002500:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002504:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3318      	adds	r3, #24
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	6811      	ldr	r1, [r2, #0]
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3318      	adds	r3, #24
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e00e      	b.n	8002548 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e006      	b.n	8002548 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	3724      	adds	r7, #36	; 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800257c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002586:	4a04      	ldr	r2, [pc, #16]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	60d3      	str	r3, [r2, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff29 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800271c:	f7ff ff3e 	bl	800259c <__NVIC_GetPriorityGrouping>
 8002720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	6978      	ldr	r0, [r7, #20]
 8002728:	f7ff ff8e 	bl	8002648 <NVIC_EncodePriority>
 800272c:	4602      	mov	r2, r0
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff5d 	bl	80025f4 <__NVIC_SetPriority>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff31 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffa2 	bl	80026b0 <SysTick_Config>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fc9c 	bl	80020c0 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d008      	beq.n	80027a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e052      	b.n	800284e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0216 	bic.w	r2, r2, #22
 80027b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <HAL_DMA_Abort+0x62>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0208 	bic.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	e013      	b.n	8002822 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fa:	f7ff fc61 	bl	80020c0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b05      	cmp	r3, #5
 8002806:	d90c      	bls.n	8002822 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2203      	movs	r2, #3
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e015      	b.n	800284e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1e4      	bne.n	80027fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d004      	beq.n	8002874 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2280      	movs	r2, #128	; 0x80
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e00c      	b.n	800288e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2205      	movs	r2, #5
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e165      	b.n	8002b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 8154 	bne.w	8002b7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d005      	beq.n	80028ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d130      	bne.n	8002950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0201 	and.w	r2, r3, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d017      	beq.n	800298c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80ae 	beq.w	8002b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b5d      	ldr	r3, [pc, #372]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_GPIO_Init+0x300>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_GPIO_Init+0x308>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d025      	beq.n	8002ab6 <HAL_GPIO_Init+0x21a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ba8 <HAL_GPIO_Init+0x30c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01f      	beq.n	8002ab2 <HAL_GPIO_Init+0x216>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4d      	ldr	r2, [pc, #308]	; (8002bac <HAL_GPIO_Init+0x310>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d019      	beq.n	8002aae <HAL_GPIO_Init+0x212>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4c      	ldr	r2, [pc, #304]	; (8002bb0 <HAL_GPIO_Init+0x314>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x20e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4b      	ldr	r2, [pc, #300]	; (8002bb4 <HAL_GPIO_Init+0x318>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x20a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_GPIO_Init+0x31c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x206>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a49      	ldr	r2, [pc, #292]	; (8002bbc <HAL_GPIO_Init+0x320>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x202>
 8002a9a:	2306      	movs	r3, #6
 8002a9c:	e00c      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e00a      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x21c>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	; (8002ba0 <HAL_GPIO_Init+0x304>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a31      	ldr	r2, [pc, #196]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b78:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f ae96 	bls.w	80028b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e12b      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fee0 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2224      	movs	r2, #36	; 0x24
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c28:	f001 fcf2 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a81      	ldr	r2, [pc, #516]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d807      	bhi.n	8002c48 <HAL_I2C_Init+0x84>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4a80      	ldr	r2, [pc, #512]	; (8002e3c <HAL_I2C_Init+0x278>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf94      	ite	ls
 8002c40:	2301      	movls	r3, #1
 8002c42:	2300      	movhi	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e006      	b.n	8002c56 <HAL_I2C_Init+0x92>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <HAL_I2C_Init+0x27c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0e7      	b.n	8002e2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a78      	ldr	r2, [pc, #480]	; (8002e44 <HAL_I2C_Init+0x280>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0c9b      	lsrs	r3, r3, #18
 8002c68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <HAL_I2C_Init+0xd4>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3301      	adds	r3, #1
 8002c96:	e009      	b.n	8002cac <HAL_I2C_Init+0xe8>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ca2:	4a69      	ldr	r2, [pc, #420]	; (8002e48 <HAL_I2C_Init+0x284>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	099b      	lsrs	r3, r3, #6
 8002caa:	3301      	adds	r3, #1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	495c      	ldr	r1, [pc, #368]	; (8002e38 <HAL_I2C_Init+0x274>)
 8002cc8:	428b      	cmp	r3, r1
 8002cca:	d819      	bhi.n	8002d00 <HAL_I2C_Init+0x13c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1e59      	subs	r1, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HAL_I2C_Init+0x138>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1e59      	subs	r1, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	e051      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e04f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <HAL_I2C_Init+0x168>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1e58      	subs	r0, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	440b      	add	r3, r1
 8002d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e012      	b.n	8002d52 <HAL_I2C_Init+0x18e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e58      	subs	r0, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	0099      	lsls	r1, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d42:	3301      	adds	r3, #1
 8002d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x196>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e022      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10e      	bne.n	8002d80 <HAL_I2C_Init+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1e58      	subs	r0, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	440b      	add	r3, r1
 8002d70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7e:	e00f      	b.n	8002da0 <HAL_I2C_Init+0x1dc>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1e58      	subs	r0, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6859      	ldr	r1, [r3, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	0099      	lsls	r1, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d96:	3301      	adds	r3, #1
 8002d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	6809      	ldr	r1, [r1, #0]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6911      	ldr	r1, [r2, #16]
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68d2      	ldr	r2, [r2, #12]
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	000186a0 	.word	0x000186a0
 8002e3c:	001e847f 	.word	0x001e847f
 8002e40:	003d08ff 	.word	0x003d08ff
 8002e44:	431bde83 	.word	0x431bde83
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	461a      	mov	r2, r3
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e60:	f7ff f92e 	bl	80020c0 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	f040 80e0 	bne.w	8003034 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2319      	movs	r3, #25
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4970      	ldr	r1, [pc, #448]	; (8003040 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 f8f6 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e0d3      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2C_Master_Transmit+0x50>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0cc      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d007      	beq.n	8002ec2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2221      	movs	r2, #33	; 0x21
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2210      	movs	r2, #16
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	893a      	ldrh	r2, [r7, #8]
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a50      	ldr	r2, [pc, #320]	; (8003044 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6a3a      	ldr	r2, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fde2 	bl	8003ad4 <I2C_MasterRequestWrite>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e08d      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f30:	e066      	b.n	8003000 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f001 f970 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d107      	bne.n	8002f5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e06b      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d11b      	bne.n	8002fd4 <HAL_I2C_Master_Transmit+0x188>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	6a39      	ldr	r1, [r7, #32]
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f001 f960 	bl	800429e <I2C_WaitOnBTFFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d107      	bne.n	8002ffc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e01a      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d194      	bne.n	8002f32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	00100002 	.word	0x00100002
 8003044:	ffff0000 	.word	0xffff0000

08003048 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08c      	sub	sp, #48	; 0x30
 800304c:	af02      	add	r7, sp, #8
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	460b      	mov	r3, r1
 8003056:	817b      	strh	r3, [r7, #10]
 8003058:	4613      	mov	r3, r2
 800305a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff f830 	bl	80020c0 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	f040 820b 	bne.w	8003486 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	2319      	movs	r3, #25
 8003076:	2201      	movs	r2, #1
 8003078:	497c      	ldr	r1, [pc, #496]	; (800326c <HAL_I2C_Master_Receive+0x224>)
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 fff8 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
 8003088:	e1fe      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Master_Receive+0x50>
 8003094:	2302      	movs	r3, #2
 8003096:	e1f7      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d007      	beq.n	80030be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2222      	movs	r2, #34	; 0x22
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2210      	movs	r2, #16
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	893a      	ldrh	r2, [r7, #8]
 80030ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a5c      	ldr	r2, [pc, #368]	; (8003270 <HAL_I2C_Master_Receive+0x228>)
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fd66 	bl	8003bd8 <I2C_MasterRequestRead>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1b8      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	623b      	str	r3, [r7, #32]
 8003132:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e18c      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	2b01      	cmp	r3, #1
 800314c:	d11b      	bne.n	8003186 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800315c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	e16c      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b02      	cmp	r3, #2
 800318c:	d11b      	bne.n	80031c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	e14c      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031ec:	e138      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	f200 80f1 	bhi.w	80033da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d123      	bne.n	8003248 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f001 f88b 	bl	8004320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e139      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003246:	e10b      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b02      	cmp	r3, #2
 800324e:	d14e      	bne.n	80032ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	2200      	movs	r2, #0
 8003258:	4906      	ldr	r1, [pc, #24]	; (8003274 <HAL_I2C_Master_Receive+0x22c>)
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 ff08 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d008      	beq.n	8003278 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e10e      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
 800326a:	bf00      	nop
 800326c:	00100002 	.word	0x00100002
 8003270:	ffff0000 	.word	0xffff0000
 8003274:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	3b01      	subs	r3, #1
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ec:	e0b8      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	2200      	movs	r2, #0
 80032f6:	4966      	ldr	r1, [pc, #408]	; (8003490 <HAL_I2C_Master_Receive+0x448>)
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 feb9 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0bf      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	1c5a      	adds	r2, r3, #1
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2200      	movs	r2, #0
 8003352:	494f      	ldr	r1, [pc, #316]	; (8003490 <HAL_I2C_Master_Receive+0x448>)
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fe8b 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e091      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033d8:	e042      	b.n	8003460 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 ff9e 	bl	8004320 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e04c      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d118      	bne.n	8003460 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003456:	b29b      	uxth	r3, r3
 8003458:	3b01      	subs	r3, #1
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	2b00      	cmp	r3, #0
 8003466:	f47f aec2 	bne.w	80031ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e000      	b.n	8003488 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
  }
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	00010004 	.word	0x00010004

08003494 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	817b      	strh	r3, [r7, #10]
 80034a6:	460b      	mov	r3, r1
 80034a8:	813b      	strh	r3, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7fe fe07 	bl	80020c0 <HAL_GetTick>
 80034b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	f040 80d9 	bne.w	8003674 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2319      	movs	r3, #25
 80034c8:	2201      	movs	r2, #1
 80034ca:	496d      	ldr	r1, [pc, #436]	; (8003680 <HAL_I2C_Mem_Write+0x1ec>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fdcf 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
 80034da:	e0cc      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Mem_Write+0x56>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e0c5      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d007      	beq.n	8003510 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800351e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2221      	movs	r2, #33	; 0x21
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2240      	movs	r2, #64	; 0x40
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a3a      	ldr	r2, [r7, #32]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a4d      	ldr	r2, [pc, #308]	; (8003684 <HAL_I2C_Mem_Write+0x1f0>)
 8003550:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003552:	88f8      	ldrh	r0, [r7, #6]
 8003554:	893a      	ldrh	r2, [r7, #8]
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4603      	mov	r3, r0
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fc06 	bl	8003d74 <I2C_RequestMemoryWrite>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d052      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e081      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fe50 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06b      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	781a      	ldrb	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d11b      	bne.n	8003614 <HAL_I2C_Mem_Write+0x180>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d017      	beq.n	8003614 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1aa      	bne.n	8003572 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fe3c 	bl	800429e <I2C_WaitOnBTFFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e016      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	e000      	b.n	8003676 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003674:	2302      	movs	r3, #2
  }
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	00100002 	.word	0x00100002
 8003684:	ffff0000 	.word	0xffff0000

08003688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08c      	sub	sp, #48	; 0x30
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a2:	f7fe fd0d 	bl	80020c0 <HAL_GetTick>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	f040 8208 	bne.w	8003ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	2319      	movs	r3, #25
 80036bc:	2201      	movs	r2, #1
 80036be:	497b      	ldr	r1, [pc, #492]	; (80038ac <HAL_I2C_Mem_Read+0x224>)
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fcd5 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
 80036ce:	e1fb      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Mem_Read+0x56>
 80036da:	2302      	movs	r3, #2
 80036dc:	e1f4      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d007      	beq.n	8003704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2222      	movs	r2, #34	; 0x22
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a5b      	ldr	r2, [pc, #364]	; (80038b0 <HAL_I2C_Mem_Read+0x228>)
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003746:	88f8      	ldrh	r0, [r7, #6]
 8003748:	893a      	ldrh	r2, [r7, #8]
 800374a:	8979      	ldrh	r1, [r7, #10]
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4603      	mov	r3, r0
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fba2 	bl	8003ea0 <I2C_RequestMemoryRead>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1b0      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d113      	bne.n	8003796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376e:	2300      	movs	r3, #0
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e184      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b01      	cmp	r3, #1
 800379c:	d11b      	bne.n	80037d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e164      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d11b      	bne.n	8003816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	e144      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800382c:	e138      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b03      	cmp	r3, #3
 8003834:	f200 80f1 	bhi.w	8003a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383c:	2b01      	cmp	r3, #1
 800383e:	d123      	bne.n	8003888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fd6b 	bl	8004320 <I2C_WaitOnRXNEFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e139      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003886:	e10b      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b02      	cmp	r3, #2
 800388e:	d14e      	bne.n	800392e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	2200      	movs	r2, #0
 8003898:	4906      	ldr	r1, [pc, #24]	; (80038b4 <HAL_I2C_Mem_Read+0x22c>)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 fbe8 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e10e      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
 80038aa:	bf00      	nop
 80038ac:	00100002 	.word	0x00100002
 80038b0:	ffff0000 	.word	0xffff0000
 80038b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392c:	e0b8      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	2200      	movs	r2, #0
 8003936:	4966      	ldr	r1, [pc, #408]	; (8003ad0 <HAL_I2C_Mem_Read+0x448>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fb99 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0bf      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2200      	movs	r2, #0
 8003992:	494f      	ldr	r1, [pc, #316]	; (8003ad0 <HAL_I2C_Mem_Read+0x448>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fb6b 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e091      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a18:	e042      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fc7e 	bl	8004320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e04c      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d118      	bne.n	8003aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f aec2 	bne.w	800382e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e000      	b.n	8003ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
  }
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3728      	adds	r7, #40	; 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	00010004 	.word	0x00010004

08003ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d006      	beq.n	8003afe <I2C_MasterRequestWrite+0x2a>
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d003      	beq.n	8003afe <I2C_MasterRequestWrite+0x2a>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003afc:	d108      	bne.n	8003b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e00b      	b.n	8003b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	2b12      	cmp	r3, #18
 8003b16:	d107      	bne.n	8003b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fa9b 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00d      	beq.n	8003b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b4e:	d103      	bne.n	8003b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e035      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b64:	d108      	bne.n	8003b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e01b      	b.n	8003bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b78:	897b      	ldrh	r3, [r7, #10]
 8003b7a:	11db      	asrs	r3, r3, #7
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f003 0306 	and.w	r3, r3, #6
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f063 030f 	orn	r3, r3, #15
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <I2C_MasterRequestWrite+0xfc>)
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fac1 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e010      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ba6:	897b      	ldrh	r3, [r7, #10]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <I2C_MasterRequestWrite+0x100>)
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fab1 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	00010008 	.word	0x00010008
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	607a      	str	r2, [r7, #4]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	460b      	mov	r3, r1
 8003be6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d006      	beq.n	8003c12 <I2C_MasterRequestRead+0x3a>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d003      	beq.n	8003c12 <I2C_MasterRequestRead+0x3a>
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c10:	d108      	bne.n	8003c24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	e00b      	b.n	8003c3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	2b11      	cmp	r3, #17
 8003c2a:	d107      	bne.n	8003c3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fa11 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c62:	d103      	bne.n	8003c6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e079      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c78:	d108      	bne.n	8003c8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c7a:	897b      	ldrh	r3, [r7, #10]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	e05f      	b.n	8003d4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	11db      	asrs	r3, r3, #7
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 0306 	and.w	r3, r3, #6
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f063 030f 	orn	r3, r3, #15
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	4930      	ldr	r1, [pc, #192]	; (8003d6c <I2C_MasterRequestRead+0x194>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 fa37 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e054      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4929      	ldr	r1, [pc, #164]	; (8003d70 <I2C_MasterRequestRead+0x198>)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 fa27 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e044      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 f9af 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d103      	bne.n	8003d30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e017      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003d34:	897b      	ldrh	r3, [r7, #10]
 8003d36:	11db      	asrs	r3, r3, #7
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f063 030e 	orn	r3, r3, #14
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <I2C_MasterRequestRead+0x198>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f9e3 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	00010008 	.word	0x00010008
 8003d70:	00010002 	.word	0x00010002

08003d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b088      	sub	sp, #32
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f960 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00d      	beq.n	8003dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc4:	d103      	bne.n	8003dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e05f      	b.n	8003e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	492d      	ldr	r1, [pc, #180]	; (8003e9c <I2C_RequestMemoryWrite+0x128>)
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f998 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04c      	b.n	8003e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa02 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e02b      	b.n	8003e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e40:	893b      	ldrh	r3, [r7, #8]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	611a      	str	r2, [r3, #16]
 8003e4a:	e021      	b.n	8003e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e4c:	893b      	ldrh	r3, [r7, #8]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	6a39      	ldr	r1, [r7, #32]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f9dc 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00d      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d107      	bne.n	8003e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e005      	b.n	8003e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e86:	893b      	ldrh	r3, [r7, #8]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	00010002 	.word	0x00010002

08003ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f8c2 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f00:	d103      	bne.n	8003f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e0aa      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	4952      	ldr	r1, [pc, #328]	; (800406c <I2C_RequestMemoryRead+0x1cc>)
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f8fa 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e097      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	6a39      	ldr	r1, [r7, #32]
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f964 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d107      	bne.n	8003f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e076      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7c:	893b      	ldrh	r3, [r7, #8]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]
 8003f86:	e021      	b.n	8003fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f88:	893b      	ldrh	r3, [r7, #8]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	6a39      	ldr	r1, [r7, #32]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f93e 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d107      	bne.n	8003fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e050      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc2:	893b      	ldrh	r3, [r7, #8]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	6a39      	ldr	r1, [r7, #32]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f923 	bl	800421c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d107      	bne.n	8003ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e035      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2200      	movs	r2, #0
 8004010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f82b 	bl	8004070 <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d103      	bne.n	8004038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e013      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800403c:	897b      	ldrh	r3, [r7, #10]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	6a3a      	ldr	r2, [r7, #32]
 8004050:	4906      	ldr	r1, [pc, #24]	; (800406c <I2C_RequestMemoryRead+0x1cc>)
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f863 	bl	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	00010002 	.word	0x00010002

08004070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004080:	e025      	b.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d021      	beq.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fe f819 	bl	80020c0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d116      	bne.n	80040ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e023      	b.n	8004116 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10d      	bne.n	80040f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	e00c      	b.n	800410e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf0c      	ite	eq
 8004106:	2301      	moveq	r3, #1
 8004108:	2300      	movne	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	429a      	cmp	r2, r3
 8004112:	d0b6      	beq.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412c:	e051      	b.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d123      	bne.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004156:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f043 0204 	orr.w	r2, r3, #4
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e046      	b.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d021      	beq.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418e:	f7fd ff97 	bl	80020c0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	429a      	cmp	r2, r3
 800419c:	d302      	bcc.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e020      	b.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	43da      	mvns	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e00b      	b.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	43da      	mvns	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d18d      	bne.n	800412e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004228:	e02d      	b.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f8ce 	bl	80043cc <I2C_IsAcknowledgeFailed>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e02d      	b.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d021      	beq.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004242:	f7fd ff3d 	bl	80020c0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	429a      	cmp	r2, r3
 8004250:	d302      	bcc.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d116      	bne.n	8004286 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e007      	b.n	8004296 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d1ca      	bne.n	800422a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042aa:	e02d      	b.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f88d 	bl	80043cc <I2C_IsAcknowledgeFailed>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e02d      	b.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c2:	d021      	beq.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fd fefc 	bl	80020c0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e007      	b.n	8004318 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d1ca      	bne.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800432c:	e042      	b.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d119      	bne.n	8004370 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0210 	mvn.w	r2, #16
 8004344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e029      	b.n	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fd fea6 	bl	80020c0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e007      	b.n	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d1b5      	bne.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d11b      	bne.n	800441c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0cc      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d90c      	bls.n	8004468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b65      	ldr	r3, [pc, #404]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004456:	4b63      	ldr	r3, [pc, #396]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d001      	beq.n	8004468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b8      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d020      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004480:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800448a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004498:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044a4:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	494d      	ldr	r1, [pc, #308]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d044      	beq.n	800454c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d119      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e07f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b3f      	ldr	r3, [pc, #252]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e06f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e067      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4934      	ldr	r1, [pc, #208]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800451c:	f7fd fdd0 	bl	80020c0 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fd fdcc 	bl	80020c0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e04f      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b25      	ldr	r3, [pc, #148]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d20c      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d001      	beq.n	8004574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e032      	b.n	80045da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0308 	and.w	r3, r3, #8
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800459e:	4b12      	ldr	r3, [pc, #72]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	490e      	ldr	r1, [pc, #56]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045b2:	f000 f855 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	490a      	ldr	r1, [pc, #40]	; (80045ec <HAL_RCC_ClockConfig+0x1c0>)
 80045c4:	5ccb      	ldrb	r3, [r1, r3]
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ce:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x1c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd fd30 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40023c00 	.word	0x40023c00
 80045e8:	40023800 	.word	0x40023800
 80045ec:	080070e0 	.word	0x080070e0
 80045f0:	20000008 	.word	0x20000008
 80045f4:	2000000c 	.word	0x2000000c

080045f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <HAL_RCC_GetHCLKFreq+0x14>)
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000008 	.word	0x20000008

08004610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004614:	f7ff fff0 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0a9b      	lsrs	r3, r3, #10
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	; (8004634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	080070f0 	.word	0x080070f0

08004638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800463c:	f7ff ffdc 	bl	80045f8 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0b5b      	lsrs	r3, r3, #13
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	080070f0 	.word	0x080070f0

08004660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b0a6      	sub	sp, #152	; 0x98
 8004666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004686:	4bc8      	ldr	r3, [pc, #800]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b0c      	cmp	r3, #12
 8004690:	f200 817e 	bhi.w	8004990 <HAL_RCC_GetSysClockFreq+0x330>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046d1 	.word	0x080046d1
 80046a0:	08004991 	.word	0x08004991
 80046a4:	08004991 	.word	0x08004991
 80046a8:	08004991 	.word	0x08004991
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	08004991 	.word	0x08004991
 80046b4:	08004991 	.word	0x08004991
 80046b8:	08004991 	.word	0x08004991
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	08004991 	.word	0x08004991
 80046c4:	08004991 	.word	0x08004991
 80046c8:	08004991 	.word	0x08004991
 80046cc:	0800484b 	.word	0x0800484b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d0:	4bb6      	ldr	r3, [pc, #728]	; (80049ac <HAL_RCC_GetSysClockFreq+0x34c>)
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80046d6:	e15f      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d8:	4bb5      	ldr	r3, [pc, #724]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x350>)
 80046da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80046de:	e15b      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e0:	4bb1      	ldr	r3, [pc, #708]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ec:	4bae      	ldr	r3, [pc, #696]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d031      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f8:	4bab      	ldr	r3, [pc, #684]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	099b      	lsrs	r3, r3, #6
 80046fe:	2200      	movs	r2, #0
 8004700:	66bb      	str	r3, [r7, #104]	; 0x68
 8004702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	663b      	str	r3, [r7, #96]	; 0x60
 800470c:	2300      	movs	r3, #0
 800470e:	667b      	str	r3, [r7, #100]	; 0x64
 8004710:	4ba7      	ldr	r3, [pc, #668]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004712:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004716:	462a      	mov	r2, r5
 8004718:	fb03 f202 	mul.w	r2, r3, r2
 800471c:	2300      	movs	r3, #0
 800471e:	4621      	mov	r1, r4
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	4aa2      	ldr	r2, [pc, #648]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004728:	4621      	mov	r1, r4
 800472a:	fba1 1202 	umull	r1, r2, r1, r2
 800472e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004730:	460a      	mov	r2, r1
 8004732:	67ba      	str	r2, [r7, #120]	; 0x78
 8004734:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004736:	4413      	add	r3, r2
 8004738:	67fb      	str	r3, [r7, #124]	; 0x7c
 800473a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800473e:	2200      	movs	r2, #0
 8004740:	65bb      	str	r3, [r7, #88]	; 0x58
 8004742:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004748:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800474c:	f7fc fa2e 	bl	8000bac <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800475a:	e064      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475c:	4b92      	ldr	r3, [pc, #584]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	2200      	movs	r2, #0
 8004764:	653b      	str	r3, [r7, #80]	; 0x50
 8004766:	657a      	str	r2, [r7, #84]	; 0x54
 8004768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	2300      	movs	r3, #0
 8004772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004774:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004778:	4622      	mov	r2, r4
 800477a:	462b      	mov	r3, r5
 800477c:	f04f 0000 	mov.w	r0, #0
 8004780:	f04f 0100 	mov.w	r1, #0
 8004784:	0159      	lsls	r1, r3, #5
 8004786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800478a:	0150      	lsls	r0, r2, #5
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4621      	mov	r1, r4
 8004792:	1a51      	subs	r1, r2, r1
 8004794:	6139      	str	r1, [r7, #16]
 8004796:	4629      	mov	r1, r5
 8004798:	eb63 0301 	sbc.w	r3, r3, r1
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047aa:	4659      	mov	r1, fp
 80047ac:	018b      	lsls	r3, r1, #6
 80047ae:	4651      	mov	r1, sl
 80047b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047b4:	4651      	mov	r1, sl
 80047b6:	018a      	lsls	r2, r1, #6
 80047b8:	4651      	mov	r1, sl
 80047ba:	ebb2 0801 	subs.w	r8, r2, r1
 80047be:	4659      	mov	r1, fp
 80047c0:	eb63 0901 	sbc.w	r9, r3, r1
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d8:	4690      	mov	r8, r2
 80047da:	4699      	mov	r9, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	eb18 0303 	adds.w	r3, r8, r3
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb49 0303 	adc.w	r3, r9, r3
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047f8:	4629      	mov	r1, r5
 80047fa:	028b      	lsls	r3, r1, #10
 80047fc:	4621      	mov	r1, r4
 80047fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004802:	4621      	mov	r1, r4
 8004804:	028a      	lsls	r2, r1, #10
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800480e:	2200      	movs	r2, #0
 8004810:	643b      	str	r3, [r7, #64]	; 0x40
 8004812:	647a      	str	r2, [r7, #68]	; 0x44
 8004814:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004818:	f7fc f9c8 	bl	8000bac <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4613      	mov	r3, r2
 8004822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004826:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	0c1b      	lsrs	r3, r3, #16
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	3301      	adds	r3, #1
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004838:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800483c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004848:	e0a6      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800484a:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004856:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02a      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	2200      	movs	r2, #0
 800486a:	63bb      	str	r3, [r7, #56]	; 0x38
 800486c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004874:	2100      	movs	r1, #0
 8004876:	4b4e      	ldr	r3, [pc, #312]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004878:	fb03 f201 	mul.w	r2, r3, r1
 800487c:	2300      	movs	r3, #0
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	4413      	add	r3, r2
 8004884:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8004886:	fba0 1202 	umull	r1, r2, r0, r2
 800488a:	677a      	str	r2, [r7, #116]	; 0x74
 800488c:	460a      	mov	r2, r1
 800488e:	673a      	str	r2, [r7, #112]	; 0x70
 8004890:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004892:	4413      	add	r3, r2
 8004894:	677b      	str	r3, [r7, #116]	; 0x74
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800489a:	2200      	movs	r2, #0
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
 800489e:	637a      	str	r2, [r7, #52]	; 0x34
 80048a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80048a8:	f7fc f980 	bl	8000bac <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048b6:	e05b      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	099b      	lsrs	r3, r3, #6
 80048be:	2200      	movs	r2, #0
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	623b      	str	r3, [r7, #32]
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
 80048d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	f04f 0000 	mov.w	r0, #0
 80048dc:	f04f 0100 	mov.w	r1, #0
 80048e0:	0159      	lsls	r1, r3, #5
 80048e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e6:	0150      	lsls	r0, r2, #5
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4641      	mov	r1, r8
 80048ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800490c:	ebb2 040a 	subs.w	r4, r2, sl
 8004910:	eb63 050b 	sbc.w	r5, r3, fp
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	00eb      	lsls	r3, r5, #3
 800491e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004922:	00e2      	lsls	r2, r4, #3
 8004924:	4614      	mov	r4, r2
 8004926:	461d      	mov	r5, r3
 8004928:	4643      	mov	r3, r8
 800492a:	18e3      	adds	r3, r4, r3
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	464b      	mov	r3, r9
 8004930:	eb45 0303 	adc.w	r3, r5, r3
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004942:	4629      	mov	r1, r5
 8004944:	028b      	lsls	r3, r1, #10
 8004946:	4621      	mov	r1, r4
 8004948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800494c:	4621      	mov	r1, r4
 800494e:	028a      	lsls	r2, r1, #10
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004958:	2200      	movs	r2, #0
 800495a:	61bb      	str	r3, [r7, #24]
 800495c:	61fa      	str	r2, [r7, #28]
 800495e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004962:	f7fc f923 	bl	8000bac <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4613      	mov	r3, r2
 800496c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0f1b      	lsrs	r3, r3, #28
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800497e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800498e:	e003      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8004992:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004996:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800499c:	4618      	mov	r0, r3
 800499e:	3798      	adds	r7, #152	; 0x98
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	017d7840 	.word	0x017d7840

080049b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e28d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8083 	beq.w	8004ada <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049d4:	4b94      	ldr	r3, [pc, #592]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 030c 	and.w	r3, r3, #12
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d019      	beq.n	8004a14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049e0:	4b91      	ldr	r3, [pc, #580]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049ec:	4b8e      	ldr	r3, [pc, #568]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049f8:	d00c      	beq.n	8004a14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fa:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d112      	bne.n	8004a2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a12:	d10b      	bne.n	8004a2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	4b84      	ldr	r3, [pc, #528]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x124>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d157      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e25a      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a34:	d106      	bne.n	8004a44 <HAL_RCC_OscConfig+0x90>
 8004a36:	4b7c      	ldr	r3, [pc, #496]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7b      	ldr	r2, [pc, #492]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e01d      	b.n	8004a80 <HAL_RCC_OscConfig+0xcc>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0xb4>
 8004a4e:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a75      	ldr	r2, [pc, #468]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	4b73      	ldr	r3, [pc, #460]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a72      	ldr	r2, [pc, #456]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0xcc>
 8004a68:	4b6f      	ldr	r3, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a6e      	ldr	r2, [pc, #440]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a6b      	ldr	r2, [pc, #428]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7fd fb1a 	bl	80020c0 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a90:	f7fd fb16 	bl	80020c0 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b64      	cmp	r3, #100	; 0x64
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e21f      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b61      	ldr	r3, [pc, #388]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0xdc>
 8004aae:	e014      	b.n	8004ada <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fb06 	bl	80020c0 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fb02 	bl	80020c0 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e20b      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	4b57      	ldr	r3, [pc, #348]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1f0      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x104>
 8004ad6:	e000      	b.n	8004ada <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d06f      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ae6:	4b50      	ldr	r3, [pc, #320]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d017      	beq.n	8004b22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004af2:	4b4d      	ldr	r3, [pc, #308]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d105      	bne.n	8004b0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b44      	ldr	r3, [pc, #272]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x186>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1d3      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4937      	ldr	r1, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCC_OscConfig+0x278>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd faaf 	bl	80020c0 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fd faab 	bl	80020c0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1b4      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b28      	ldr	r3, [pc, #160]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4925      	ldr	r1, [pc, #148]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_RCC_OscConfig+0x278>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fa8e 	bl	80020c0 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fd fa8a 	bl	80020c0 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e193      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d036      	beq.n	8004c40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fd fa6e 	bl	80020c0 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fd fa6a 	bl	80020c0 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e173      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x234>
 8004c06:	e01b      	b.n	8004c40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fa57 	bl	80020c0 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e00e      	b.n	8004c34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fd fa53 	bl	80020c0 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d907      	bls.n	8004c34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e15c      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470000 	.word	0x42470000
 8004c30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ea      	bne.n	8004c16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8097 	beq.w	8004d7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b83      	ldr	r3, [pc, #524]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	4b7f      	ldr	r3, [pc, #508]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4a7e      	ldr	r2, [pc, #504]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6e:	4b7c      	ldr	r3, [pc, #496]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b79      	ldr	r3, [pc, #484]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7fd fa13 	bl	80020c0 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7fd fa0f 	bl	80020c0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e118      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b6c      	ldr	r3, [pc, #432]	; (8004e64 <HAL_RCC_OscConfig+0x4b0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x31e>
 8004cc4:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCC_OscConfig+0x358>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x340>
 8004cda:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a60      	ldr	r2, [pc, #384]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	4b5e      	ldr	r3, [pc, #376]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a5d      	ldr	r2, [pc, #372]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0x358>
 8004cf4:	4b5a      	ldr	r3, [pc, #360]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	4a59      	ldr	r2, [pc, #356]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004d00:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a56      	ldr	r2, [pc, #344]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fd f9d4 	bl	80020c0 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7fd f9d0 	bl	80020c0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0d7      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b4b      	ldr	r3, [pc, #300]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCC_OscConfig+0x368>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd f9be 	bl	80020c0 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fd f9ba 	bl	80020c0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0c1      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ee      	bne.n	8004d48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	4a3a      	ldr	r2, [pc, #232]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80ad 	beq.w	8004ee0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d060      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d145      	bne.n	8004e26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b33      	ldr	r3, [pc, #204]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd f98e 	bl	80020c0 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fd f98a 	bl	80020c0 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e093      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	491b      	ldr	r1, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df8:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfe:	f7fd f95f 	bl	80020c0 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fd f95b 	bl	80020c0 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e064      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e18:	4b11      	ldr	r3, [pc, #68]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x452>
 8004e24:	e05c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e26:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <HAL_RCC_OscConfig+0x4b4>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd f948 	bl	80020c0 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd f944 	bl	80020c0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e04d      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_OscConfig+0x4ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x480>
 8004e52:	e045      	b.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e040      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
 8004e60:	40023800 	.word	0x40023800
 8004e64:	40007000 	.word	0x40007000
 8004e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e6c:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_RCC_OscConfig+0x538>)
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d030      	beq.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d129      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d122      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d119      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d10f      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800

08004ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e03f      	b.n	8004f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc ffbe 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fd7b 	bl	8005a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b08a      	sub	sp, #40	; 0x28
 8004f8e:	af02      	add	r7, sp, #8
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d17c      	bne.n	80050a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_Transmit+0x2c>
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e075      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Transmit+0x3e>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e06e      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2221      	movs	r2, #33	; 0x21
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fde:	f7fd f86f 	bl	80020c0 <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d108      	bne.n	800500c <HAL_UART_Transmit+0x82>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e003      	b.n	8005014 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800501c:	e02a      	b.n	8005074 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 faf9 	bl	8005620 <UART_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800504c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3302      	adds	r3, #2
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e007      	b.n	8005066 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1cf      	bne.n	800501e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2140      	movs	r1, #64	; 0x40
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fac9 	bl	8005620 <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e006      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b0ba      	sub	sp, #232	; 0xe8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80050ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_UART_IRQHandler+0x66>
 8005102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fbd3 	bl	80058ba <UART_Receive_IT>
      return;
 8005114:	e256      	b.n	80055c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80de 	beq.w	80052dc <HAL_UART_IRQHandler+0x22c>
 8005120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d106      	bne.n	800513a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800512c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005130:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 80d1 	beq.w	80052dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800513a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <HAL_UART_IRQHandler+0xae>
 8005146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_UART_IRQHandler+0xd2>
 800516a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f043 0202 	orr.w	r2, r3, #2
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_UART_IRQHandler+0xf6>
 800518e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f043 0204 	orr.w	r2, r3, #4
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d011      	beq.n	80051d6 <HAL_UART_IRQHandler+0x126>
 80051b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d105      	bne.n	80051ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0208 	orr.w	r2, r3, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 81ed 	beq.w	80055ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_UART_IRQHandler+0x14e>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fb5e 	bl	80058ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_UART_IRQHandler+0x17a>
 8005222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005226:	2b00      	cmp	r3, #0
 8005228:	d04f      	beq.n	80052ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa66 	bl	80056fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d141      	bne.n	80052c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800526a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800526e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1d9      	bne.n	800523e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	2b00      	cmp	r3, #0
 8005290:	d013      	beq.n	80052ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	4a7d      	ldr	r2, [pc, #500]	; (800548c <HAL_UART_IRQHandler+0x3dc>)
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fad9 	bl	8002856 <HAL_DMA_Abort_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b4:	4610      	mov	r0, r2
 80052b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	e00e      	b.n	80052d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f99a 	bl	80055f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	e00a      	b.n	80052d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f996 	bl	80055f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c8:	e006      	b.n	80052d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f992 	bl	80055f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052d6:	e170      	b.n	80055ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d8:	bf00      	nop
    return;
 80052da:	e16e      	b.n	80055ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	f040 814a 	bne.w	800557a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 8143 	beq.w	800557a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 813c 	beq.w	800557a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	f040 80b4 	bne.w	8005490 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8140 	beq.w	80055be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005346:	429a      	cmp	r2, r3
 8005348:	f080 8139 	bcs.w	80055be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005352:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800535e:	f000 8088 	beq.w	8005472 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800537c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800538e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800539a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d9      	bne.n	8005362 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80053be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80053d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80053d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80053da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80053e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e1      	bne.n	80053ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80053fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800540e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005416:	e841 2300 	strex	r3, r2, [r1]
 800541a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800541c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e3      	bne.n	80053ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	330c      	adds	r3, #12
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543a:	e853 3f00 	ldrex	r3, [r3]
 800543e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005442:	f023 0310 	bic.w	r3, r3, #16
 8005446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005454:	65ba      	str	r2, [r7, #88]	; 0x58
 8005456:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800545a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e3      	bne.n	8005430 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	4618      	mov	r0, r3
 800546e:	f7fd f982 	bl	8002776 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800547a:	b29b      	uxth	r3, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8c0 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005488:	e099      	b.n	80055be <HAL_UART_IRQHandler+0x50e>
 800548a:	bf00      	nop
 800548c:	080057c3 	.word	0x080057c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005498:	b29b      	uxth	r3, r3
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 808b 	beq.w	80055c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80054ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8086 	beq.w	80055c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80054c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80054da:	647a      	str	r2, [r7, #68]	; 0x44
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80054e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e3      	bne.n	80054b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3314      	adds	r3, #20
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	623b      	str	r3, [r7, #32]
   return(result);
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3314      	adds	r3, #20
 800550e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005512:	633a      	str	r2, [r7, #48]	; 0x30
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e3      	bne.n	80054ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	60fb      	str	r3, [r7, #12]
   return(result);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0310 	bic.w	r3, r3, #16
 800554a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	330c      	adds	r3, #12
 8005554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005558:	61fa      	str	r2, [r7, #28]
 800555a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555c:	69b9      	ldr	r1, [r7, #24]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	e841 2300 	strex	r3, r2, [r1]
 8005564:	617b      	str	r3, [r7, #20]
   return(result);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1e3      	bne.n	8005534 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800556c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f848 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005578:	e023      	b.n	80055c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_UART_IRQHandler+0x4ea>
 8005586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f929 	bl	80057ea <UART_Transmit_IT>
    return;
 8005598:	e014      	b.n	80055c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800559a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00e      	beq.n	80055c4 <HAL_UART_IRQHandler+0x514>
 80055a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d008      	beq.n	80055c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f969 	bl	800588a <UART_EndTransmit_IT>
    return;
 80055b8:	e004      	b.n	80055c4 <HAL_UART_IRQHandler+0x514>
    return;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <HAL_UART_IRQHandler+0x514>
      return;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_UART_IRQHandler+0x514>
      return;
 80055c2:	bf00      	nop
  }
}
 80055c4:	37e8      	adds	r7, #232	; 0xe8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop

080055cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b090      	sub	sp, #64	; 0x40
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005630:	e050      	b.n	80056d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d04c      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800563a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x30>
 8005640:	f7fc fd3e 	bl	80020c0 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564c:	429a      	cmp	r2, r3
 800564e:	d241      	bcs.n	80056d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005670:	637a      	str	r2, [r7, #52]	; 0x34
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	613b      	str	r3, [r7, #16]
   return(result);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a4:	623a      	str	r2, [r7, #32]
 80056a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e00f      	b.n	80056f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d09f      	beq.n	8005632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3740      	adds	r7, #64	; 0x40
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b095      	sub	sp, #84	; 0x54
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800571a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005724:	643a      	str	r2, [r7, #64]	; 0x40
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800572a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e5      	bne.n	8005704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3314      	adds	r3, #20
 800573e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	61fb      	str	r3, [r7, #28]
   return(result);
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3314      	adds	r3, #20
 8005756:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800575a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800575e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	2b01      	cmp	r3, #1
 8005772:	d119      	bne.n	80057a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	330c      	adds	r3, #12
 800577a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	60bb      	str	r3, [r7, #8]
   return(result);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f023 0310 	bic.w	r3, r3, #16
 800578a:	647b      	str	r3, [r7, #68]	; 0x44
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	330c      	adds	r3, #12
 8005792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005794:	61ba      	str	r2, [r7, #24]
 8005796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6979      	ldr	r1, [r7, #20]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	613b      	str	r3, [r7, #16]
   return(result);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80057b6:	bf00      	nop
 80057b8:	3754      	adds	r7, #84	; 0x54
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff09 	bl	80055f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b21      	cmp	r3, #33	; 0x21
 80057fc:	d13e      	bne.n	800587c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d114      	bne.n	8005832 <UART_Transmit_IT+0x48>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d110      	bne.n	8005832 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005824:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	621a      	str	r2, [r3, #32]
 8005830:	e008      	b.n	8005844 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	1c59      	adds	r1, r3, #1
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6211      	str	r1, [r2, #32]
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29b      	uxth	r3, r3
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4619      	mov	r1, r3
 8005852:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10f      	bne.n	8005878 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005866:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005876:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	e000      	b.n	800587e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800587c:	2302      	movs	r3, #2
  }
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fe8e 	bl	80055cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b08c      	sub	sp, #48	; 0x30
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b22      	cmp	r3, #34	; 0x22
 80058cc:	f040 80ab 	bne.w	8005a26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d8:	d117      	bne.n	800590a <UART_Receive_IT+0x50>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d113      	bne.n	800590a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
 8005908:	e026      	b.n	8005958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800591c:	d007      	beq.n	800592e <UART_Receive_IT+0x74>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <UART_Receive_IT+0x82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	b2da      	uxtb	r2, r3
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	701a      	strb	r2, [r3, #0]
 800593a:	e008      	b.n	800594e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005948:	b2da      	uxtb	r2, r3
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595c:	b29b      	uxth	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	b29b      	uxth	r3, r3
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4619      	mov	r1, r3
 8005966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005968:	2b00      	cmp	r3, #0
 800596a:	d15a      	bne.n	8005a22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0220 	bic.w	r2, r2, #32
 800597a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800598a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695a      	ldr	r2, [r3, #20]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d135      	bne.n	8005a18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	330c      	adds	r3, #12
 80059b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	613b      	str	r3, [r7, #16]
   return(result);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f023 0310 	bic.w	r3, r3, #16
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d2:	623a      	str	r2, [r7, #32]
 80059d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	69f9      	ldr	r1, [r7, #28]
 80059d8:	6a3a      	ldr	r2, [r7, #32]
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	61bb      	str	r3, [r7, #24]
   return(result);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d10a      	bne.n	8005a0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff fdf9 	bl	8005608 <HAL_UARTEx_RxEventCallback>
 8005a16:	e002      	b.n	8005a1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fde1 	bl	80055e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e002      	b.n	8005a28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a34:	b0c0      	sub	sp, #256	; 0x100
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4c:	68d9      	ldr	r1, [r3, #12]
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	ea40 0301 	orr.w	r3, r0, r1
 8005a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5e:	689a      	ldr	r2, [r3, #8]
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a88:	f021 010c 	bic.w	r1, r1, #12
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a96:	430b      	orrs	r3, r1
 8005a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aaa:	6999      	ldr	r1, [r3, #24]
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	ea40 0301 	orr.w	r3, r0, r1
 8005ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b8f      	ldr	r3, [pc, #572]	; (8005cfc <UART_SetConfig+0x2cc>)
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d005      	beq.n	8005ad0 <UART_SetConfig+0xa0>
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b8d      	ldr	r3, [pc, #564]	; (8005d00 <UART_SetConfig+0x2d0>)
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d104      	bne.n	8005ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fe fdb2 	bl	8004638 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ad8:	e003      	b.n	8005ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ada:	f7fe fd99 	bl	8004610 <HAL_RCC_GetPCLK1Freq>
 8005ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aec:	f040 810c 	bne.w	8005d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b02:	4622      	mov	r2, r4
 8005b04:	462b      	mov	r3, r5
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b12:	4621      	mov	r1, r4
 8005b14:	eb12 0801 	adds.w	r8, r2, r1
 8005b18:	4629      	mov	r1, r5
 8005b1a:	eb43 0901 	adc.w	r9, r3, r1
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	eb18 0303 	adds.w	r3, r8, r3
 8005b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b40:	462b      	mov	r3, r5
 8005b42:	eb49 0303 	adc.w	r3, r9, r3
 8005b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b5e:	460b      	mov	r3, r1
 8005b60:	18db      	adds	r3, r3, r3
 8005b62:	653b      	str	r3, [r7, #80]	; 0x50
 8005b64:	4613      	mov	r3, r2
 8005b66:	eb42 0303 	adc.w	r3, r2, r3
 8005b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8005b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b74:	f7fb f81a 	bl	8000bac <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4b61      	ldr	r3, [pc, #388]	; (8005d04 <UART_SetConfig+0x2d4>)
 8005b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b82:	095b      	lsrs	r3, r3, #5
 8005b84:	011c      	lsls	r4, r3, #4
 8005b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	1891      	adds	r1, r2, r2
 8005b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ba0:	415b      	adcs	r3, r3
 8005ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ba8:	4641      	mov	r1, r8
 8005baa:	eb12 0a01 	adds.w	sl, r2, r1
 8005bae:	4649      	mov	r1, r9
 8005bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bc8:	4692      	mov	sl, r2
 8005bca:	469b      	mov	fp, r3
 8005bcc:	4643      	mov	r3, r8
 8005bce:	eb1a 0303 	adds.w	r3, sl, r3
 8005bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	18db      	adds	r3, r3, r3
 8005bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	eb42 0303 	adc.w	r3, r2, r3
 8005c00:	647b      	str	r3, [r7, #68]	; 0x44
 8005c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c0a:	f7fa ffcf 	bl	8000bac <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <UART_SetConfig+0x2d4>)
 8005c16:	fba3 2301 	umull	r2, r3, r3, r1
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2264      	movs	r2, #100	; 0x64
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	1acb      	subs	r3, r1, r3
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c2a:	4b36      	ldr	r3, [pc, #216]	; (8005d04 <UART_SetConfig+0x2d4>)
 8005c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c38:	441c      	add	r4, r3
 8005c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	1891      	adds	r1, r2, r2
 8005c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c54:	415b      	adcs	r3, r3
 8005c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	1851      	adds	r1, r2, r1
 8005c60:	6339      	str	r1, [r7, #48]	; 0x30
 8005c62:	4649      	mov	r1, r9
 8005c64:	414b      	adcs	r3, r1
 8005c66:	637b      	str	r3, [r7, #52]	; 0x34
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	f04f 0300 	mov.w	r3, #0
 8005c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c74:	4659      	mov	r1, fp
 8005c76:	00cb      	lsls	r3, r1, #3
 8005c78:	4651      	mov	r1, sl
 8005c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7e:	4651      	mov	r1, sl
 8005c80:	00ca      	lsls	r2, r1, #3
 8005c82:	4610      	mov	r0, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	4603      	mov	r3, r0
 8005c88:	4642      	mov	r2, r8
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c90:	464b      	mov	r3, r9
 8005c92:	460a      	mov	r2, r1
 8005c94:	eb42 0303 	adc.w	r3, r2, r3
 8005c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	18db      	adds	r3, r3, r3
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	eb42 0303 	adc.w	r3, r2, r3
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cc6:	f7fa ff71 	bl	8000bac <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <UART_SetConfig+0x2d4>)
 8005cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	2164      	movs	r1, #100	; 0x64
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	3332      	adds	r3, #50	; 0x32
 8005ce2:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <UART_SetConfig+0x2d4>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	095b      	lsrs	r3, r3, #5
 8005cea:	f003 0207 	and.w	r2, r3, #7
 8005cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4422      	add	r2, r4
 8005cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cf8:	e105      	b.n	8005f06 <UART_SetConfig+0x4d6>
 8005cfa:	bf00      	nop
 8005cfc:	40011000 	.word	0x40011000
 8005d00:	40011400 	.word	0x40011400
 8005d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d1a:	4642      	mov	r2, r8
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	1891      	adds	r1, r2, r2
 8005d20:	6239      	str	r1, [r7, #32]
 8005d22:	415b      	adcs	r3, r3
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
 8005d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d2a:	4641      	mov	r1, r8
 8005d2c:	1854      	adds	r4, r2, r1
 8005d2e:	4649      	mov	r1, r9
 8005d30:	eb43 0501 	adc.w	r5, r3, r1
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	00eb      	lsls	r3, r5, #3
 8005d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d42:	00e2      	lsls	r2, r4, #3
 8005d44:	4614      	mov	r4, r2
 8005d46:	461d      	mov	r5, r3
 8005d48:	4643      	mov	r3, r8
 8005d4a:	18e3      	adds	r3, r4, r3
 8005d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d50:	464b      	mov	r3, r9
 8005d52:	eb45 0303 	adc.w	r3, r5, r3
 8005d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d76:	4629      	mov	r1, r5
 8005d78:	008b      	lsls	r3, r1, #2
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d80:	4621      	mov	r1, r4
 8005d82:	008a      	lsls	r2, r1, #2
 8005d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d88:	f7fa ff10 	bl	8000bac <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4b60      	ldr	r3, [pc, #384]	; (8005f14 <UART_SetConfig+0x4e4>)
 8005d92:	fba3 2302 	umull	r2, r3, r3, r2
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	011c      	lsls	r4, r3, #4
 8005d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dac:	4642      	mov	r2, r8
 8005dae:	464b      	mov	r3, r9
 8005db0:	1891      	adds	r1, r2, r2
 8005db2:	61b9      	str	r1, [r7, #24]
 8005db4:	415b      	adcs	r3, r3
 8005db6:	61fb      	str	r3, [r7, #28]
 8005db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dbc:	4641      	mov	r1, r8
 8005dbe:	1851      	adds	r1, r2, r1
 8005dc0:	6139      	str	r1, [r7, #16]
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	414b      	adcs	r3, r1
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	00cb      	lsls	r3, r1, #3
 8005dd8:	4651      	mov	r1, sl
 8005dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dde:	4651      	mov	r1, sl
 8005de0:	00ca      	lsls	r2, r1, #3
 8005de2:	4610      	mov	r0, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	4603      	mov	r3, r0
 8005de8:	4642      	mov	r2, r8
 8005dea:	189b      	adds	r3, r3, r2
 8005dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005df0:	464b      	mov	r3, r9
 8005df2:	460a      	mov	r2, r1
 8005df4:	eb42 0303 	adc.w	r3, r2, r3
 8005df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e14:	4649      	mov	r1, r9
 8005e16:	008b      	lsls	r3, r1, #2
 8005e18:	4641      	mov	r1, r8
 8005e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e1e:	4641      	mov	r1, r8
 8005e20:	008a      	lsls	r2, r1, #2
 8005e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e26:	f7fa fec1 	bl	8000bac <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <UART_SetConfig+0x4e4>)
 8005e30:	fba3 1302 	umull	r1, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2164      	movs	r1, #100	; 0x64
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	3332      	adds	r3, #50	; 0x32
 8005e42:	4a34      	ldr	r2, [pc, #208]	; (8005f14 <UART_SetConfig+0x4e4>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e4e:	441c      	add	r4, r3
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	673b      	str	r3, [r7, #112]	; 0x70
 8005e58:	677a      	str	r2, [r7, #116]	; 0x74
 8005e5a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e5e:	4642      	mov	r2, r8
 8005e60:	464b      	mov	r3, r9
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	415b      	adcs	r3, r3
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e6e:	4641      	mov	r1, r8
 8005e70:	1851      	adds	r1, r2, r1
 8005e72:	6039      	str	r1, [r7, #0]
 8005e74:	4649      	mov	r1, r9
 8005e76:	414b      	adcs	r3, r1
 8005e78:	607b      	str	r3, [r7, #4]
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e86:	4659      	mov	r1, fp
 8005e88:	00cb      	lsls	r3, r1, #3
 8005e8a:	4651      	mov	r1, sl
 8005e8c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e90:	4651      	mov	r1, sl
 8005e92:	00ca      	lsls	r2, r1, #3
 8005e94:	4610      	mov	r0, r2
 8005e96:	4619      	mov	r1, r3
 8005e98:	4603      	mov	r3, r0
 8005e9a:	4642      	mov	r2, r8
 8005e9c:	189b      	adds	r3, r3, r2
 8005e9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8005eb4:	667a      	str	r2, [r7, #100]	; 0x64
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	008b      	lsls	r3, r1, #2
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ecc:	4641      	mov	r1, r8
 8005ece:	008a      	lsls	r2, r1, #2
 8005ed0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ed4:	f7fa fe6a 	bl	8000bac <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <UART_SetConfig+0x4e4>)
 8005ede:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	2164      	movs	r1, #100	; 0x64
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	3332      	adds	r3, #50	; 0x32
 8005ef0:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <UART_SetConfig+0x4e4>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4422      	add	r2, r4
 8005f04:	609a      	str	r2, [r3, #8]
}
 8005f06:	bf00      	nop
 8005f08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	51eb851f 	.word	0x51eb851f

08005f18 <__errno>:
 8005f18:	4b01      	ldr	r3, [pc, #4]	; (8005f20 <__errno+0x8>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000014 	.word	0x20000014

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4d0d      	ldr	r5, [pc, #52]	; (8005f5c <__libc_init_array+0x38>)
 8005f28:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	2600      	movs	r6, #0
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	4d0b      	ldr	r5, [pc, #44]	; (8005f64 <__libc_init_array+0x40>)
 8005f36:	4c0c      	ldr	r4, [pc, #48]	; (8005f68 <__libc_init_array+0x44>)
 8005f38:	f001 f834 	bl	8006fa4 <_init>
 8005f3c:	1b64      	subs	r4, r4, r5
 8005f3e:	10a4      	asrs	r4, r4, #2
 8005f40:	2600      	movs	r6, #0
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08007198 	.word	0x08007198
 8005f60:	08007198 	.word	0x08007198
 8005f64:	08007198 	.word	0x08007198
 8005f68:	0800719c 	.word	0x0800719c

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	; (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 b87f 	b.w	8006074 <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	20000014 	.word	0x20000014

08005f7c <free>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	; (8005f88 <free+0xc>)
 8005f7e:	4601      	mov	r1, r0
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	f000 b80b 	b.w	8005f9c <_free_r>
 8005f86:	bf00      	nop
 8005f88:	20000014 	.word	0x20000014

08005f8c <memset>:
 8005f8c:	4402      	add	r2, r0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d100      	bne.n	8005f96 <memset+0xa>
 8005f94:	4770      	bx	lr
 8005f96:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9a:	e7f9      	b.n	8005f90 <memset+0x4>

08005f9c <_free_r>:
 8005f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d044      	beq.n	800602c <_free_r+0x90>
 8005fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f1a1 0404 	sub.w	r4, r1, #4
 8005fae:	bfb8      	it	lt
 8005fb0:	18e4      	addlt	r4, r4, r3
 8005fb2:	f000 fc51 	bl	8006858 <__malloc_lock>
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <_free_r+0x94>)
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	b933      	cbnz	r3, 8005fcc <_free_r+0x30>
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	b003      	add	sp, #12
 8005fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fc8:	f000 bc4c 	b.w	8006864 <__malloc_unlock>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d908      	bls.n	8005fe2 <_free_r+0x46>
 8005fd0:	6825      	ldr	r5, [r4, #0]
 8005fd2:	1961      	adds	r1, r4, r5
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf01      	itttt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	1949      	addeq	r1, r1, r5
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	e7ed      	b.n	8005fbe <_free_r+0x22>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b10b      	cbz	r3, 8005fec <_free_r+0x50>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x46>
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	1855      	adds	r5, r2, r1
 8005ff0:	42a5      	cmp	r5, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x70>
 8005ff4:	6824      	ldr	r4, [r4, #0]
 8005ff6:	4421      	add	r1, r4
 8005ff8:	1854      	adds	r4, r2, r1
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	d1e0      	bne.n	8005fc2 <_free_r+0x26>
 8006000:	681c      	ldr	r4, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	4421      	add	r1, r4
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	e7da      	b.n	8005fc2 <_free_r+0x26>
 800600c:	d902      	bls.n	8006014 <_free_r+0x78>
 800600e:	230c      	movs	r3, #12
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	e7d6      	b.n	8005fc2 <_free_r+0x26>
 8006014:	6825      	ldr	r5, [r4, #0]
 8006016:	1961      	adds	r1, r4, r5
 8006018:	428b      	cmp	r3, r1
 800601a:	bf04      	itt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1949      	addeq	r1, r1, r5
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6054      	str	r4, [r2, #4]
 800602a:	e7ca      	b.n	8005fc2 <_free_r+0x26>
 800602c:	b003      	add	sp, #12
 800602e:	bd30      	pop	{r4, r5, pc}
 8006030:	200001f8 	.word	0x200001f8

08006034 <sbrk_aligned>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4e0e      	ldr	r6, [pc, #56]	; (8006070 <sbrk_aligned+0x3c>)
 8006038:	460c      	mov	r4, r1
 800603a:	6831      	ldr	r1, [r6, #0]
 800603c:	4605      	mov	r5, r0
 800603e:	b911      	cbnz	r1, 8006046 <sbrk_aligned+0x12>
 8006040:	f000 f91a 	bl	8006278 <_sbrk_r>
 8006044:	6030      	str	r0, [r6, #0]
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f915 	bl	8006278 <_sbrk_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d00a      	beq.n	8006068 <sbrk_aligned+0x34>
 8006052:	1cc4      	adds	r4, r0, #3
 8006054:	f024 0403 	bic.w	r4, r4, #3
 8006058:	42a0      	cmp	r0, r4
 800605a:	d007      	beq.n	800606c <sbrk_aligned+0x38>
 800605c:	1a21      	subs	r1, r4, r0
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f90a 	bl	8006278 <_sbrk_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d101      	bne.n	800606c <sbrk_aligned+0x38>
 8006068:	f04f 34ff 	mov.w	r4, #4294967295
 800606c:	4620      	mov	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	200001fc 	.word	0x200001fc

08006074 <_malloc_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4607      	mov	r7, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d905      	bls.n	800609c <_malloc_r+0x28>
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	2600      	movs	r6, #0
 8006096:	4630      	mov	r0, r6
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	4e2e      	ldr	r6, [pc, #184]	; (8006158 <_malloc_r+0xe4>)
 800609e:	f000 fbdb 	bl	8006858 <__malloc_lock>
 80060a2:	6833      	ldr	r3, [r6, #0]
 80060a4:	461c      	mov	r4, r3
 80060a6:	bb34      	cbnz	r4, 80060f6 <_malloc_r+0x82>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4638      	mov	r0, r7
 80060ac:	f7ff ffc2 	bl	8006034 <sbrk_aligned>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	4604      	mov	r4, r0
 80060b4:	d14d      	bne.n	8006152 <_malloc_r+0xde>
 80060b6:	6834      	ldr	r4, [r6, #0]
 80060b8:	4626      	mov	r6, r4
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d140      	bne.n	8006140 <_malloc_r+0xcc>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	4631      	mov	r1, r6
 80060c2:	4638      	mov	r0, r7
 80060c4:	eb04 0803 	add.w	r8, r4, r3
 80060c8:	f000 f8d6 	bl	8006278 <_sbrk_r>
 80060cc:	4580      	cmp	r8, r0
 80060ce:	d13a      	bne.n	8006146 <_malloc_r+0xd2>
 80060d0:	6821      	ldr	r1, [r4, #0]
 80060d2:	3503      	adds	r5, #3
 80060d4:	1a6d      	subs	r5, r5, r1
 80060d6:	f025 0503 	bic.w	r5, r5, #3
 80060da:	3508      	adds	r5, #8
 80060dc:	2d0c      	cmp	r5, #12
 80060de:	bf38      	it	cc
 80060e0:	250c      	movcc	r5, #12
 80060e2:	4629      	mov	r1, r5
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ffa5 	bl	8006034 <sbrk_aligned>
 80060ea:	3001      	adds	r0, #1
 80060ec:	d02b      	beq.n	8006146 <_malloc_r+0xd2>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	442b      	add	r3, r5
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	e00e      	b.n	8006114 <_malloc_r+0xa0>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	1b52      	subs	r2, r2, r5
 80060fa:	d41e      	bmi.n	800613a <_malloc_r+0xc6>
 80060fc:	2a0b      	cmp	r2, #11
 80060fe:	d916      	bls.n	800612e <_malloc_r+0xba>
 8006100:	1961      	adds	r1, r4, r5
 8006102:	42a3      	cmp	r3, r4
 8006104:	6025      	str	r5, [r4, #0]
 8006106:	bf18      	it	ne
 8006108:	6059      	strne	r1, [r3, #4]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	bf08      	it	eq
 800610e:	6031      	streq	r1, [r6, #0]
 8006110:	5162      	str	r2, [r4, r5]
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	4638      	mov	r0, r7
 8006116:	f104 060b 	add.w	r6, r4, #11
 800611a:	f000 fba3 	bl	8006864 <__malloc_unlock>
 800611e:	f026 0607 	bic.w	r6, r6, #7
 8006122:	1d23      	adds	r3, r4, #4
 8006124:	1af2      	subs	r2, r6, r3
 8006126:	d0b6      	beq.n	8006096 <_malloc_r+0x22>
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	50a3      	str	r3, [r4, r2]
 800612c:	e7b3      	b.n	8006096 <_malloc_r+0x22>
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	bf0c      	ite	eq
 8006134:	6032      	streq	r2, [r6, #0]
 8006136:	605a      	strne	r2, [r3, #4]
 8006138:	e7ec      	b.n	8006114 <_malloc_r+0xa0>
 800613a:	4623      	mov	r3, r4
 800613c:	6864      	ldr	r4, [r4, #4]
 800613e:	e7b2      	b.n	80060a6 <_malloc_r+0x32>
 8006140:	4634      	mov	r4, r6
 8006142:	6876      	ldr	r6, [r6, #4]
 8006144:	e7b9      	b.n	80060ba <_malloc_r+0x46>
 8006146:	230c      	movs	r3, #12
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4638      	mov	r0, r7
 800614c:	f000 fb8a 	bl	8006864 <__malloc_unlock>
 8006150:	e7a1      	b.n	8006096 <_malloc_r+0x22>
 8006152:	6025      	str	r5, [r4, #0]
 8006154:	e7de      	b.n	8006114 <_malloc_r+0xa0>
 8006156:	bf00      	nop
 8006158:	200001f8 	.word	0x200001f8

0800615c <iprintf>:
 800615c:	b40f      	push	{r0, r1, r2, r3}
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <iprintf+0x2c>)
 8006160:	b513      	push	{r0, r1, r4, lr}
 8006162:	681c      	ldr	r4, [r3, #0]
 8006164:	b124      	cbz	r4, 8006170 <iprintf+0x14>
 8006166:	69a3      	ldr	r3, [r4, #24]
 8006168:	b913      	cbnz	r3, 8006170 <iprintf+0x14>
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fa6e 	bl	800664c <__sinit>
 8006170:	ab05      	add	r3, sp, #20
 8006172:	9a04      	ldr	r2, [sp, #16]
 8006174:	68a1      	ldr	r1, [r4, #8]
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fba3 	bl	80068c4 <_vfiprintf_r>
 800617e:	b002      	add	sp, #8
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	b004      	add	sp, #16
 8006186:	4770      	bx	lr
 8006188:	20000014 	.word	0x20000014

0800618c <_puts_r>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	460e      	mov	r6, r1
 8006190:	4605      	mov	r5, r0
 8006192:	b118      	cbz	r0, 800619c <_puts_r+0x10>
 8006194:	6983      	ldr	r3, [r0, #24]
 8006196:	b90b      	cbnz	r3, 800619c <_puts_r+0x10>
 8006198:	f000 fa58 	bl	800664c <__sinit>
 800619c:	69ab      	ldr	r3, [r5, #24]
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	b913      	cbnz	r3, 80061a8 <_puts_r+0x1c>
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 fa52 	bl	800664c <__sinit>
 80061a8:	4b2c      	ldr	r3, [pc, #176]	; (800625c <_puts_r+0xd0>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d120      	bne.n	80061f0 <_puts_r+0x64>
 80061ae:	686c      	ldr	r4, [r5, #4]
 80061b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d405      	bmi.n	80061c2 <_puts_r+0x36>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	0598      	lsls	r0, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_puts_r+0x36>
 80061bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061be:	f000 fae3 	bl	8006788 <__retarget_lock_acquire_recursive>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	0719      	lsls	r1, r3, #28
 80061c6:	d51d      	bpl.n	8006204 <_puts_r+0x78>
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	b1db      	cbz	r3, 8006204 <_puts_r+0x78>
 80061cc:	3e01      	subs	r6, #1
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061d4:	3b01      	subs	r3, #1
 80061d6:	60a3      	str	r3, [r4, #8]
 80061d8:	bb39      	cbnz	r1, 800622a <_puts_r+0x9e>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da38      	bge.n	8006250 <_puts_r+0xc4>
 80061de:	4622      	mov	r2, r4
 80061e0:	210a      	movs	r1, #10
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f858 	bl	8006298 <__swbuf_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d011      	beq.n	8006210 <_puts_r+0x84>
 80061ec:	250a      	movs	r5, #10
 80061ee:	e011      	b.n	8006214 <_puts_r+0x88>
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <_puts_r+0xd4>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <_puts_r+0x6e>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7da      	b.n	80061b0 <_puts_r+0x24>
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <_puts_r+0xd8>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7d5      	b.n	80061b0 <_puts_r+0x24>
 8006204:	4621      	mov	r1, r4
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f898 	bl	800633c <__swsetup_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0dd      	beq.n	80061cc <_puts_r+0x40>
 8006210:	f04f 35ff 	mov.w	r5, #4294967295
 8006214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006216:	07da      	lsls	r2, r3, #31
 8006218:	d405      	bmi.n	8006226 <_puts_r+0x9a>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	d402      	bmi.n	8006226 <_puts_r+0x9a>
 8006220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006222:	f000 fab2 	bl	800678a <__retarget_lock_release_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	2b00      	cmp	r3, #0
 800622c:	da04      	bge.n	8006238 <_puts_r+0xac>
 800622e:	69a2      	ldr	r2, [r4, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	dc06      	bgt.n	8006242 <_puts_r+0xb6>
 8006234:	290a      	cmp	r1, #10
 8006236:	d004      	beq.n	8006242 <_puts_r+0xb6>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	e7c5      	b.n	80061ce <_puts_r+0x42>
 8006242:	4622      	mov	r2, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f827 	bl	8006298 <__swbuf_r>
 800624a:	3001      	adds	r0, #1
 800624c:	d1bf      	bne.n	80061ce <_puts_r+0x42>
 800624e:	e7df      	b.n	8006210 <_puts_r+0x84>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	250a      	movs	r5, #10
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	6022      	str	r2, [r4, #0]
 8006258:	701d      	strb	r5, [r3, #0]
 800625a:	e7db      	b.n	8006214 <_puts_r+0x88>
 800625c:	0800711c 	.word	0x0800711c
 8006260:	0800713c 	.word	0x0800713c
 8006264:	080070fc 	.word	0x080070fc

08006268 <puts>:
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <puts+0xc>)
 800626a:	4601      	mov	r1, r0
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	f7ff bf8d 	b.w	800618c <_puts_r>
 8006272:	bf00      	nop
 8006274:	20000014 	.word	0x20000014

08006278 <_sbrk_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	; (8006294 <_sbrk_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fb fd6c 	bl	8001d60 <_sbrk>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_sbrk_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_sbrk_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000204 	.word	0x20000204

08006298 <__swbuf_r>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	460e      	mov	r6, r1
 800629c:	4614      	mov	r4, r2
 800629e:	4605      	mov	r5, r0
 80062a0:	b118      	cbz	r0, 80062aa <__swbuf_r+0x12>
 80062a2:	6983      	ldr	r3, [r0, #24]
 80062a4:	b90b      	cbnz	r3, 80062aa <__swbuf_r+0x12>
 80062a6:	f000 f9d1 	bl	800664c <__sinit>
 80062aa:	4b21      	ldr	r3, [pc, #132]	; (8006330 <__swbuf_r+0x98>)
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d12b      	bne.n	8006308 <__swbuf_r+0x70>
 80062b0:	686c      	ldr	r4, [r5, #4]
 80062b2:	69a3      	ldr	r3, [r4, #24]
 80062b4:	60a3      	str	r3, [r4, #8]
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	071a      	lsls	r2, r3, #28
 80062ba:	d52f      	bpl.n	800631c <__swbuf_r+0x84>
 80062bc:	6923      	ldr	r3, [r4, #16]
 80062be:	b36b      	cbz	r3, 800631c <__swbuf_r+0x84>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	6820      	ldr	r0, [r4, #0]
 80062c4:	1ac0      	subs	r0, r0, r3
 80062c6:	6963      	ldr	r3, [r4, #20]
 80062c8:	b2f6      	uxtb	r6, r6
 80062ca:	4283      	cmp	r3, r0
 80062cc:	4637      	mov	r7, r6
 80062ce:	dc04      	bgt.n	80062da <__swbuf_r+0x42>
 80062d0:	4621      	mov	r1, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 f926 	bl	8006524 <_fflush_r>
 80062d8:	bb30      	cbnz	r0, 8006328 <__swbuf_r+0x90>
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	3b01      	subs	r3, #1
 80062de:	60a3      	str	r3, [r4, #8]
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	1c5a      	adds	r2, r3, #1
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	701e      	strb	r6, [r3, #0]
 80062e8:	6963      	ldr	r3, [r4, #20]
 80062ea:	3001      	adds	r0, #1
 80062ec:	4283      	cmp	r3, r0
 80062ee:	d004      	beq.n	80062fa <__swbuf_r+0x62>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	07db      	lsls	r3, r3, #31
 80062f4:	d506      	bpl.n	8006304 <__swbuf_r+0x6c>
 80062f6:	2e0a      	cmp	r6, #10
 80062f8:	d104      	bne.n	8006304 <__swbuf_r+0x6c>
 80062fa:	4621      	mov	r1, r4
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 f911 	bl	8006524 <_fflush_r>
 8006302:	b988      	cbnz	r0, 8006328 <__swbuf_r+0x90>
 8006304:	4638      	mov	r0, r7
 8006306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <__swbuf_r+0x9c>)
 800630a:	429c      	cmp	r4, r3
 800630c:	d101      	bne.n	8006312 <__swbuf_r+0x7a>
 800630e:	68ac      	ldr	r4, [r5, #8]
 8006310:	e7cf      	b.n	80062b2 <__swbuf_r+0x1a>
 8006312:	4b09      	ldr	r3, [pc, #36]	; (8006338 <__swbuf_r+0xa0>)
 8006314:	429c      	cmp	r4, r3
 8006316:	bf08      	it	eq
 8006318:	68ec      	ldreq	r4, [r5, #12]
 800631a:	e7ca      	b.n	80062b2 <__swbuf_r+0x1a>
 800631c:	4621      	mov	r1, r4
 800631e:	4628      	mov	r0, r5
 8006320:	f000 f80c 	bl	800633c <__swsetup_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	d0cb      	beq.n	80062c0 <__swbuf_r+0x28>
 8006328:	f04f 37ff 	mov.w	r7, #4294967295
 800632c:	e7ea      	b.n	8006304 <__swbuf_r+0x6c>
 800632e:	bf00      	nop
 8006330:	0800711c 	.word	0x0800711c
 8006334:	0800713c 	.word	0x0800713c
 8006338:	080070fc 	.word	0x080070fc

0800633c <__swsetup_r>:
 800633c:	4b32      	ldr	r3, [pc, #200]	; (8006408 <__swsetup_r+0xcc>)
 800633e:	b570      	push	{r4, r5, r6, lr}
 8006340:	681d      	ldr	r5, [r3, #0]
 8006342:	4606      	mov	r6, r0
 8006344:	460c      	mov	r4, r1
 8006346:	b125      	cbz	r5, 8006352 <__swsetup_r+0x16>
 8006348:	69ab      	ldr	r3, [r5, #24]
 800634a:	b913      	cbnz	r3, 8006352 <__swsetup_r+0x16>
 800634c:	4628      	mov	r0, r5
 800634e:	f000 f97d 	bl	800664c <__sinit>
 8006352:	4b2e      	ldr	r3, [pc, #184]	; (800640c <__swsetup_r+0xd0>)
 8006354:	429c      	cmp	r4, r3
 8006356:	d10f      	bne.n	8006378 <__swsetup_r+0x3c>
 8006358:	686c      	ldr	r4, [r5, #4]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006360:	0719      	lsls	r1, r3, #28
 8006362:	d42c      	bmi.n	80063be <__swsetup_r+0x82>
 8006364:	06dd      	lsls	r5, r3, #27
 8006366:	d411      	bmi.n	800638c <__swsetup_r+0x50>
 8006368:	2309      	movs	r3, #9
 800636a:	6033      	str	r3, [r6, #0]
 800636c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	e03e      	b.n	80063f6 <__swsetup_r+0xba>
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <__swsetup_r+0xd4>)
 800637a:	429c      	cmp	r4, r3
 800637c:	d101      	bne.n	8006382 <__swsetup_r+0x46>
 800637e:	68ac      	ldr	r4, [r5, #8]
 8006380:	e7eb      	b.n	800635a <__swsetup_r+0x1e>
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <__swsetup_r+0xd8>)
 8006384:	429c      	cmp	r4, r3
 8006386:	bf08      	it	eq
 8006388:	68ec      	ldreq	r4, [r5, #12]
 800638a:	e7e6      	b.n	800635a <__swsetup_r+0x1e>
 800638c:	0758      	lsls	r0, r3, #29
 800638e:	d512      	bpl.n	80063b6 <__swsetup_r+0x7a>
 8006390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006392:	b141      	cbz	r1, 80063a6 <__swsetup_r+0x6a>
 8006394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006398:	4299      	cmp	r1, r3
 800639a:	d002      	beq.n	80063a2 <__swsetup_r+0x66>
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fdfd 	bl	8005f9c <_free_r>
 80063a2:	2300      	movs	r3, #0
 80063a4:	6363      	str	r3, [r4, #52]	; 0x34
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f043 0308 	orr.w	r3, r3, #8
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	b94b      	cbnz	r3, 80063d6 <__swsetup_r+0x9a>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063cc:	d003      	beq.n	80063d6 <__swsetup_r+0x9a>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4630      	mov	r0, r6
 80063d2:	f000 fa01 	bl	80067d8 <__smakebuf_r>
 80063d6:	89a0      	ldrh	r0, [r4, #12]
 80063d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063dc:	f010 0301 	ands.w	r3, r0, #1
 80063e0:	d00a      	beq.n	80063f8 <__swsetup_r+0xbc>
 80063e2:	2300      	movs	r3, #0
 80063e4:	60a3      	str	r3, [r4, #8]
 80063e6:	6963      	ldr	r3, [r4, #20]
 80063e8:	425b      	negs	r3, r3
 80063ea:	61a3      	str	r3, [r4, #24]
 80063ec:	6923      	ldr	r3, [r4, #16]
 80063ee:	b943      	cbnz	r3, 8006402 <__swsetup_r+0xc6>
 80063f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063f4:	d1ba      	bne.n	800636c <__swsetup_r+0x30>
 80063f6:	bd70      	pop	{r4, r5, r6, pc}
 80063f8:	0781      	lsls	r1, r0, #30
 80063fa:	bf58      	it	pl
 80063fc:	6963      	ldrpl	r3, [r4, #20]
 80063fe:	60a3      	str	r3, [r4, #8]
 8006400:	e7f4      	b.n	80063ec <__swsetup_r+0xb0>
 8006402:	2000      	movs	r0, #0
 8006404:	e7f7      	b.n	80063f6 <__swsetup_r+0xba>
 8006406:	bf00      	nop
 8006408:	20000014 	.word	0x20000014
 800640c:	0800711c 	.word	0x0800711c
 8006410:	0800713c 	.word	0x0800713c
 8006414:	080070fc 	.word	0x080070fc

08006418 <__sflush_r>:
 8006418:	898a      	ldrh	r2, [r1, #12]
 800641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	0710      	lsls	r0, r2, #28
 8006422:	460c      	mov	r4, r1
 8006424:	d458      	bmi.n	80064d8 <__sflush_r+0xc0>
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	dc05      	bgt.n	8006438 <__sflush_r+0x20>
 800642c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	dc02      	bgt.n	8006438 <__sflush_r+0x20>
 8006432:	2000      	movs	r0, #0
 8006434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800643a:	2e00      	cmp	r6, #0
 800643c:	d0f9      	beq.n	8006432 <__sflush_r+0x1a>
 800643e:	2300      	movs	r3, #0
 8006440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006444:	682f      	ldr	r7, [r5, #0]
 8006446:	602b      	str	r3, [r5, #0]
 8006448:	d032      	beq.n	80064b0 <__sflush_r+0x98>
 800644a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	075a      	lsls	r2, r3, #29
 8006450:	d505      	bpl.n	800645e <__sflush_r+0x46>
 8006452:	6863      	ldr	r3, [r4, #4]
 8006454:	1ac0      	subs	r0, r0, r3
 8006456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006458:	b10b      	cbz	r3, 800645e <__sflush_r+0x46>
 800645a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800645c:	1ac0      	subs	r0, r0, r3
 800645e:	2300      	movs	r3, #0
 8006460:	4602      	mov	r2, r0
 8006462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006464:	6a21      	ldr	r1, [r4, #32]
 8006466:	4628      	mov	r0, r5
 8006468:	47b0      	blx	r6
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	d106      	bne.n	800647e <__sflush_r+0x66>
 8006470:	6829      	ldr	r1, [r5, #0]
 8006472:	291d      	cmp	r1, #29
 8006474:	d82c      	bhi.n	80064d0 <__sflush_r+0xb8>
 8006476:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <__sflush_r+0x108>)
 8006478:	40ca      	lsrs	r2, r1
 800647a:	07d6      	lsls	r6, r2, #31
 800647c:	d528      	bpl.n	80064d0 <__sflush_r+0xb8>
 800647e:	2200      	movs	r2, #0
 8006480:	6062      	str	r2, [r4, #4]
 8006482:	04d9      	lsls	r1, r3, #19
 8006484:	6922      	ldr	r2, [r4, #16]
 8006486:	6022      	str	r2, [r4, #0]
 8006488:	d504      	bpl.n	8006494 <__sflush_r+0x7c>
 800648a:	1c42      	adds	r2, r0, #1
 800648c:	d101      	bne.n	8006492 <__sflush_r+0x7a>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b903      	cbnz	r3, 8006494 <__sflush_r+0x7c>
 8006492:	6560      	str	r0, [r4, #84]	; 0x54
 8006494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006496:	602f      	str	r7, [r5, #0]
 8006498:	2900      	cmp	r1, #0
 800649a:	d0ca      	beq.n	8006432 <__sflush_r+0x1a>
 800649c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <__sflush_r+0x92>
 80064a4:	4628      	mov	r0, r5
 80064a6:	f7ff fd79 	bl	8005f9c <_free_r>
 80064aa:	2000      	movs	r0, #0
 80064ac:	6360      	str	r0, [r4, #52]	; 0x34
 80064ae:	e7c1      	b.n	8006434 <__sflush_r+0x1c>
 80064b0:	6a21      	ldr	r1, [r4, #32]
 80064b2:	2301      	movs	r3, #1
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	1c41      	adds	r1, r0, #1
 80064ba:	d1c7      	bne.n	800644c <__sflush_r+0x34>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0c4      	beq.n	800644c <__sflush_r+0x34>
 80064c2:	2b1d      	cmp	r3, #29
 80064c4:	d001      	beq.n	80064ca <__sflush_r+0xb2>
 80064c6:	2b16      	cmp	r3, #22
 80064c8:	d101      	bne.n	80064ce <__sflush_r+0xb6>
 80064ca:	602f      	str	r7, [r5, #0]
 80064cc:	e7b1      	b.n	8006432 <__sflush_r+0x1a>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	e7ad      	b.n	8006434 <__sflush_r+0x1c>
 80064d8:	690f      	ldr	r7, [r1, #16]
 80064da:	2f00      	cmp	r7, #0
 80064dc:	d0a9      	beq.n	8006432 <__sflush_r+0x1a>
 80064de:	0793      	lsls	r3, r2, #30
 80064e0:	680e      	ldr	r6, [r1, #0]
 80064e2:	bf08      	it	eq
 80064e4:	694b      	ldreq	r3, [r1, #20]
 80064e6:	600f      	str	r7, [r1, #0]
 80064e8:	bf18      	it	ne
 80064ea:	2300      	movne	r3, #0
 80064ec:	eba6 0807 	sub.w	r8, r6, r7
 80064f0:	608b      	str	r3, [r1, #8]
 80064f2:	f1b8 0f00 	cmp.w	r8, #0
 80064f6:	dd9c      	ble.n	8006432 <__sflush_r+0x1a>
 80064f8:	6a21      	ldr	r1, [r4, #32]
 80064fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064fc:	4643      	mov	r3, r8
 80064fe:	463a      	mov	r2, r7
 8006500:	4628      	mov	r0, r5
 8006502:	47b0      	blx	r6
 8006504:	2800      	cmp	r0, #0
 8006506:	dc06      	bgt.n	8006516 <__sflush_r+0xfe>
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	f04f 30ff 	mov.w	r0, #4294967295
 8006514:	e78e      	b.n	8006434 <__sflush_r+0x1c>
 8006516:	4407      	add	r7, r0
 8006518:	eba8 0800 	sub.w	r8, r8, r0
 800651c:	e7e9      	b.n	80064f2 <__sflush_r+0xda>
 800651e:	bf00      	nop
 8006520:	20400001 	.word	0x20400001

08006524 <_fflush_r>:
 8006524:	b538      	push	{r3, r4, r5, lr}
 8006526:	690b      	ldr	r3, [r1, #16]
 8006528:	4605      	mov	r5, r0
 800652a:	460c      	mov	r4, r1
 800652c:	b913      	cbnz	r3, 8006534 <_fflush_r+0x10>
 800652e:	2500      	movs	r5, #0
 8006530:	4628      	mov	r0, r5
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	b118      	cbz	r0, 800653e <_fflush_r+0x1a>
 8006536:	6983      	ldr	r3, [r0, #24]
 8006538:	b90b      	cbnz	r3, 800653e <_fflush_r+0x1a>
 800653a:	f000 f887 	bl	800664c <__sinit>
 800653e:	4b14      	ldr	r3, [pc, #80]	; (8006590 <_fflush_r+0x6c>)
 8006540:	429c      	cmp	r4, r3
 8006542:	d11b      	bne.n	800657c <_fflush_r+0x58>
 8006544:	686c      	ldr	r4, [r5, #4]
 8006546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0ef      	beq.n	800652e <_fflush_r+0xa>
 800654e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006550:	07d0      	lsls	r0, r2, #31
 8006552:	d404      	bmi.n	800655e <_fflush_r+0x3a>
 8006554:	0599      	lsls	r1, r3, #22
 8006556:	d402      	bmi.n	800655e <_fflush_r+0x3a>
 8006558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800655a:	f000 f915 	bl	8006788 <__retarget_lock_acquire_recursive>
 800655e:	4628      	mov	r0, r5
 8006560:	4621      	mov	r1, r4
 8006562:	f7ff ff59 	bl	8006418 <__sflush_r>
 8006566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006568:	07da      	lsls	r2, r3, #31
 800656a:	4605      	mov	r5, r0
 800656c:	d4e0      	bmi.n	8006530 <_fflush_r+0xc>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	059b      	lsls	r3, r3, #22
 8006572:	d4dd      	bmi.n	8006530 <_fflush_r+0xc>
 8006574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006576:	f000 f908 	bl	800678a <__retarget_lock_release_recursive>
 800657a:	e7d9      	b.n	8006530 <_fflush_r+0xc>
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <_fflush_r+0x70>)
 800657e:	429c      	cmp	r4, r3
 8006580:	d101      	bne.n	8006586 <_fflush_r+0x62>
 8006582:	68ac      	ldr	r4, [r5, #8]
 8006584:	e7df      	b.n	8006546 <_fflush_r+0x22>
 8006586:	4b04      	ldr	r3, [pc, #16]	; (8006598 <_fflush_r+0x74>)
 8006588:	429c      	cmp	r4, r3
 800658a:	bf08      	it	eq
 800658c:	68ec      	ldreq	r4, [r5, #12]
 800658e:	e7da      	b.n	8006546 <_fflush_r+0x22>
 8006590:	0800711c 	.word	0x0800711c
 8006594:	0800713c 	.word	0x0800713c
 8006598:	080070fc 	.word	0x080070fc

0800659c <std>:
 800659c:	2300      	movs	r3, #0
 800659e:	b510      	push	{r4, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	e9c0 3300 	strd	r3, r3, [r0]
 80065a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065aa:	6083      	str	r3, [r0, #8]
 80065ac:	8181      	strh	r1, [r0, #12]
 80065ae:	6643      	str	r3, [r0, #100]	; 0x64
 80065b0:	81c2      	strh	r2, [r0, #14]
 80065b2:	6183      	str	r3, [r0, #24]
 80065b4:	4619      	mov	r1, r3
 80065b6:	2208      	movs	r2, #8
 80065b8:	305c      	adds	r0, #92	; 0x5c
 80065ba:	f7ff fce7 	bl	8005f8c <memset>
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <std+0x38>)
 80065c0:	6263      	str	r3, [r4, #36]	; 0x24
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <std+0x3c>)
 80065c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <std+0x40>)
 80065c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <std+0x44>)
 80065cc:	6224      	str	r4, [r4, #32]
 80065ce:	6323      	str	r3, [r4, #48]	; 0x30
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	bf00      	nop
 80065d4:	08006e4d 	.word	0x08006e4d
 80065d8:	08006e6f 	.word	0x08006e6f
 80065dc:	08006ea7 	.word	0x08006ea7
 80065e0:	08006ecb 	.word	0x08006ecb

080065e4 <_cleanup_r>:
 80065e4:	4901      	ldr	r1, [pc, #4]	; (80065ec <_cleanup_r+0x8>)
 80065e6:	f000 b8af 	b.w	8006748 <_fwalk_reent>
 80065ea:	bf00      	nop
 80065ec:	08006525 	.word	0x08006525

080065f0 <__sfmoreglue>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	2268      	movs	r2, #104	; 0x68
 80065f4:	1e4d      	subs	r5, r1, #1
 80065f6:	4355      	muls	r5, r2
 80065f8:	460e      	mov	r6, r1
 80065fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065fe:	f7ff fd39 	bl	8006074 <_malloc_r>
 8006602:	4604      	mov	r4, r0
 8006604:	b140      	cbz	r0, 8006618 <__sfmoreglue+0x28>
 8006606:	2100      	movs	r1, #0
 8006608:	e9c0 1600 	strd	r1, r6, [r0]
 800660c:	300c      	adds	r0, #12
 800660e:	60a0      	str	r0, [r4, #8]
 8006610:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006614:	f7ff fcba 	bl	8005f8c <memset>
 8006618:	4620      	mov	r0, r4
 800661a:	bd70      	pop	{r4, r5, r6, pc}

0800661c <__sfp_lock_acquire>:
 800661c:	4801      	ldr	r0, [pc, #4]	; (8006624 <__sfp_lock_acquire+0x8>)
 800661e:	f000 b8b3 	b.w	8006788 <__retarget_lock_acquire_recursive>
 8006622:	bf00      	nop
 8006624:	20000201 	.word	0x20000201

08006628 <__sfp_lock_release>:
 8006628:	4801      	ldr	r0, [pc, #4]	; (8006630 <__sfp_lock_release+0x8>)
 800662a:	f000 b8ae 	b.w	800678a <__retarget_lock_release_recursive>
 800662e:	bf00      	nop
 8006630:	20000201 	.word	0x20000201

08006634 <__sinit_lock_acquire>:
 8006634:	4801      	ldr	r0, [pc, #4]	; (800663c <__sinit_lock_acquire+0x8>)
 8006636:	f000 b8a7 	b.w	8006788 <__retarget_lock_acquire_recursive>
 800663a:	bf00      	nop
 800663c:	20000202 	.word	0x20000202

08006640 <__sinit_lock_release>:
 8006640:	4801      	ldr	r0, [pc, #4]	; (8006648 <__sinit_lock_release+0x8>)
 8006642:	f000 b8a2 	b.w	800678a <__retarget_lock_release_recursive>
 8006646:	bf00      	nop
 8006648:	20000202 	.word	0x20000202

0800664c <__sinit>:
 800664c:	b510      	push	{r4, lr}
 800664e:	4604      	mov	r4, r0
 8006650:	f7ff fff0 	bl	8006634 <__sinit_lock_acquire>
 8006654:	69a3      	ldr	r3, [r4, #24]
 8006656:	b11b      	cbz	r3, 8006660 <__sinit+0x14>
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f7ff bff0 	b.w	8006640 <__sinit_lock_release>
 8006660:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006664:	6523      	str	r3, [r4, #80]	; 0x50
 8006666:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <__sinit+0x68>)
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <__sinit+0x6c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	62a2      	str	r2, [r4, #40]	; 0x28
 800666e:	42a3      	cmp	r3, r4
 8006670:	bf04      	itt	eq
 8006672:	2301      	moveq	r3, #1
 8006674:	61a3      	streq	r3, [r4, #24]
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f820 	bl	80066bc <__sfp>
 800667c:	6060      	str	r0, [r4, #4]
 800667e:	4620      	mov	r0, r4
 8006680:	f000 f81c 	bl	80066bc <__sfp>
 8006684:	60a0      	str	r0, [r4, #8]
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f818 	bl	80066bc <__sfp>
 800668c:	2200      	movs	r2, #0
 800668e:	60e0      	str	r0, [r4, #12]
 8006690:	2104      	movs	r1, #4
 8006692:	6860      	ldr	r0, [r4, #4]
 8006694:	f7ff ff82 	bl	800659c <std>
 8006698:	68a0      	ldr	r0, [r4, #8]
 800669a:	2201      	movs	r2, #1
 800669c:	2109      	movs	r1, #9
 800669e:	f7ff ff7d 	bl	800659c <std>
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	2202      	movs	r2, #2
 80066a6:	2112      	movs	r1, #18
 80066a8:	f7ff ff78 	bl	800659c <std>
 80066ac:	2301      	movs	r3, #1
 80066ae:	61a3      	str	r3, [r4, #24]
 80066b0:	e7d2      	b.n	8006658 <__sinit+0xc>
 80066b2:	bf00      	nop
 80066b4:	080070f8 	.word	0x080070f8
 80066b8:	080065e5 	.word	0x080065e5

080066bc <__sfp>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	4607      	mov	r7, r0
 80066c0:	f7ff ffac 	bl	800661c <__sfp_lock_acquire>
 80066c4:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <__sfp+0x84>)
 80066c6:	681e      	ldr	r6, [r3, #0]
 80066c8:	69b3      	ldr	r3, [r6, #24]
 80066ca:	b913      	cbnz	r3, 80066d2 <__sfp+0x16>
 80066cc:	4630      	mov	r0, r6
 80066ce:	f7ff ffbd 	bl	800664c <__sinit>
 80066d2:	3648      	adds	r6, #72	; 0x48
 80066d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066d8:	3b01      	subs	r3, #1
 80066da:	d503      	bpl.n	80066e4 <__sfp+0x28>
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	b30b      	cbz	r3, 8006724 <__sfp+0x68>
 80066e0:	6836      	ldr	r6, [r6, #0]
 80066e2:	e7f7      	b.n	80066d4 <__sfp+0x18>
 80066e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066e8:	b9d5      	cbnz	r5, 8006720 <__sfp+0x64>
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <__sfp+0x88>)
 80066ec:	60e3      	str	r3, [r4, #12]
 80066ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066f2:	6665      	str	r5, [r4, #100]	; 0x64
 80066f4:	f000 f847 	bl	8006786 <__retarget_lock_init_recursive>
 80066f8:	f7ff ff96 	bl	8006628 <__sfp_lock_release>
 80066fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006700:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006704:	6025      	str	r5, [r4, #0]
 8006706:	61a5      	str	r5, [r4, #24]
 8006708:	2208      	movs	r2, #8
 800670a:	4629      	mov	r1, r5
 800670c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006710:	f7ff fc3c 	bl	8005f8c <memset>
 8006714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800671c:	4620      	mov	r0, r4
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	3468      	adds	r4, #104	; 0x68
 8006722:	e7d9      	b.n	80066d8 <__sfp+0x1c>
 8006724:	2104      	movs	r1, #4
 8006726:	4638      	mov	r0, r7
 8006728:	f7ff ff62 	bl	80065f0 <__sfmoreglue>
 800672c:	4604      	mov	r4, r0
 800672e:	6030      	str	r0, [r6, #0]
 8006730:	2800      	cmp	r0, #0
 8006732:	d1d5      	bne.n	80066e0 <__sfp+0x24>
 8006734:	f7ff ff78 	bl	8006628 <__sfp_lock_release>
 8006738:	230c      	movs	r3, #12
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	e7ee      	b.n	800671c <__sfp+0x60>
 800673e:	bf00      	nop
 8006740:	080070f8 	.word	0x080070f8
 8006744:	ffff0001 	.word	0xffff0001

08006748 <_fwalk_reent>:
 8006748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800674c:	4606      	mov	r6, r0
 800674e:	4688      	mov	r8, r1
 8006750:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006754:	2700      	movs	r7, #0
 8006756:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800675a:	f1b9 0901 	subs.w	r9, r9, #1
 800675e:	d505      	bpl.n	800676c <_fwalk_reent+0x24>
 8006760:	6824      	ldr	r4, [r4, #0]
 8006762:	2c00      	cmp	r4, #0
 8006764:	d1f7      	bne.n	8006756 <_fwalk_reent+0xe>
 8006766:	4638      	mov	r0, r7
 8006768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800676c:	89ab      	ldrh	r3, [r5, #12]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d907      	bls.n	8006782 <_fwalk_reent+0x3a>
 8006772:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006776:	3301      	adds	r3, #1
 8006778:	d003      	beq.n	8006782 <_fwalk_reent+0x3a>
 800677a:	4629      	mov	r1, r5
 800677c:	4630      	mov	r0, r6
 800677e:	47c0      	blx	r8
 8006780:	4307      	orrs	r7, r0
 8006782:	3568      	adds	r5, #104	; 0x68
 8006784:	e7e9      	b.n	800675a <_fwalk_reent+0x12>

08006786 <__retarget_lock_init_recursive>:
 8006786:	4770      	bx	lr

08006788 <__retarget_lock_acquire_recursive>:
 8006788:	4770      	bx	lr

0800678a <__retarget_lock_release_recursive>:
 800678a:	4770      	bx	lr

0800678c <__swhatbuf_r>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	460e      	mov	r6, r1
 8006790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006794:	2900      	cmp	r1, #0
 8006796:	b096      	sub	sp, #88	; 0x58
 8006798:	4614      	mov	r4, r2
 800679a:	461d      	mov	r5, r3
 800679c:	da08      	bge.n	80067b0 <__swhatbuf_r+0x24>
 800679e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	602a      	str	r2, [r5, #0]
 80067a6:	061a      	lsls	r2, r3, #24
 80067a8:	d410      	bmi.n	80067cc <__swhatbuf_r+0x40>
 80067aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ae:	e00e      	b.n	80067ce <__swhatbuf_r+0x42>
 80067b0:	466a      	mov	r2, sp
 80067b2:	f000 fbb1 	bl	8006f18 <_fstat_r>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	dbf1      	blt.n	800679e <__swhatbuf_r+0x12>
 80067ba:	9a01      	ldr	r2, [sp, #4]
 80067bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067c4:	425a      	negs	r2, r3
 80067c6:	415a      	adcs	r2, r3
 80067c8:	602a      	str	r2, [r5, #0]
 80067ca:	e7ee      	b.n	80067aa <__swhatbuf_r+0x1e>
 80067cc:	2340      	movs	r3, #64	; 0x40
 80067ce:	2000      	movs	r0, #0
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	b016      	add	sp, #88	; 0x58
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080067d8 <__smakebuf_r>:
 80067d8:	898b      	ldrh	r3, [r1, #12]
 80067da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067dc:	079d      	lsls	r5, r3, #30
 80067de:	4606      	mov	r6, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	d507      	bpl.n	80067f4 <__smakebuf_r+0x1c>
 80067e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	2301      	movs	r3, #1
 80067ee:	6163      	str	r3, [r4, #20]
 80067f0:	b002      	add	sp, #8
 80067f2:	bd70      	pop	{r4, r5, r6, pc}
 80067f4:	ab01      	add	r3, sp, #4
 80067f6:	466a      	mov	r2, sp
 80067f8:	f7ff ffc8 	bl	800678c <__swhatbuf_r>
 80067fc:	9900      	ldr	r1, [sp, #0]
 80067fe:	4605      	mov	r5, r0
 8006800:	4630      	mov	r0, r6
 8006802:	f7ff fc37 	bl	8006074 <_malloc_r>
 8006806:	b948      	cbnz	r0, 800681c <__smakebuf_r+0x44>
 8006808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800680c:	059a      	lsls	r2, r3, #22
 800680e:	d4ef      	bmi.n	80067f0 <__smakebuf_r+0x18>
 8006810:	f023 0303 	bic.w	r3, r3, #3
 8006814:	f043 0302 	orr.w	r3, r3, #2
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	e7e3      	b.n	80067e4 <__smakebuf_r+0xc>
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <__smakebuf_r+0x7c>)
 800681e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	6020      	str	r0, [r4, #0]
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	9b00      	ldr	r3, [sp, #0]
 800682c:	6163      	str	r3, [r4, #20]
 800682e:	9b01      	ldr	r3, [sp, #4]
 8006830:	6120      	str	r0, [r4, #16]
 8006832:	b15b      	cbz	r3, 800684c <__smakebuf_r+0x74>
 8006834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006838:	4630      	mov	r0, r6
 800683a:	f000 fb7f 	bl	8006f3c <_isatty_r>
 800683e:	b128      	cbz	r0, 800684c <__smakebuf_r+0x74>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	f043 0301 	orr.w	r3, r3, #1
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	89a0      	ldrh	r0, [r4, #12]
 800684e:	4305      	orrs	r5, r0
 8006850:	81a5      	strh	r5, [r4, #12]
 8006852:	e7cd      	b.n	80067f0 <__smakebuf_r+0x18>
 8006854:	080065e5 	.word	0x080065e5

08006858 <__malloc_lock>:
 8006858:	4801      	ldr	r0, [pc, #4]	; (8006860 <__malloc_lock+0x8>)
 800685a:	f7ff bf95 	b.w	8006788 <__retarget_lock_acquire_recursive>
 800685e:	bf00      	nop
 8006860:	20000200 	.word	0x20000200

08006864 <__malloc_unlock>:
 8006864:	4801      	ldr	r0, [pc, #4]	; (800686c <__malloc_unlock+0x8>)
 8006866:	f7ff bf90 	b.w	800678a <__retarget_lock_release_recursive>
 800686a:	bf00      	nop
 800686c:	20000200 	.word	0x20000200

08006870 <__sfputc_r>:
 8006870:	6893      	ldr	r3, [r2, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	b410      	push	{r4}
 8006878:	6093      	str	r3, [r2, #8]
 800687a:	da08      	bge.n	800688e <__sfputc_r+0x1e>
 800687c:	6994      	ldr	r4, [r2, #24]
 800687e:	42a3      	cmp	r3, r4
 8006880:	db01      	blt.n	8006886 <__sfputc_r+0x16>
 8006882:	290a      	cmp	r1, #10
 8006884:	d103      	bne.n	800688e <__sfputc_r+0x1e>
 8006886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800688a:	f7ff bd05 	b.w	8006298 <__swbuf_r>
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	1c58      	adds	r0, r3, #1
 8006892:	6010      	str	r0, [r2, #0]
 8006894:	7019      	strb	r1, [r3, #0]
 8006896:	4608      	mov	r0, r1
 8006898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689c:	4770      	bx	lr

0800689e <__sfputs_r>:
 800689e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a0:	4606      	mov	r6, r0
 80068a2:	460f      	mov	r7, r1
 80068a4:	4614      	mov	r4, r2
 80068a6:	18d5      	adds	r5, r2, r3
 80068a8:	42ac      	cmp	r4, r5
 80068aa:	d101      	bne.n	80068b0 <__sfputs_r+0x12>
 80068ac:	2000      	movs	r0, #0
 80068ae:	e007      	b.n	80068c0 <__sfputs_r+0x22>
 80068b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b4:	463a      	mov	r2, r7
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ffda 	bl	8006870 <__sfputc_r>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d1f3      	bne.n	80068a8 <__sfputs_r+0xa>
 80068c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068c4 <_vfiprintf_r>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	460d      	mov	r5, r1
 80068ca:	b09d      	sub	sp, #116	; 0x74
 80068cc:	4614      	mov	r4, r2
 80068ce:	4698      	mov	r8, r3
 80068d0:	4606      	mov	r6, r0
 80068d2:	b118      	cbz	r0, 80068dc <_vfiprintf_r+0x18>
 80068d4:	6983      	ldr	r3, [r0, #24]
 80068d6:	b90b      	cbnz	r3, 80068dc <_vfiprintf_r+0x18>
 80068d8:	f7ff feb8 	bl	800664c <__sinit>
 80068dc:	4b89      	ldr	r3, [pc, #548]	; (8006b04 <_vfiprintf_r+0x240>)
 80068de:	429d      	cmp	r5, r3
 80068e0:	d11b      	bne.n	800691a <_vfiprintf_r+0x56>
 80068e2:	6875      	ldr	r5, [r6, #4]
 80068e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068e6:	07d9      	lsls	r1, r3, #31
 80068e8:	d405      	bmi.n	80068f6 <_vfiprintf_r+0x32>
 80068ea:	89ab      	ldrh	r3, [r5, #12]
 80068ec:	059a      	lsls	r2, r3, #22
 80068ee:	d402      	bmi.n	80068f6 <_vfiprintf_r+0x32>
 80068f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068f2:	f7ff ff49 	bl	8006788 <__retarget_lock_acquire_recursive>
 80068f6:	89ab      	ldrh	r3, [r5, #12]
 80068f8:	071b      	lsls	r3, r3, #28
 80068fa:	d501      	bpl.n	8006900 <_vfiprintf_r+0x3c>
 80068fc:	692b      	ldr	r3, [r5, #16]
 80068fe:	b9eb      	cbnz	r3, 800693c <_vfiprintf_r+0x78>
 8006900:	4629      	mov	r1, r5
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff fd1a 	bl	800633c <__swsetup_r>
 8006908:	b1c0      	cbz	r0, 800693c <_vfiprintf_r+0x78>
 800690a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800690c:	07dc      	lsls	r4, r3, #31
 800690e:	d50e      	bpl.n	800692e <_vfiprintf_r+0x6a>
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	b01d      	add	sp, #116	; 0x74
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	4b7b      	ldr	r3, [pc, #492]	; (8006b08 <_vfiprintf_r+0x244>)
 800691c:	429d      	cmp	r5, r3
 800691e:	d101      	bne.n	8006924 <_vfiprintf_r+0x60>
 8006920:	68b5      	ldr	r5, [r6, #8]
 8006922:	e7df      	b.n	80068e4 <_vfiprintf_r+0x20>
 8006924:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <_vfiprintf_r+0x248>)
 8006926:	429d      	cmp	r5, r3
 8006928:	bf08      	it	eq
 800692a:	68f5      	ldreq	r5, [r6, #12]
 800692c:	e7da      	b.n	80068e4 <_vfiprintf_r+0x20>
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	0598      	lsls	r0, r3, #22
 8006932:	d4ed      	bmi.n	8006910 <_vfiprintf_r+0x4c>
 8006934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006936:	f7ff ff28 	bl	800678a <__retarget_lock_release_recursive>
 800693a:	e7e9      	b.n	8006910 <_vfiprintf_r+0x4c>
 800693c:	2300      	movs	r3, #0
 800693e:	9309      	str	r3, [sp, #36]	; 0x24
 8006940:	2320      	movs	r3, #32
 8006942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006946:	f8cd 800c 	str.w	r8, [sp, #12]
 800694a:	2330      	movs	r3, #48	; 0x30
 800694c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b10 <_vfiprintf_r+0x24c>
 8006950:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006954:	f04f 0901 	mov.w	r9, #1
 8006958:	4623      	mov	r3, r4
 800695a:	469a      	mov	sl, r3
 800695c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006960:	b10a      	cbz	r2, 8006966 <_vfiprintf_r+0xa2>
 8006962:	2a25      	cmp	r2, #37	; 0x25
 8006964:	d1f9      	bne.n	800695a <_vfiprintf_r+0x96>
 8006966:	ebba 0b04 	subs.w	fp, sl, r4
 800696a:	d00b      	beq.n	8006984 <_vfiprintf_r+0xc0>
 800696c:	465b      	mov	r3, fp
 800696e:	4622      	mov	r2, r4
 8006970:	4629      	mov	r1, r5
 8006972:	4630      	mov	r0, r6
 8006974:	f7ff ff93 	bl	800689e <__sfputs_r>
 8006978:	3001      	adds	r0, #1
 800697a:	f000 80aa 	beq.w	8006ad2 <_vfiprintf_r+0x20e>
 800697e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006980:	445a      	add	r2, fp
 8006982:	9209      	str	r2, [sp, #36]	; 0x24
 8006984:	f89a 3000 	ldrb.w	r3, [sl]
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80a2 	beq.w	8006ad2 <_vfiprintf_r+0x20e>
 800698e:	2300      	movs	r3, #0
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006998:	f10a 0a01 	add.w	sl, sl, #1
 800699c:	9304      	str	r3, [sp, #16]
 800699e:	9307      	str	r3, [sp, #28]
 80069a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a4:	931a      	str	r3, [sp, #104]	; 0x68
 80069a6:	4654      	mov	r4, sl
 80069a8:	2205      	movs	r2, #5
 80069aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ae:	4858      	ldr	r0, [pc, #352]	; (8006b10 <_vfiprintf_r+0x24c>)
 80069b0:	f7f9 fc2e 	bl	8000210 <memchr>
 80069b4:	9a04      	ldr	r2, [sp, #16]
 80069b6:	b9d8      	cbnz	r0, 80069f0 <_vfiprintf_r+0x12c>
 80069b8:	06d1      	lsls	r1, r2, #27
 80069ba:	bf44      	itt	mi
 80069bc:	2320      	movmi	r3, #32
 80069be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c2:	0713      	lsls	r3, r2, #28
 80069c4:	bf44      	itt	mi
 80069c6:	232b      	movmi	r3, #43	; 0x2b
 80069c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069cc:	f89a 3000 	ldrb.w	r3, [sl]
 80069d0:	2b2a      	cmp	r3, #42	; 0x2a
 80069d2:	d015      	beq.n	8006a00 <_vfiprintf_r+0x13c>
 80069d4:	9a07      	ldr	r2, [sp, #28]
 80069d6:	4654      	mov	r4, sl
 80069d8:	2000      	movs	r0, #0
 80069da:	f04f 0c0a 	mov.w	ip, #10
 80069de:	4621      	mov	r1, r4
 80069e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e4:	3b30      	subs	r3, #48	; 0x30
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d94e      	bls.n	8006a88 <_vfiprintf_r+0x1c4>
 80069ea:	b1b0      	cbz	r0, 8006a1a <_vfiprintf_r+0x156>
 80069ec:	9207      	str	r2, [sp, #28]
 80069ee:	e014      	b.n	8006a1a <_vfiprintf_r+0x156>
 80069f0:	eba0 0308 	sub.w	r3, r0, r8
 80069f4:	fa09 f303 	lsl.w	r3, r9, r3
 80069f8:	4313      	orrs	r3, r2
 80069fa:	9304      	str	r3, [sp, #16]
 80069fc:	46a2      	mov	sl, r4
 80069fe:	e7d2      	b.n	80069a6 <_vfiprintf_r+0xe2>
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	1d19      	adds	r1, r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	9103      	str	r1, [sp, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfbb      	ittet	lt
 8006a0c:	425b      	neglt	r3, r3
 8006a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a12:	9307      	strge	r3, [sp, #28]
 8006a14:	9307      	strlt	r3, [sp, #28]
 8006a16:	bfb8      	it	lt
 8006a18:	9204      	strlt	r2, [sp, #16]
 8006a1a:	7823      	ldrb	r3, [r4, #0]
 8006a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a1e:	d10c      	bne.n	8006a3a <_vfiprintf_r+0x176>
 8006a20:	7863      	ldrb	r3, [r4, #1]
 8006a22:	2b2a      	cmp	r3, #42	; 0x2a
 8006a24:	d135      	bne.n	8006a92 <_vfiprintf_r+0x1ce>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	9203      	str	r2, [sp, #12]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	bfb8      	it	lt
 8006a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a36:	3402      	adds	r4, #2
 8006a38:	9305      	str	r3, [sp, #20]
 8006a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b20 <_vfiprintf_r+0x25c>
 8006a3e:	7821      	ldrb	r1, [r4, #0]
 8006a40:	2203      	movs	r2, #3
 8006a42:	4650      	mov	r0, sl
 8006a44:	f7f9 fbe4 	bl	8000210 <memchr>
 8006a48:	b140      	cbz	r0, 8006a5c <_vfiprintf_r+0x198>
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	eba0 000a 	sub.w	r0, r0, sl
 8006a50:	fa03 f000 	lsl.w	r0, r3, r0
 8006a54:	9b04      	ldr	r3, [sp, #16]
 8006a56:	4303      	orrs	r3, r0
 8006a58:	3401      	adds	r4, #1
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a60:	482c      	ldr	r0, [pc, #176]	; (8006b14 <_vfiprintf_r+0x250>)
 8006a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a66:	2206      	movs	r2, #6
 8006a68:	f7f9 fbd2 	bl	8000210 <memchr>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	d03f      	beq.n	8006af0 <_vfiprintf_r+0x22c>
 8006a70:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <_vfiprintf_r+0x254>)
 8006a72:	bb1b      	cbnz	r3, 8006abc <_vfiprintf_r+0x1f8>
 8006a74:	9b03      	ldr	r3, [sp, #12]
 8006a76:	3307      	adds	r3, #7
 8006a78:	f023 0307 	bic.w	r3, r3, #7
 8006a7c:	3308      	adds	r3, #8
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a82:	443b      	add	r3, r7
 8006a84:	9309      	str	r3, [sp, #36]	; 0x24
 8006a86:	e767      	b.n	8006958 <_vfiprintf_r+0x94>
 8006a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	2001      	movs	r0, #1
 8006a90:	e7a5      	b.n	80069de <_vfiprintf_r+0x11a>
 8006a92:	2300      	movs	r3, #0
 8006a94:	3401      	adds	r4, #1
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f04f 0c0a 	mov.w	ip, #10
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa4:	3a30      	subs	r2, #48	; 0x30
 8006aa6:	2a09      	cmp	r2, #9
 8006aa8:	d903      	bls.n	8006ab2 <_vfiprintf_r+0x1ee>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d0c5      	beq.n	8006a3a <_vfiprintf_r+0x176>
 8006aae:	9105      	str	r1, [sp, #20]
 8006ab0:	e7c3      	b.n	8006a3a <_vfiprintf_r+0x176>
 8006ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e7f0      	b.n	8006a9e <_vfiprintf_r+0x1da>
 8006abc:	ab03      	add	r3, sp, #12
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	462a      	mov	r2, r5
 8006ac2:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <_vfiprintf_r+0x258>)
 8006ac4:	a904      	add	r1, sp, #16
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f3af 8000 	nop.w
 8006acc:	4607      	mov	r7, r0
 8006ace:	1c78      	adds	r0, r7, #1
 8006ad0:	d1d6      	bne.n	8006a80 <_vfiprintf_r+0x1bc>
 8006ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ad4:	07d9      	lsls	r1, r3, #31
 8006ad6:	d405      	bmi.n	8006ae4 <_vfiprintf_r+0x220>
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	059a      	lsls	r2, r3, #22
 8006adc:	d402      	bmi.n	8006ae4 <_vfiprintf_r+0x220>
 8006ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ae0:	f7ff fe53 	bl	800678a <__retarget_lock_release_recursive>
 8006ae4:	89ab      	ldrh	r3, [r5, #12]
 8006ae6:	065b      	lsls	r3, r3, #25
 8006ae8:	f53f af12 	bmi.w	8006910 <_vfiprintf_r+0x4c>
 8006aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aee:	e711      	b.n	8006914 <_vfiprintf_r+0x50>
 8006af0:	ab03      	add	r3, sp, #12
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	462a      	mov	r2, r5
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <_vfiprintf_r+0x258>)
 8006af8:	a904      	add	r1, sp, #16
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f880 	bl	8006c00 <_printf_i>
 8006b00:	e7e4      	b.n	8006acc <_vfiprintf_r+0x208>
 8006b02:	bf00      	nop
 8006b04:	0800711c 	.word	0x0800711c
 8006b08:	0800713c 	.word	0x0800713c
 8006b0c:	080070fc 	.word	0x080070fc
 8006b10:	0800715c 	.word	0x0800715c
 8006b14:	08007166 	.word	0x08007166
 8006b18:	00000000 	.word	0x00000000
 8006b1c:	0800689f 	.word	0x0800689f
 8006b20:	08007162 	.word	0x08007162

08006b24 <_printf_common>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	4616      	mov	r6, r2
 8006b2a:	4699      	mov	r9, r3
 8006b2c:	688a      	ldr	r2, [r1, #8]
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b34:	4293      	cmp	r3, r2
 8006b36:	bfb8      	it	lt
 8006b38:	4613      	movlt	r3, r2
 8006b3a:	6033      	str	r3, [r6, #0]
 8006b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b40:	4607      	mov	r7, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b10a      	cbz	r2, 8006b4a <_printf_common+0x26>
 8006b46:	3301      	adds	r3, #1
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	0699      	lsls	r1, r3, #26
 8006b4e:	bf42      	ittt	mi
 8006b50:	6833      	ldrmi	r3, [r6, #0]
 8006b52:	3302      	addmi	r3, #2
 8006b54:	6033      	strmi	r3, [r6, #0]
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	f015 0506 	ands.w	r5, r5, #6
 8006b5c:	d106      	bne.n	8006b6c <_printf_common+0x48>
 8006b5e:	f104 0a19 	add.w	sl, r4, #25
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	6832      	ldr	r2, [r6, #0]
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc26      	bgt.n	8006bba <_printf_common+0x96>
 8006b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b70:	1e13      	subs	r3, r2, #0
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	bf18      	it	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	0692      	lsls	r2, r2, #26
 8006b7a:	d42b      	bmi.n	8006bd4 <_printf_common+0xb0>
 8006b7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b80:	4649      	mov	r1, r9
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c0      	blx	r8
 8006b86:	3001      	adds	r0, #1
 8006b88:	d01e      	beq.n	8006bc8 <_printf_common+0xa4>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	68e5      	ldr	r5, [r4, #12]
 8006b8e:	6832      	ldr	r2, [r6, #0]
 8006b90:	f003 0306 	and.w	r3, r3, #6
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	bf08      	it	eq
 8006b98:	1aad      	subeq	r5, r5, r2
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	6922      	ldr	r2, [r4, #16]
 8006b9e:	bf0c      	ite	eq
 8006ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ba4:	2500      	movne	r5, #0
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	bfc4      	itt	gt
 8006baa:	1a9b      	subgt	r3, r3, r2
 8006bac:	18ed      	addgt	r5, r5, r3
 8006bae:	2600      	movs	r6, #0
 8006bb0:	341a      	adds	r4, #26
 8006bb2:	42b5      	cmp	r5, r6
 8006bb4:	d11a      	bne.n	8006bec <_printf_common+0xc8>
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	e008      	b.n	8006bcc <_printf_common+0xa8>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	47c0      	blx	r8
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d103      	bne.n	8006bd0 <_printf_common+0xac>
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	e7c6      	b.n	8006b62 <_printf_common+0x3e>
 8006bd4:	18e1      	adds	r1, r4, r3
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	2030      	movs	r0, #48	; 0x30
 8006bda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bde:	4422      	add	r2, r4
 8006be0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006be4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006be8:	3302      	adds	r3, #2
 8006bea:	e7c7      	b.n	8006b7c <_printf_common+0x58>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4622      	mov	r2, r4
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c0      	blx	r8
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d0e6      	beq.n	8006bc8 <_printf_common+0xa4>
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7d9      	b.n	8006bb2 <_printf_common+0x8e>
	...

08006c00 <_printf_i>:
 8006c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c04:	7e0f      	ldrb	r7, [r1, #24]
 8006c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c08:	2f78      	cmp	r7, #120	; 0x78
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	4680      	mov	r8, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	469a      	mov	sl, r3
 8006c12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c16:	d807      	bhi.n	8006c28 <_printf_i+0x28>
 8006c18:	2f62      	cmp	r7, #98	; 0x62
 8006c1a:	d80a      	bhi.n	8006c32 <_printf_i+0x32>
 8006c1c:	2f00      	cmp	r7, #0
 8006c1e:	f000 80d8 	beq.w	8006dd2 <_printf_i+0x1d2>
 8006c22:	2f58      	cmp	r7, #88	; 0x58
 8006c24:	f000 80a3 	beq.w	8006d6e <_printf_i+0x16e>
 8006c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c30:	e03a      	b.n	8006ca8 <_printf_i+0xa8>
 8006c32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c36:	2b15      	cmp	r3, #21
 8006c38:	d8f6      	bhi.n	8006c28 <_printf_i+0x28>
 8006c3a:	a101      	add	r1, pc, #4	; (adr r1, 8006c40 <_printf_i+0x40>)
 8006c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006cad 	.word	0x08006cad
 8006c48:	08006c29 	.word	0x08006c29
 8006c4c:	08006c29 	.word	0x08006c29
 8006c50:	08006c29 	.word	0x08006c29
 8006c54:	08006c29 	.word	0x08006c29
 8006c58:	08006cad 	.word	0x08006cad
 8006c5c:	08006c29 	.word	0x08006c29
 8006c60:	08006c29 	.word	0x08006c29
 8006c64:	08006c29 	.word	0x08006c29
 8006c68:	08006c29 	.word	0x08006c29
 8006c6c:	08006db9 	.word	0x08006db9
 8006c70:	08006cdd 	.word	0x08006cdd
 8006c74:	08006d9b 	.word	0x08006d9b
 8006c78:	08006c29 	.word	0x08006c29
 8006c7c:	08006c29 	.word	0x08006c29
 8006c80:	08006ddb 	.word	0x08006ddb
 8006c84:	08006c29 	.word	0x08006c29
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006c29 	.word	0x08006c29
 8006c90:	08006c29 	.word	0x08006c29
 8006c94:	08006da3 	.word	0x08006da3
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	602a      	str	r2, [r5, #0]
 8006ca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e0a3      	b.n	8006df4 <_printf_i+0x1f4>
 8006cac:	6820      	ldr	r0, [r4, #0]
 8006cae:	6829      	ldr	r1, [r5, #0]
 8006cb0:	0606      	lsls	r6, r0, #24
 8006cb2:	f101 0304 	add.w	r3, r1, #4
 8006cb6:	d50a      	bpl.n	8006cce <_printf_i+0xce>
 8006cb8:	680e      	ldr	r6, [r1, #0]
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	da03      	bge.n	8006cc8 <_printf_i+0xc8>
 8006cc0:	232d      	movs	r3, #45	; 0x2d
 8006cc2:	4276      	negs	r6, r6
 8006cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc8:	485e      	ldr	r0, [pc, #376]	; (8006e44 <_printf_i+0x244>)
 8006cca:	230a      	movs	r3, #10
 8006ccc:	e019      	b.n	8006d02 <_printf_i+0x102>
 8006cce:	680e      	ldr	r6, [r1, #0]
 8006cd0:	602b      	str	r3, [r5, #0]
 8006cd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cd6:	bf18      	it	ne
 8006cd8:	b236      	sxthne	r6, r6
 8006cda:	e7ef      	b.n	8006cbc <_printf_i+0xbc>
 8006cdc:	682b      	ldr	r3, [r5, #0]
 8006cde:	6820      	ldr	r0, [r4, #0]
 8006ce0:	1d19      	adds	r1, r3, #4
 8006ce2:	6029      	str	r1, [r5, #0]
 8006ce4:	0601      	lsls	r1, r0, #24
 8006ce6:	d501      	bpl.n	8006cec <_printf_i+0xec>
 8006ce8:	681e      	ldr	r6, [r3, #0]
 8006cea:	e002      	b.n	8006cf2 <_printf_i+0xf2>
 8006cec:	0646      	lsls	r6, r0, #25
 8006cee:	d5fb      	bpl.n	8006ce8 <_printf_i+0xe8>
 8006cf0:	881e      	ldrh	r6, [r3, #0]
 8006cf2:	4854      	ldr	r0, [pc, #336]	; (8006e44 <_printf_i+0x244>)
 8006cf4:	2f6f      	cmp	r7, #111	; 0x6f
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2308      	moveq	r3, #8
 8006cfa:	230a      	movne	r3, #10
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d02:	6865      	ldr	r5, [r4, #4]
 8006d04:	60a5      	str	r5, [r4, #8]
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	bfa2      	ittt	ge
 8006d0a:	6821      	ldrge	r1, [r4, #0]
 8006d0c:	f021 0104 	bicge.w	r1, r1, #4
 8006d10:	6021      	strge	r1, [r4, #0]
 8006d12:	b90e      	cbnz	r6, 8006d18 <_printf_i+0x118>
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	d04d      	beq.n	8006db4 <_printf_i+0x1b4>
 8006d18:	4615      	mov	r5, r2
 8006d1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d1e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d22:	5dc7      	ldrb	r7, [r0, r7]
 8006d24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d28:	4637      	mov	r7, r6
 8006d2a:	42bb      	cmp	r3, r7
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	d9f4      	bls.n	8006d1a <_printf_i+0x11a>
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d10b      	bne.n	8006d4c <_printf_i+0x14c>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	07de      	lsls	r6, r3, #31
 8006d38:	d508      	bpl.n	8006d4c <_printf_i+0x14c>
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	6861      	ldr	r1, [r4, #4]
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	bfde      	ittt	le
 8006d42:	2330      	movle	r3, #48	; 0x30
 8006d44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d4c:	1b52      	subs	r2, r2, r5
 8006d4e:	6122      	str	r2, [r4, #16]
 8006d50:	f8cd a000 	str.w	sl, [sp]
 8006d54:	464b      	mov	r3, r9
 8006d56:	aa03      	add	r2, sp, #12
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f7ff fee2 	bl	8006b24 <_printf_common>
 8006d60:	3001      	adds	r0, #1
 8006d62:	d14c      	bne.n	8006dfe <_printf_i+0x1fe>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	b004      	add	sp, #16
 8006d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6e:	4835      	ldr	r0, [pc, #212]	; (8006e44 <_printf_i+0x244>)
 8006d70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d74:	6829      	ldr	r1, [r5, #0]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d7c:	6029      	str	r1, [r5, #0]
 8006d7e:	061d      	lsls	r5, r3, #24
 8006d80:	d514      	bpl.n	8006dac <_printf_i+0x1ac>
 8006d82:	07df      	lsls	r7, r3, #31
 8006d84:	bf44      	itt	mi
 8006d86:	f043 0320 	orrmi.w	r3, r3, #32
 8006d8a:	6023      	strmi	r3, [r4, #0]
 8006d8c:	b91e      	cbnz	r6, 8006d96 <_printf_i+0x196>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f023 0320 	bic.w	r3, r3, #32
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	2310      	movs	r3, #16
 8006d98:	e7b0      	b.n	8006cfc <_printf_i+0xfc>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	f043 0320 	orr.w	r3, r3, #32
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	2378      	movs	r3, #120	; 0x78
 8006da4:	4828      	ldr	r0, [pc, #160]	; (8006e48 <_printf_i+0x248>)
 8006da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006daa:	e7e3      	b.n	8006d74 <_printf_i+0x174>
 8006dac:	0659      	lsls	r1, r3, #25
 8006dae:	bf48      	it	mi
 8006db0:	b2b6      	uxthmi	r6, r6
 8006db2:	e7e6      	b.n	8006d82 <_printf_i+0x182>
 8006db4:	4615      	mov	r5, r2
 8006db6:	e7bb      	b.n	8006d30 <_printf_i+0x130>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	6826      	ldr	r6, [r4, #0]
 8006dbc:	6961      	ldr	r1, [r4, #20]
 8006dbe:	1d18      	adds	r0, r3, #4
 8006dc0:	6028      	str	r0, [r5, #0]
 8006dc2:	0635      	lsls	r5, r6, #24
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	d501      	bpl.n	8006dcc <_printf_i+0x1cc>
 8006dc8:	6019      	str	r1, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <_printf_i+0x1d2>
 8006dcc:	0670      	lsls	r0, r6, #25
 8006dce:	d5fb      	bpl.n	8006dc8 <_printf_i+0x1c8>
 8006dd0:	8019      	strh	r1, [r3, #0]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6123      	str	r3, [r4, #16]
 8006dd6:	4615      	mov	r5, r2
 8006dd8:	e7ba      	b.n	8006d50 <_printf_i+0x150>
 8006dda:	682b      	ldr	r3, [r5, #0]
 8006ddc:	1d1a      	adds	r2, r3, #4
 8006dde:	602a      	str	r2, [r5, #0]
 8006de0:	681d      	ldr	r5, [r3, #0]
 8006de2:	6862      	ldr	r2, [r4, #4]
 8006de4:	2100      	movs	r1, #0
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7f9 fa12 	bl	8000210 <memchr>
 8006dec:	b108      	cbz	r0, 8006df2 <_printf_i+0x1f2>
 8006dee:	1b40      	subs	r0, r0, r5
 8006df0:	6060      	str	r0, [r4, #4]
 8006df2:	6863      	ldr	r3, [r4, #4]
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	2300      	movs	r3, #0
 8006df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dfc:	e7a8      	b.n	8006d50 <_printf_i+0x150>
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4649      	mov	r1, r9
 8006e04:	4640      	mov	r0, r8
 8006e06:	47d0      	blx	sl
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d0ab      	beq.n	8006d64 <_printf_i+0x164>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	079b      	lsls	r3, r3, #30
 8006e10:	d413      	bmi.n	8006e3a <_printf_i+0x23a>
 8006e12:	68e0      	ldr	r0, [r4, #12]
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	4298      	cmp	r0, r3
 8006e18:	bfb8      	it	lt
 8006e1a:	4618      	movlt	r0, r3
 8006e1c:	e7a4      	b.n	8006d68 <_printf_i+0x168>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4632      	mov	r2, r6
 8006e22:	4649      	mov	r1, r9
 8006e24:	4640      	mov	r0, r8
 8006e26:	47d0      	blx	sl
 8006e28:	3001      	adds	r0, #1
 8006e2a:	d09b      	beq.n	8006d64 <_printf_i+0x164>
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	68e3      	ldr	r3, [r4, #12]
 8006e30:	9903      	ldr	r1, [sp, #12]
 8006e32:	1a5b      	subs	r3, r3, r1
 8006e34:	42ab      	cmp	r3, r5
 8006e36:	dcf2      	bgt.n	8006e1e <_printf_i+0x21e>
 8006e38:	e7eb      	b.n	8006e12 <_printf_i+0x212>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	f104 0619 	add.w	r6, r4, #25
 8006e40:	e7f5      	b.n	8006e2e <_printf_i+0x22e>
 8006e42:	bf00      	nop
 8006e44:	0800716d 	.word	0x0800716d
 8006e48:	0800717e 	.word	0x0800717e

08006e4c <__sread>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	460c      	mov	r4, r1
 8006e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e54:	f000 f894 	bl	8006f80 <_read_r>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	bfab      	itete	ge
 8006e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e60:	181b      	addge	r3, r3, r0
 8006e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e66:	bfac      	ite	ge
 8006e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e6a:	81a3      	strhlt	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__swrite>:
 8006e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e72:	461f      	mov	r7, r3
 8006e74:	898b      	ldrh	r3, [r1, #12]
 8006e76:	05db      	lsls	r3, r3, #23
 8006e78:	4605      	mov	r5, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	d505      	bpl.n	8006e8c <__swrite+0x1e>
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	2302      	movs	r3, #2
 8006e86:	2200      	movs	r2, #0
 8006e88:	f000 f868 	bl	8006f5c <_lseek_r>
 8006e8c:	89a3      	ldrh	r3, [r4, #12]
 8006e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e96:	81a3      	strh	r3, [r4, #12]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	f000 b817 	b.w	8006ed4 <_write_r>

08006ea6 <__sseek>:
 8006ea6:	b510      	push	{r4, lr}
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eae:	f000 f855 	bl	8006f5c <_lseek_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	bf15      	itete	ne
 8006eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ec2:	81a3      	strheq	r3, [r4, #12]
 8006ec4:	bf18      	it	ne
 8006ec6:	81a3      	strhne	r3, [r4, #12]
 8006ec8:	bd10      	pop	{r4, pc}

08006eca <__sclose>:
 8006eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ece:	f000 b813 	b.w	8006ef8 <_close_r>
	...

08006ed4 <_write_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d07      	ldr	r5, [pc, #28]	; (8006ef4 <_write_r+0x20>)
 8006ed8:	4604      	mov	r4, r0
 8006eda:	4608      	mov	r0, r1
 8006edc:	4611      	mov	r1, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	602a      	str	r2, [r5, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f7fa feeb 	bl	8001cbe <_write>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_write_r+0x1e>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_write_r+0x1e>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000204 	.word	0x20000204

08006ef8 <_close_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d06      	ldr	r5, [pc, #24]	; (8006f14 <_close_r+0x1c>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	f7fa fef7 	bl	8001cf6 <_close>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_close_r+0x1a>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_close_r+0x1a>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000204 	.word	0x20000204

08006f18 <_fstat_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4d07      	ldr	r5, [pc, #28]	; (8006f38 <_fstat_r+0x20>)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4604      	mov	r4, r0
 8006f20:	4608      	mov	r0, r1
 8006f22:	4611      	mov	r1, r2
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	f7fa fef2 	bl	8001d0e <_fstat>
 8006f2a:	1c43      	adds	r3, r0, #1
 8006f2c:	d102      	bne.n	8006f34 <_fstat_r+0x1c>
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	b103      	cbz	r3, 8006f34 <_fstat_r+0x1c>
 8006f32:	6023      	str	r3, [r4, #0]
 8006f34:	bd38      	pop	{r3, r4, r5, pc}
 8006f36:	bf00      	nop
 8006f38:	20000204 	.word	0x20000204

08006f3c <_isatty_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d06      	ldr	r5, [pc, #24]	; (8006f58 <_isatty_r+0x1c>)
 8006f40:	2300      	movs	r3, #0
 8006f42:	4604      	mov	r4, r0
 8006f44:	4608      	mov	r0, r1
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	f7fa fef1 	bl	8001d2e <_isatty>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d102      	bne.n	8006f56 <_isatty_r+0x1a>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	b103      	cbz	r3, 8006f56 <_isatty_r+0x1a>
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	20000204 	.word	0x20000204

08006f5c <_lseek_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_lseek_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fa feea 	bl	8001d44 <_lseek>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_lseek_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_lseek_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	20000204 	.word	0x20000204

08006f80 <_read_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4d07      	ldr	r5, [pc, #28]	; (8006fa0 <_read_r+0x20>)
 8006f84:	4604      	mov	r4, r0
 8006f86:	4608      	mov	r0, r1
 8006f88:	4611      	mov	r1, r2
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f7fa fe78 	bl	8001c84 <_read>
 8006f94:	1c43      	adds	r3, r0, #1
 8006f96:	d102      	bne.n	8006f9e <_read_r+0x1e>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	b103      	cbz	r3, 8006f9e <_read_r+0x1e>
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	bd38      	pop	{r3, r4, r5, pc}
 8006fa0:	20000204 	.word	0x20000204

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
