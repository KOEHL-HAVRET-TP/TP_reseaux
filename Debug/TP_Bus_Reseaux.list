
TP_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080055cc  080055cc  000155cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a4  080057a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057ac  080057ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000070  08005824  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08005824  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb1e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274f  00000000  00000000  0002fbbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023576  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a4b  00000000  00000000  000570c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cece4  00000000  00000000  00068b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001377f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  00137848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055b4 	.word	0x080055b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080055b4 	.word	0x080055b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005ba:	23d0      	movs	r3, #208	; 0xd0
 80005bc:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005be:	23ee      	movs	r3, #238	; 0xee
 80005c0:	b299      	uxth	r1, r3
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4819      	ldr	r0, [pc, #100]	; (8000634 <BMP280_check+0x80>)
 80005ce:	f001 fb41 	bl	8001c54 <HAL_I2C_Master_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <BMP280_check+0x84>)
 80005de:	f004 f94b 	bl	8004878 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005e2:	23ee      	movs	r3, #238	; 0xee
 80005e4:	b299      	uxth	r1, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	9000      	str	r0, [sp, #0]
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <BMP280_check+0x80>)
 80005f4:	f001 fc2c 	bl	8001e50 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <BMP280_check+0x88>)
 8000604:	f004 f938 	bl	8004878 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8000608:	793b      	ldrb	r3, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <BMP280_check+0x8c>)
 800060e:	f004 f8ad 	bl	800476c <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	2258      	movs	r2, #88	; 0x58
 8000616:	4293      	cmp	r3, r2
 8000618:	d104      	bne.n	8000624 <BMP280_check+0x70>
		printf("Ok\r\n");
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <BMP280_check+0x90>)
 800061c:	f004 f92c 	bl	8004878 <puts>
		return 0;
 8000620:	2300      	movs	r3, #0
 8000622:	e003      	b.n	800062c <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <BMP280_check+0x94>)
 8000626:	f004 f927 	bl	8004878 <puts>
		return 1;
 800062a:	2301      	movs	r3, #1
	}
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000b4 	.word	0x200000b4
 8000638:	080055cc 	.word	0x080055cc
 800063c:	080055f0 	.word	0x080055f0
 8000640:	08005614 	.word	0x08005614
 8000644:	08005620 	.word	0x08005620
 8000648:	08005624 	.word	0x08005624

0800064c <BMP280_init>:

int BMP280_init() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000652:	2357      	movs	r3, #87	; 0x57
 8000654:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <BMP280_init+0x40>)
 8000658:	f004 f90e 	bl	8004878 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800065c:	22f4      	movs	r2, #244	; 0xf4
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f000 f818 	bl	8000698 <BMP280_Write_Reg>
 8000668:	4603      	mov	r3, r0
 800066a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d104      	bne.n	800067c <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <BMP280_init+0x44>)
 8000674:	f004 f900 	bl	8004878 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 8000678:	2300      	movs	r3, #0
 800067a:	e003      	b.n	8000684 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <BMP280_init+0x48>)
 800067e:	f004 f8fb 	bl	8004878 <puts>
		return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08005630 	.word	0x08005630
 8000690:	08005640 	.word	0x08005640
 8000694:	0800564c 	.word	0x0800564c

08000698 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80006b0:	23ee      	movs	r3, #238	; 0xee
 80006b2:	b299      	uxth	r1, r3
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006c2:	f001 fac7 	bl	8001c54 <HAL_I2C_Master_Transmit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <BMP280_Write_Reg+0x80>)
 80006d2:	f004 f8d1 	bl	8004878 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80006d6:	23ee      	movs	r3, #238	; 0xee
 80006d8:	b299      	uxth	r1, r3
 80006da:	f107 020c 	add.w	r2, r7, #12
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006e8:	f001 fbb2 	bl	8001e50 <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <BMP280_Write_Reg+0x84>)
 80006f8:	f004 f8be 	bl	8004878 <puts>
	}

	if (buf[0] == value) {
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	429a      	cmp	r2, r3
 8000702:	d101      	bne.n	8000708 <BMP280_Write_Reg+0x70>
		return 0;
 8000704:	2300      	movs	r3, #0
 8000706:	e000      	b.n	800070a <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000708:	2301      	movs	r3, #1
	}
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000b4 	.word	0x200000b4
 8000718:	0800565c 	.word	0x0800565c
 800071c:	08005678 	.word	0x08005678

08000720 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af02      	add	r7, sp, #8
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000730:	23ee      	movs	r3, #238	; 0xee
 8000732:	b299      	uxth	r1, r3
 8000734:	1dfa      	adds	r2, r7, #7
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <BMP280_Read_Reg+0x70>)
 8000740:	f001 fa88 	bl	8001c54 <HAL_I2C_Master_Transmit>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d002      	beq.n	8000754 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <BMP280_Read_Reg+0x74>)
 8000750:	f004 f892 	bl	8004878 <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	4618      	mov	r0, r3
 8000758:	f003 ff10 	bl	800457c <malloc>
 800075c:	4603      	mov	r3, r0
 800075e:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000760:	23ee      	movs	r3, #238	; 0xee
 8000762:	b299      	uxth	r1, r3
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	9200      	str	r2, [sp, #0]
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <BMP280_Read_Reg+0x70>)
 8000772:	f001 fb6d 	bl	8001e50 <HAL_I2C_Master_Receive>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d002      	beq.n	8000786 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <BMP280_Read_Reg+0x78>)
 8000782:	f004 f879 	bl	8004878 <puts>
	}

	return buf;
 8000786:	68bb      	ldr	r3, [r7, #8]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000b4 	.word	0x200000b4
 8000794:	0800565c 	.word	0x0800565c
 8000798:	08005678 	.word	0x08005678

0800079c <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 80007a2:	23fa      	movs	r3, #250	; 0xfa
 80007a4:	2203      	movs	r2, #3
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ffb9 	bl	8000720 <BMP280_Read_Reg>
 80007ae:	6078      	str	r0, [r7, #4]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	031a      	lsls	r2, r3, #12
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3301      	adds	r3, #1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	3202      	adds	r2, #2
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	0912      	lsrs	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 80007ca:	4313      	orrs	r3, r2
 80007cc:	603b      	str	r3, [r7, #0]

	free(buf);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f003 fedc 	bl	800458c <free>

	printf("Temperature: ");
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <BMP280_get_temperature+0x58>)
 80007d6:	f003 ffc9 	bl	800476c <iprintf>
	printf("0X%05lX", adc_T);
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	4806      	ldr	r0, [pc, #24]	; (80007f8 <BMP280_get_temperature+0x5c>)
 80007de:	f003 ffc5 	bl	800476c <iprintf>
	printf("\r\n");
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <BMP280_get_temperature+0x60>)
 80007e4:	f004 f848 	bl	8004878 <puts>

	return adc_T;
 80007e8:	683b      	ldr	r3, [r7, #0]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08005694 	.word	0x08005694
 80007f8:	080056a4 	.word	0x080056a4
 80007fc:	080056ac 	.word	0x080056ac

08000800 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;

	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000806:	23f7      	movs	r3, #247	; 0xf7
 8000808:	2203      	movs	r2, #3
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff87 	bl	8000720 <BMP280_Read_Reg>
 8000812:	6078      	str	r0, [r7, #4]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	031a      	lsls	r2, r3, #12
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	3301      	adds	r3, #1
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	3202      	adds	r2, #2
 8000828:	7812      	ldrb	r2, [r2, #0]
 800082a:	0912      	lsrs	r2, r2, #4
 800082c:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 800082e:	4313      	orrs	r3, r2
 8000830:	603b      	str	r3, [r7, #0]

	free(buf);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f003 feaa 	bl	800458c <free>

	printf("Pressure:    0x");
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <BMP280_get_pressure+0x58>)
 800083a:	f003 ff97 	bl	800476c <iprintf>
	printf("%05lX", adc_P);
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <BMP280_get_pressure+0x5c>)
 8000842:	f003 ff93 	bl	800476c <iprintf>
	printf("\r\n");
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <BMP280_get_pressure+0x60>)
 8000848:	f004 f816 	bl	8004878 <puts>

	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	080056b0 	.word	0x080056b0
 800085c:	080056c0 	.word	0x080056c0
 8000860:	080056ac 	.word	0x080056ac

08000864 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_CAN1_Init+0x60>)
 800086a:	4a17      	ldr	r2, [pc, #92]	; (80008c8 <MX_CAN1_Init+0x64>)
 800086c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_CAN1_Init+0x60>)
 8000870:	2210      	movs	r2, #16
 8000872:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_CAN1_Init+0x60>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_CAN1_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_CAN1_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_CAN1_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_CAN1_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_CAN1_Init+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_CAN1_Init+0x60>)
 800089a:	2200      	movs	r2, #0
 800089c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_CAN1_Init+0x60>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_CAN1_Init+0x60>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_CAN1_Init+0x60>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_CAN1_Init+0x60>)
 80008b2:	f000 fc57 	bl	8001164 <HAL_CAN_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008bc:	f000 f98a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000008c 	.word	0x2000008c
 80008c8:	40006400 	.word	0x40006400

080008cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_CAN_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12c      	bne.n	8000948 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_CAN_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_CAN_MspInit+0x88>)
 80008f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_CAN_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_CAN_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000938:	2309      	movs	r3, #9
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_CAN_MspInit+0x8c>)
 8000944:	f000 feae 	bl	80016a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40006400 	.word	0x40006400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x4c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_GPIO_Init+0x4c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_GPIO_Init+0x4c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_GPIO_Init+0x4c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_GPIO_Init+0x4c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_I2C1_Init+0x50>)
 80009b2:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <MX_I2C1_Init+0x54>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_I2C1_Init+0x50>)
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_I2C1_Init+0x58>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_I2C1_Init+0x50>)
 80009ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_I2C1_Init+0x50>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_I2C1_Init+0x50>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_I2C1_Init+0x50>)
 80009ea:	f000 ffef 	bl	80019cc <HAL_I2C_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f4:	f000 f8ee 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	40005400 	.word	0x40005400
 8000a04:	000186a0 	.word	0x000186a0

08000a08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a19      	ldr	r2, [pc, #100]	; (8000a8c <HAL_I2C_MspInit+0x84>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d12c      	bne.n	8000a84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a4c:	2312      	movs	r3, #18
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	480c      	ldr	r0, [pc, #48]	; (8000a94 <HAL_I2C_MspInit+0x8c>)
 8000a64:	f000 fe1e 	bl	80016a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a76:	6413      	str	r3, [r2, #64]	; 0x40
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f000 facc 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f838 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f7ff ff5a 	bl	800095c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000aa8:	f7ff fedc 	bl	8000864 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000aac:	f7ff ff7e 	bl	80009ac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ab0:	f000 f9c0 	bl	8000e34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ab4:	f000 f9e8 	bl	8000e88 <MX_USART2_UART_Init>
	/*printf("bonjour\r\n");
	int size = snprintf(buffer,max_len,"bonjour\r\n");
	HAL_UART_Transmit(&huart2, buffer, size, 0xFFFF);*/

	//main_comm();
	printf("\r\nChecking for BMP280\r\n");
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <main+0x68>)
 8000aba:	f003 fedd 	bl	8004878 <puts>
	BMP280_check();
 8000abe:	f7ff fd79 	bl	80005b4 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <main+0x6c>)
 8000ac4:	f003 fed8 	bl	8004878 <puts>
	BMP280_init();
 8000ac8:	f7ff fdc0 	bl	800064c <BMP280_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		BMP280_get_temperature();
 8000acc:	f7ff fe66 	bl	800079c <BMP280_get_temperature>
		BMP280_get_pressure();
 8000ad0:	f7ff fe96 	bl	8000800 <BMP280_get_pressure>
		//HAL_UART_Transmit(&huart1, "Hello i'm nucleo board\r\n", 24, HAL_MAX_DELAY);
		HAL_UART_Receive(&huart2, buffer, sizeof(buffer),HAL_MAX_DELAY);
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad8:	220a      	movs	r2, #10
 8000ada:	490b      	ldr	r1, [pc, #44]	; (8000b08 <main+0x70>)
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <main+0x74>)
 8000ade:	f002 fd4c 	bl	800357a <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, buffer[0], 24, HAL_MAX_DELAY);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <main+0x70>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aec:	2218      	movs	r2, #24
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <main+0x78>)
 8000af0:	f002 fcb1 	bl	8003456 <HAL_UART_Transmit>
		//printf('pointeur=%d',pt);
		HAL_Delay(1000);
 8000af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af8:	f000 fb10 	bl	800111c <HAL_Delay>
		BMP280_get_temperature();
 8000afc:	e7e6      	b.n	8000acc <main+0x34>
 8000afe:	bf00      	nop
 8000b00:	080056c8 	.word	0x080056c8
 8000b04:	080056e0 	.word	0x080056e0
 8000b08:	20000108 	.word	0x20000108
 8000b0c:	20000160 	.word	0x20000160
 8000b10:	2000011c 	.word	0x2000011c

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2234      	movs	r2, #52	; 0x34
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fd3a 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <SystemClock_Config+0xb8>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0xb8>)
 8000b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <SystemClock_Config+0xb8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <SystemClock_Config+0xbc>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <SystemClock_Config+0xbc>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <SystemClock_Config+0xbc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 f979 	bl	8002e80 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b94:	f000 f81e 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bac:	f107 0308 	add.w	r3, r7, #8
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fea0 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bbe:	f000 f809 	bl	8000bd4 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800

08000c30 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	//int size = snprintf(ch,sizeof(int),);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c38:	1d39      	adds	r1, r7, #4
 8000c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <__io_putchar+0x20>)
 8000c42:	f002 fc08 	bl	8003456 <HAL_UART_Transmit>
	return ch;
 8000c46:	687b      	ldr	r3, [r7, #4]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000160 	.word	0x20000160

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000c58:	e7fe      	b.n	8000c58 <NMI_Handler+0x4>

08000c5a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000c5e:	e7fe      	b.n	8000c5e <HardFault_Handler+0x4>

08000c60 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000c64:	e7fe      	b.n	8000c64 <MemManage_Handler+0x4>

08000c66 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000c6a:	e7fe      	b.n	8000c6a <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000c70:	e7fe      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c72 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000ca0:	f000 fa1c 	bl	80010dc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	pt++;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <USART2_IRQHandler+0x18>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	4a03      	ldr	r2, [pc, #12]	; (8000cc0 <USART2_IRQHandler+0x18>)
 8000cb4:	6013      	str	r3, [r2, #0]
	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <USART2_IRQHandler+0x1c>)
 8000cb8:	f002 fd02 	bl	80036c0 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000114 	.word	0x20000114
 8000cc4:	20000160 	.word	0x20000160

08000cc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e00a      	b.n	8000cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cda:	f3af 8000 	nop.w
 8000cde:	4601      	mov	r1, r0
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	b2ca      	uxtb	r2, r1
 8000ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbf0      	blt.n	8000cda <_read+0x12>
	}

return len;
 8000cf8:	687b      	ldr	r3, [r7, #4]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	60ba      	str	r2, [r7, #8]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff87 	bl	8000c30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf1      	blt.n	8000d14 <_write+0x12>
	}
	return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_close>:

int _close(int file)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	return -1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d52:	b480      	push	{r7}
 8000d54:	b083      	sub	sp, #12
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
 8000d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	605a      	str	r2, [r3, #4]
	return 0;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_isatty>:

int _isatty(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <_sbrk+0x5c>)
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <_sbrk+0x60>)
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d102      	bne.n	8000dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <_sbrk+0x64>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <_sbrk+0x68>)
 8000dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <_sbrk+0x64>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4413      	add	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d207      	bcs.n	8000de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd4:	f003 fba8 	bl	8004528 <__errno>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	220c      	movs	r2, #12
 8000ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295
 8000de2:	e009      	b.n	8000df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <_sbrk+0x64>)
 8000df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df6:	68fb      	ldr	r3, [r7, #12]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20020000 	.word	0x20020000
 8000e04:	00000400 	.word	0x00000400
 8000e08:	20000118 	.word	0x20000118
 8000e0c:	200001b8 	.word	0x200001b8

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_USART1_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	f002 faa6 	bl	80033bc <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f7ff fead 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000011c 	.word	0x2000011c
 8000e84:	40011000 	.word	0x40011000

08000e88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f002 fa7c 	bl	80033bc <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f7ff fe83 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000160 	.word	0x20000160
 8000ed8:	40004400 	.word	0x40004400

08000edc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <HAL_UART_MspInit+0xf8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12d      	bne.n	8000f5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4619      	mov	r1, r3
 8000f52:	4822      	ldr	r0, [pc, #136]	; (8000fdc <HAL_UART_MspInit+0x100>)
 8000f54:	f000 fba6 	bl	80016a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f58:	e038      	b.n	8000fcc <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <HAL_UART_MspInit+0x104>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d133      	bne.n	8000fcc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f72:	6413      	str	r3, [r2, #64]	; 0x40
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0xfc>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9c:	230c      	movs	r3, #12
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fac:	2307      	movs	r3, #7
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_UART_MspInit+0x100>)
 8000fb8:	f000 fb74 	bl	80016a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f000 faa6 	bl	8001512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc6:	2026      	movs	r0, #38	; 0x26
 8000fc8:	f000 fabf 	bl	800154a <HAL_NVIC_EnableIRQ>
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff feff 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 fa8f 	bl	8004534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fd3f 	bl	8000a98 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	080057b4 	.word	0x080057b4
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	200001b8 	.word	0x200001b8

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 fa4b 	bl	80014fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fdb8 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fa63 	bl	8001566 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 fa2b 	bl	8001512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	200001a4 	.word	0x200001a4

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200001a4 	.word	0x200001a4

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e0ed      	b.n	8001352 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fba2 	bl	80008cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001198:	f7ff ffb4 	bl	8001104 <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800119e:	e012      	b.n	80011c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a0:	f7ff ffb0 	bl	8001104 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d90b      	bls.n	80011c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2205      	movs	r2, #5
 80011be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0c5      	b.n	8001352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0e5      	beq.n	80011a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 0202 	bic.w	r2, r2, #2
 80011e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e4:	f7ff ff8e 	bl	8001104 <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ea:	e012      	b.n	8001212 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ec:	f7ff ff8a 	bl	8001104 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b0a      	cmp	r3, #10
 80011f8:	d90b      	bls.n	8001212 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2205      	movs	r2, #5
 800120a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e09f      	b.n	8001352 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e5      	bne.n	80011ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7e1b      	ldrb	r3, [r3, #24]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d108      	bne.n	800123a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e007      	b.n	800124a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7e5b      	ldrb	r3, [r3, #25]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e007      	b.n	8001274 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001272:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7e9b      	ldrb	r3, [r3, #26]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d108      	bne.n	800128e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0220 	orr.w	r2, r2, #32
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e007      	b.n	800129e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0220 	bic.w	r2, r2, #32
 800129c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	7edb      	ldrb	r3, [r3, #27]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d108      	bne.n	80012b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0210 	bic.w	r2, r2, #16
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0210 	orr.w	r2, r2, #16
 80012c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7f1b      	ldrb	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d108      	bne.n	80012e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0208 	orr.w	r2, r2, #8
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	e007      	b.n	80012f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 0208 	bic.w	r2, r2, #8
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7f5b      	ldrb	r3, [r3, #29]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d108      	bne.n	800130c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0204 	orr.w	r2, r2, #4
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e007      	b.n	800131c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0204 	bic.w	r2, r2, #4
 800131a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	ea42 0103 	orr.w	r1, r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	1e5a      	subs	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001378:	4013      	ands	r3, r2
 800137a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <__NVIC_GetPriorityGrouping+0x18>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	f003 0307 	and.w	r3, r3, #7
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db0b      	blt.n	80013ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	4907      	ldr	r1, [pc, #28]	; (80013f8 <__NVIC_EnableIRQ+0x38>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	095b      	lsrs	r3, r3, #5
 80013e0:	2001      	movs	r0, #1
 80013e2:	fa00 f202 	lsl.w	r2, r0, r2
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000e100 	.word	0xe000e100

080013fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	2b00      	cmp	r3, #0
 800140e:	db0a      	blt.n	8001426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	490c      	ldr	r1, [pc, #48]	; (8001448 <__NVIC_SetPriority+0x4c>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	440b      	add	r3, r1
 8001420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001424:	e00a      	b.n	800143c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <__NVIC_SetPriority+0x50>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	3b04      	subs	r3, #4
 8001434:	0112      	lsls	r2, r2, #4
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	440b      	add	r3, r1
 800143a:	761a      	strb	r2, [r3, #24]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f1c3 0307 	rsb	r3, r3, #7
 800146a:	2b04      	cmp	r3, #4
 800146c:	bf28      	it	cs
 800146e:	2304      	movcs	r3, #4
 8001470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3304      	adds	r3, #4
 8001476:	2b06      	cmp	r3, #6
 8001478:	d902      	bls.n	8001480 <NVIC_EncodePriority+0x30>
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3b03      	subs	r3, #3
 800147e:	e000      	b.n	8001482 <NVIC_EncodePriority+0x32>
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	401a      	ands	r2, r3
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	43d9      	mvns	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	4313      	orrs	r3, r2
         );
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3724      	adds	r7, #36	; 0x24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c8:	d301      	bcc.n	80014ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00f      	b.n	80014ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <SysTick_Config+0x40>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d6:	210f      	movs	r1, #15
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f7ff ff8e 	bl	80013fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <SysTick_Config+0x40>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <SysTick_Config+0x40>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff29 	bl	800135c <__NVIC_SetPriorityGrouping>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff3e 	bl	80013a4 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff8e 	bl	8001450 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5d 	bl	80013fc <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff31 	bl	80013c0 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa2 	bl	80014b8 <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff fdba 	bl	8001104 <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e052      	b.n	8001656 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0216 	bic.w	r2, r2, #22
 80015be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <HAL_DMA_Abort+0x62>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0208 	bic.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001600:	e013      	b.n	800162a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001602:	f7ff fd7f 	bl	8001104 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b05      	cmp	r3, #5
 800160e:	d90c      	bls.n	800162a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2220      	movs	r2, #32
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e015      	b.n	8001656 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e4      	bne.n	8001602 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	409a      	lsls	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d004      	beq.n	800167c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e00c      	b.n	8001696 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e165      	b.n	800198c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	f040 8154 	bne.w	8001986 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d005      	beq.n	80016f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d130      	bne.n	8001758 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 0201 	and.w	r2, r3, #1
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b03      	cmp	r3, #3
 8001762:	d017      	beq.n	8001794 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d123      	bne.n	80017e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80ae 	beq.w	8001986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_GPIO_Init+0x300>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a5c      	ldr	r2, [pc, #368]	; (80019a4 <HAL_GPIO_Init+0x300>)
 8001834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
 800183a:	4b5a      	ldr	r3, [pc, #360]	; (80019a4 <HAL_GPIO_Init+0x300>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001846:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_GPIO_Init+0x304>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4f      	ldr	r2, [pc, #316]	; (80019ac <HAL_GPIO_Init+0x308>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d025      	beq.n	80018be <HAL_GPIO_Init+0x21a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4e      	ldr	r2, [pc, #312]	; (80019b0 <HAL_GPIO_Init+0x30c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01f      	beq.n	80018ba <HAL_GPIO_Init+0x216>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4d      	ldr	r2, [pc, #308]	; (80019b4 <HAL_GPIO_Init+0x310>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d019      	beq.n	80018b6 <HAL_GPIO_Init+0x212>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <HAL_GPIO_Init+0x314>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0x20e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4b      	ldr	r2, [pc, #300]	; (80019bc <HAL_GPIO_Init+0x318>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d00d      	beq.n	80018ae <HAL_GPIO_Init+0x20a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4a      	ldr	r2, [pc, #296]	; (80019c0 <HAL_GPIO_Init+0x31c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d007      	beq.n	80018aa <HAL_GPIO_Init+0x206>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <HAL_GPIO_Init+0x320>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_GPIO_Init+0x202>
 80018a2:	2306      	movs	r3, #6
 80018a4:	e00c      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018a6:	2307      	movs	r3, #7
 80018a8:	e00a      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018aa:	2305      	movs	r3, #5
 80018ac:	e008      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e004      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e002      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x21c>
 80018be:	2300      	movs	r3, #0
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	f002 0203 	and.w	r2, r2, #3
 80018c6:	0092      	lsls	r2, r2, #2
 80018c8:	4093      	lsls	r3, r2
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d0:	4935      	ldr	r1, [pc, #212]	; (80019a8 <HAL_GPIO_Init+0x304>)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	089b      	lsrs	r3, r3, #2
 80018d6:	3302      	adds	r3, #2
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018de:	4b3a      	ldr	r3, [pc, #232]	; (80019c8 <HAL_GPIO_Init+0x324>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001902:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_GPIO_Init+0x324>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800192c:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x324>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_GPIO_Init+0x324>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_GPIO_Init+0x324>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3301      	adds	r3, #1
 800198a:	61fb      	str	r3, [r7, #28]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	f67f ae96 	bls.w	80016c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40021400 	.word	0x40021400
 80019c4:	40021800 	.word	0x40021800
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e12b      	b.n	8001c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d106      	bne.n	80019f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff f808 	bl	8000a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a30:	f001 f854 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8001a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a81      	ldr	r2, [pc, #516]	; (8001c40 <HAL_I2C_Init+0x274>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d807      	bhi.n	8001a50 <HAL_I2C_Init+0x84>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a80      	ldr	r2, [pc, #512]	; (8001c44 <HAL_I2C_Init+0x278>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf94      	ite	ls
 8001a48:	2301      	movls	r3, #1
 8001a4a:	2300      	movhi	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e006      	b.n	8001a5e <HAL_I2C_Init+0x92>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a7d      	ldr	r2, [pc, #500]	; (8001c48 <HAL_I2C_Init+0x27c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	bf94      	ite	ls
 8001a58:	2301      	movls	r3, #1
 8001a5a:	2300      	movhi	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0e7      	b.n	8001c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a78      	ldr	r2, [pc, #480]	; (8001c4c <HAL_I2C_Init+0x280>)
 8001a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6e:	0c9b      	lsrs	r3, r3, #18
 8001a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a6a      	ldr	r2, [pc, #424]	; (8001c40 <HAL_I2C_Init+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d802      	bhi.n	8001aa0 <HAL_I2C_Init+0xd4>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	e009      	b.n	8001ab4 <HAL_I2C_Init+0xe8>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	4a69      	ldr	r2, [pc, #420]	; (8001c50 <HAL_I2C_Init+0x284>)
 8001aac:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab0:	099b      	lsrs	r3, r3, #6
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	430b      	orrs	r3, r1
 8001aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ac6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	495c      	ldr	r1, [pc, #368]	; (8001c40 <HAL_I2C_Init+0x274>)
 8001ad0:	428b      	cmp	r3, r1
 8001ad2:	d819      	bhi.n	8001b08 <HAL_I2C_Init+0x13c>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1e59      	subs	r1, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ae8:	400b      	ands	r3, r1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <HAL_I2C_Init+0x138>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e59      	subs	r1, r3, #1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001afc:	3301      	adds	r3, #1
 8001afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b02:	e051      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b04:	2304      	movs	r3, #4
 8001b06:	e04f      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d111      	bne.n	8001b34 <HAL_I2C_Init+0x168>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	440b      	add	r3, r1
 8001b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	e012      	b.n	8001b5a <HAL_I2C_Init+0x18e>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	1e58      	subs	r0, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	0099      	lsls	r1, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Init+0x196>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e022      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10e      	bne.n	8001b88 <HAL_I2C_Init+0x1bc>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1e58      	subs	r0, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	440b      	add	r3, r1
 8001b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b86:	e00f      	b.n	8001ba8 <HAL_I2C_Init+0x1dc>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1e58      	subs	r0, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6859      	ldr	r1, [r3, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	0099      	lsls	r1, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6809      	ldr	r1, [r1, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6911      	ldr	r1, [r2, #16]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68d2      	ldr	r2, [r2, #12]
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	000186a0 	.word	0x000186a0
 8001c44:	001e847f 	.word	0x001e847f
 8001c48:	003d08ff 	.word	0x003d08ff
 8001c4c:	431bde83 	.word	0x431bde83
 8001c50:	10624dd3 	.word	0x10624dd3

08001c54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	817b      	strh	r3, [r7, #10]
 8001c64:	4613      	mov	r3, r2
 8001c66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff fa4c 	bl	8001104 <HAL_GetTick>
 8001c6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	f040 80e0 	bne.w	8001e3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2319      	movs	r3, #25
 8001c82:	2201      	movs	r2, #1
 8001c84:	4970      	ldr	r1, [pc, #448]	; (8001e48 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 fc58 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	e0d3      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x50>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e0cc      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d007      	beq.n	8001cca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2221      	movs	r2, #33	; 0x21
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	893a      	ldrh	r2, [r7, #8]
 8001cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4a50      	ldr	r2, [pc, #320]	; (8001e4c <HAL_I2C_Master_Transmit+0x1f8>)
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d0c:	8979      	ldrh	r1, [r7, #10]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	6a3a      	ldr	r2, [r7, #32]
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fac2 	bl	800229c <I2C_MasterRequestWrite>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e08d      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d38:	e066      	b.n	8001e08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	6a39      	ldr	r1, [r7, #32]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fcd2 	bl	80026e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00d      	beq.n	8001d66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d107      	bne.n	8001d62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06b      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d11b      	bne.n	8001ddc <HAL_I2C_Master_Transmit+0x188>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d017      	beq.n	8001ddc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	6a39      	ldr	r1, [r7, #32]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 fcc2 	bl	800276a <I2C_WaitOnBTFFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e01a      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d194      	bne.n	8001d3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e000      	b.n	8001e3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2302      	movs	r3, #2
  }
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	00100002 	.word	0x00100002
 8001e4c:	ffff0000 	.word	0xffff0000

08001e50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
 8001e60:	4613      	mov	r3, r2
 8001e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e64:	f7ff f94e 	bl	8001104 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b20      	cmp	r3, #32
 8001e74:	f040 820b 	bne.w	800228e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2319      	movs	r3, #25
 8001e7e:	2201      	movs	r2, #1
 8001e80:	497c      	ldr	r1, [pc, #496]	; (8002074 <HAL_I2C_Master_Receive+0x224>)
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fb5a 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e1fe      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2C_Master_Receive+0x50>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e1f7      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d007      	beq.n	8001ec6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2222      	movs	r2, #34	; 0x22
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	893a      	ldrh	r2, [r7, #8]
 8001ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_I2C_Master_Receive+0x228>)
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fa46 	bl	80023a0 <I2C_MasterRequestRead>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e1b8      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d113      	bne.n	8001f4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e18c      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d11b      	bne.n	8001f8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e16c      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d11b      	bne.n	8001fce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	61bb      	str	r3, [r7, #24]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	e14c      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ff4:	e138      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	f200 80f1 	bhi.w	80021e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b01      	cmp	r3, #1
 8002006:	d123      	bne.n	8002050 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fbed 	bl	80027ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e139      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	3b01      	subs	r3, #1
 8002048:	b29a      	uxth	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800204e:	e10b      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	2b02      	cmp	r3, #2
 8002056:	d14e      	bne.n	80020f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	2200      	movs	r2, #0
 8002060:	4906      	ldr	r1, [pc, #24]	; (800207c <HAL_I2C_Master_Receive+0x22c>)
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa6a 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d008      	beq.n	8002080 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e10e      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
 8002072:	bf00      	nop
 8002074:	00100002 	.word	0x00100002
 8002078:	ffff0000 	.word	0xffff0000
 800207c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020f4:	e0b8      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fc:	2200      	movs	r2, #0
 80020fe:	4966      	ldr	r1, [pc, #408]	; (8002298 <HAL_I2C_Master_Receive+0x448>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fa1b 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0bf      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800211e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	3b01      	subs	r3, #1
 800214c:	b29a      	uxth	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002158:	2200      	movs	r2, #0
 800215a:	494f      	ldr	r1, [pc, #316]	; (8002298 <HAL_I2C_Master_Receive+0x448>)
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f9ed 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e091      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021e0:	e042      	b.n	8002268 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fb00 	bl	80027ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e04c      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d118      	bne.n	8002268 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f aec2 	bne.w	8001ff6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3728      	adds	r7, #40	; 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	00010004 	.word	0x00010004

0800229c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	460b      	mov	r3, r1
 80022aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d006      	beq.n	80022c6 <I2C_MasterRequestWrite+0x2a>
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d003      	beq.n	80022c6 <I2C_MasterRequestWrite+0x2a>
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022c4:	d108      	bne.n	80022d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e00b      	b.n	80022f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	2b12      	cmp	r3, #18
 80022de:	d107      	bne.n	80022f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f91d 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002316:	d103      	bne.n	8002320 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800231e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e035      	b.n	8002390 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800232c:	d108      	bne.n	8002340 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	e01b      	b.n	8002378 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002340:	897b      	ldrh	r3, [r7, #10]
 8002342:	11db      	asrs	r3, r3, #7
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f003 0306 	and.w	r3, r3, #6
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f063 030f 	orn	r3, r3, #15
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	490e      	ldr	r1, [pc, #56]	; (8002398 <I2C_MasterRequestWrite+0xfc>)
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f943 	bl	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e010      	b.n	8002390 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800236e:	897b      	ldrh	r3, [r7, #10]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <I2C_MasterRequestWrite+0x100>)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f933 	bl	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	00010008 	.word	0x00010008
 800239c:	00010002 	.word	0x00010002

080023a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	460b      	mov	r3, r1
 80023ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d006      	beq.n	80023da <I2C_MasterRequestRead+0x3a>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d003      	beq.n	80023da <I2C_MasterRequestRead+0x3a>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023d8:	d108      	bne.n	80023ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e00b      	b.n	8002404 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	2b11      	cmp	r3, #17
 80023f2:	d107      	bne.n	8002404 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002402:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 f893 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00d      	beq.n	8002438 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800242a:	d103      	bne.n	8002434 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e079      	b.n	800252c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002440:	d108      	bne.n	8002454 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002442:	897b      	ldrh	r3, [r7, #10]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e05f      	b.n	8002514 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002454:	897b      	ldrh	r3, [r7, #10]
 8002456:	11db      	asrs	r3, r3, #7
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0306 	and.w	r3, r3, #6
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f063 030f 	orn	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4930      	ldr	r1, [pc, #192]	; (8002534 <I2C_MasterRequestRead+0x194>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f8b9 	bl	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e054      	b.n	800252c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4929      	ldr	r1, [pc, #164]	; (8002538 <I2C_MasterRequestRead+0x198>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f8a9 	bl	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e044      	b.n	800252c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f831 	bl	800253c <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ee:	d103      	bne.n	80024f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e017      	b.n	800252c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024fc:	897b      	ldrh	r3, [r7, #10]
 80024fe:	11db      	asrs	r3, r3, #7
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	b2db      	uxtb	r3, r3
 8002508:	f063 030e 	orn	r3, r3, #14
 800250c:	b2da      	uxtb	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <I2C_MasterRequestRead+0x198>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f865 	bl	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	00010008 	.word	0x00010008
 8002538:	00010002 	.word	0x00010002

0800253c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254c:	e025      	b.n	800259a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d021      	beq.n	800259a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7fe fdd5 	bl	8001104 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0220 	orr.w	r2, r3, #32
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e023      	b.n	80025e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10d      	bne.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	e00c      	b.n	80025da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d0b6      	beq.n	800254e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f8:	e051      	b.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002608:	d123      	bne.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002618:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002622:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e046      	b.n	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d021      	beq.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265a:	f7fe fd53 	bl	8001104 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d302      	bcc.n	8002670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d116      	bne.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e020      	b.n	80026e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	0c1b      	lsrs	r3, r3, #16
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10c      	bne.n	80026c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e00b      	b.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	43da      	mvns	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4013      	ands	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d18d      	bne.n	80025fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f4:	e02d      	b.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f8ce 	bl	8002898 <I2C_IsAcknowledgeFailed>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e02d      	b.n	8002762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d021      	beq.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7fe fcf9 	bl	8001104 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d116      	bne.n	8002752 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275c:	2b80      	cmp	r3, #128	; 0x80
 800275e:	d1ca      	bne.n	80026f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002776:	e02d      	b.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f88d 	bl	8002898 <I2C_IsAcknowledgeFailed>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e02d      	b.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d021      	beq.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002790:	f7fe fcb8 	bl	8001104 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	429a      	cmp	r2, r3
 800279e:	d302      	bcc.n	80027a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	f043 0220 	orr.w	r2, r3, #32
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e007      	b.n	80027e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d1ca      	bne.n	8002778 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027f8:	e042      	b.n	8002880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b10      	cmp	r3, #16
 8002806:	d119      	bne.n	800283c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0210 	mvn.w	r2, #16
 8002810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e029      	b.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283c:	f7fe fc62 	bl	8001104 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	429a      	cmp	r2, r3
 800284a:	d302      	bcc.n	8002852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d1b5      	bne.n	80027fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ae:	d11b      	bne.n	80028e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f043 0204 	orr.w	r2, r3, #4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0cc      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d90c      	bls.n	8002934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002964:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800296e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	494d      	ldr	r1, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002996:	4b47      	ldr	r3, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d119      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e07f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e06f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e067      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4934      	ldr	r1, [pc, #208]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029e8:	f7fe fb8c 	bl	8001104 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe fb88 	bl	8001104 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04f      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a06:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 020c 	and.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d1eb      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d20c      	bcs.n	8002a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2e:	4b20      	ldr	r3, [pc, #128]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e032      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a7e:	f000 f855 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002a82:	4602      	mov	r2, r0
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	490a      	ldr	r1, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	5ccb      	ldrb	r3, [r1, r3]
 8002a92:	fa22 f303 	lsr.w	r3, r2, r3
 8002a96:	4a09      	ldr	r2, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe faec 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023c00 	.word	0x40023c00
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	080056f4 	.word	0x080056f4
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ae0:	f7ff fff0 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0a9b      	lsrs	r3, r3, #10
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08005704 	.word	0x08005704

08002b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b08:	f7ff ffdc 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0b5b      	lsrs	r3, r3, #13
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	; (8002b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	08005704 	.word	0x08005704

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b30:	b0a6      	sub	sp, #152	; 0x98
 8002b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b52:	4bc8      	ldr	r3, [pc, #800]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	f200 817e 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x330>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b9d 	.word	0x08002b9d
 8002b6c:	08002e5d 	.word	0x08002e5d
 8002b70:	08002e5d 	.word	0x08002e5d
 8002b74:	08002e5d 	.word	0x08002e5d
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002e5d 	.word	0x08002e5d
 8002b80:	08002e5d 	.word	0x08002e5d
 8002b84:	08002e5d 	.word	0x08002e5d
 8002b88:	08002bad 	.word	0x08002bad
 8002b8c:	08002e5d 	.word	0x08002e5d
 8002b90:	08002e5d 	.word	0x08002e5d
 8002b94:	08002e5d 	.word	0x08002e5d
 8002b98:	08002d17 	.word	0x08002d17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4bb6      	ldr	r3, [pc, #728]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002ba2:	e15f      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4bb5      	ldr	r3, [pc, #724]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002baa:	e15b      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4bb1      	ldr	r3, [pc, #708]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb8:	4bae      	ldr	r3, [pc, #696]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d031      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc4:	4bab      	ldr	r3, [pc, #684]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	2200      	movs	r2, #0
 8002bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8002bd8:	2300      	movs	r3, #0
 8002bda:	667b      	str	r3, [r7, #100]	; 0x64
 8002bdc:	4ba7      	ldr	r3, [pc, #668]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002bde:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002be2:	462a      	mov	r2, r5
 8002be4:	fb03 f202 	mul.w	r2, r3, r2
 8002be8:	2300      	movs	r3, #0
 8002bea:	4621      	mov	r1, r4
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4aa2      	ldr	r2, [pc, #648]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	fba1 1202 	umull	r1, r2, r1, r2
 8002bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	67ba      	str	r2, [r7, #120]	; 0x78
 8002c00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002c02:	4413      	add	r3, r2
 8002c04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c0e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c14:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002c18:	f7fd fb4a 	bl	80002b0 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4613      	mov	r3, r2
 8002c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c26:	e064      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c28:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	2200      	movs	r2, #0
 8002c30:	653b      	str	r3, [r7, #80]	; 0x50
 8002c32:	657a      	str	r2, [r7, #84]	; 0x54
 8002c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0159      	lsls	r1, r3, #5
 8002c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c56:	0150      	lsls	r0, r2, #5
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	1a51      	subs	r1, r2, r1
 8002c60:	6139      	str	r1, [r7, #16]
 8002c62:	4629      	mov	r1, r5
 8002c64:	eb63 0301 	sbc.w	r3, r3, r1
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c76:	4659      	mov	r1, fp
 8002c78:	018b      	lsls	r3, r1, #6
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c80:	4651      	mov	r1, sl
 8002c82:	018a      	lsls	r2, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ebb2 0801 	subs.w	r8, r2, r1
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	4623      	mov	r3, r4
 8002caa:	eb18 0303 	adds.w	r3, r8, r3
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	eb49 0303 	adc.w	r3, r9, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	028b      	lsls	r3, r1, #10
 8002cc8:	4621      	mov	r1, r4
 8002cca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cce:	4621      	mov	r1, r4
 8002cd0:	028a      	lsls	r2, r1, #10
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
 8002cde:	647a      	str	r2, [r7, #68]	; 0x44
 8002ce0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce4:	f7fd fae4 	bl	80002b0 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf2:	4b60      	ldr	r3, [pc, #384]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002d04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d14:	e0a6      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d16:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	4b54      	ldr	r3, [pc, #336]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02a      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4b51      	ldr	r3, [pc, #324]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	2200      	movs	r2, #0
 8002d36:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d40:	2100      	movs	r1, #0
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d44:	fb03 f201 	mul.w	r2, r3, r1
 8002d48:	2300      	movs	r3, #0
 8002d4a:	fb00 f303 	mul.w	r3, r0, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a4a      	ldr	r2, [pc, #296]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x350>)
 8002d52:	fba0 1202 	umull	r1, r2, r0, r2
 8002d56:	677a      	str	r2, [r7, #116]	; 0x74
 8002d58:	460a      	mov	r2, r1
 8002d5a:	673a      	str	r2, [r7, #112]	; 0x70
 8002d5c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d5e:	4413      	add	r3, r2
 8002d60:	677b      	str	r3, [r7, #116]	; 0x74
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d66:	2200      	movs	r2, #0
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002d74:	f7fd fa9c 	bl	80002b0 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d82:	e05b      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	0159      	lsls	r1, r3, #5
 8002dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db2:	0150      	lsls	r0, r2, #5
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4641      	mov	r1, r8
 8002dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	00eb      	lsls	r3, r5, #3
 8002dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dee:	00e2      	lsls	r2, r4, #3
 8002df0:	4614      	mov	r4, r2
 8002df2:	461d      	mov	r5, r3
 8002df4:	4643      	mov	r3, r8
 8002df6:	18e3      	adds	r3, r4, r3
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	eb45 0303 	adc.w	r3, r5, r3
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	028b      	lsls	r3, r1, #10
 8002e12:	4621      	mov	r1, r4
 8002e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e18:	4621      	mov	r1, r4
 8002e1a:	028a      	lsls	r2, r1, #10
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e24:	2200      	movs	r2, #0
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	61fa      	str	r2, [r7, #28]
 8002e2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e2e:	f7fd fa3f 	bl	80002b0 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4613      	mov	r3, r2
 8002e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0f1b      	lsrs	r3, r3, #28
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e5a:	e003      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3798      	adds	r7, #152	; 0x98
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	017d7840 	.word	0x017d7840

08002e80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e28d      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 8083 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea0:	4b94      	ldr	r3, [pc, #592]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 030c 	and.w	r3, r3, #12
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d019      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eac:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eb8:	4b8e      	ldr	r3, [pc, #568]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ec6:	4b8b      	ldr	r3, [pc, #556]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d112      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	4b84      	ldr	r3, [pc, #528]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05b      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x124>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d157      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e25a      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d106      	bne.n	8002f10 <HAL_RCC_OscConfig+0x90>
 8002f02:	4b7c      	ldr	r3, [pc, #496]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a7b      	ldr	r2, [pc, #492]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xcc>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xb4>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a72      	ldr	r2, [pc, #456]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xcc>
 8002f34:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6e      	ldr	r2, [pc, #440]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b6c      	ldr	r3, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6b      	ldr	r2, [pc, #428]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe f8d6 	bl	8001104 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f8d2 	bl	8001104 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e21f      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xdc>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f8c2 	bl	8001104 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe f8be 	bl	8001104 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e20b      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b57      	ldr	r3, [pc, #348]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x104>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d06f      	beq.n	8003092 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fb2:	4b50      	ldr	r3, [pc, #320]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d017      	beq.n	8002fee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fbe:	4b4d      	ldr	r3, [pc, #308]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d105      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x186>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1d3      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x278>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fe f86b 	bl	8001104 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fe f867 	bl	8001104 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1b4      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x278>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f84a 	bl	8001104 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fe f846 	bl	8001104 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e193      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fe f82a 	bl	8001104 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fe f826 	bl	8001104 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e173      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x234>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x27c>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030da:	f7fe f813 	bl	8001104 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fe f80f 	bl	8001104 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e15c      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b8a      	ldr	r3, [pc, #552]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b83      	ldr	r3, [pc, #524]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7f      	ldr	r3, [pc, #508]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a7e      	ldr	r2, [pc, #504]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b7c      	ldr	r3, [pc, #496]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b79      	ldr	r3, [pc, #484]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b76      	ldr	r3, [pc, #472]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fd ffcf 	bl	8001104 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fd ffcb 	bl	8001104 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e118      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6c      	ldr	r3, [pc, #432]	; (8003330 <HAL_RCC_OscConfig+0x4b0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x31e>
 8003190:	4b66      	ldr	r3, [pc, #408]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x358>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x340>
 80031a6:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5d      	ldr	r2, [pc, #372]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x358>
 80031c0:	4b5a      	ldr	r3, [pc, #360]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a59      	ldr	r2, [pc, #356]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b57      	ldr	r3, [pc, #348]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a56      	ldr	r2, [pc, #344]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd ff90 	bl	8001104 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd ff8c 	bl	8001104 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0d7      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b4b      	ldr	r3, [pc, #300]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x368>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd ff7a 	bl	8001104 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd ff76 	bl	8001104 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0c1      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80ad 	beq.w	80033ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d060      	beq.n	8003320 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d145      	bne.n	80032f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fd ff4a 	bl	8001104 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fd ff46 	bl	8001104 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e093      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032bc:	071b      	lsls	r3, r3, #28
 80032be:	491b      	ldr	r1, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd ff1b 	bl	8001104 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d2:	f7fd ff17 	bl	8001104 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e064      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x452>
 80032f0:	e05c      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x4b4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fd ff04 	bl	8001104 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003300:	f7fd ff00 	bl	8001104 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e04d      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x4ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x480>
 800331e:	e045      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e040      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
 800332c:	40023800 	.word	0x40023800
 8003330:	40007000 	.word	0x40007000
 8003334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <HAL_RCC_OscConfig+0x538>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d030      	beq.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003350:	429a      	cmp	r2, r3
 8003352:	d129      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d122      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003368:	4013      	ands	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003370:	4293      	cmp	r3, r2
 8003372:	d119      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	3b01      	subs	r3, #1
 8003382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d10f      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	429a      	cmp	r2, r3
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e03f      	b.n	800344e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fd7a 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fe1d 	bl	8004040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b08a      	sub	sp, #40	; 0x28
 800345a:	af02      	add	r7, sp, #8
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	d17c      	bne.n	8003570 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_UART_Transmit+0x2c>
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e075      	b.n	8003572 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_UART_Transmit+0x3e>
 8003490:	2302      	movs	r3, #2
 8003492:	e06e      	b.n	8003572 <HAL_UART_Transmit+0x11c>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	; 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034aa:	f7fd fe2b 	bl	8001104 <HAL_GetTick>
 80034ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	88fa      	ldrh	r2, [r7, #6]
 80034b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	88fa      	ldrh	r2, [r7, #6]
 80034ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d108      	bne.n	80034d8 <HAL_UART_Transmit+0x82>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e003      	b.n	80034e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034e8:	e02a      	b.n	8003540 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fb9b 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e036      	b.n	8003572 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10b      	bne.n	8003522 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003518:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	3302      	adds	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e007      	b.n	8003532 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1cf      	bne.n	80034ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	2140      	movs	r1, #64	; 0x40
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fb6b 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e006      	b.n	8003572 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	; 0x28
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b20      	cmp	r3, #32
 8003598:	f040 808c 	bne.w	80036b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_UART_Receive+0x2e>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e084      	b.n	80036b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Receive+0x40>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e07d      	b.n	80036b6 <HAL_UART_Receive+0x13c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2222      	movs	r2, #34	; 0x22
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035d6:	f7fd fd95 	bl	8001104 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d108      	bne.n	8003604 <HAL_UART_Receive+0x8a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e003      	b.n	800360c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003614:	e043      	b.n	800369e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2200      	movs	r2, #0
 800361e:	2120      	movs	r1, #32
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fb05 	bl	8003c30 <UART_WaitOnFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e042      	b.n	80036b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	b29a      	uxth	r2, r3
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	3302      	adds	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	e01f      	b.n	8003690 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d007      	beq.n	800366a <HAL_UART_Receive+0xf0>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_UART_Receive+0xfe>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e008      	b.n	800368a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3301      	adds	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1b6      	bne.n	8003616 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0ba      	sub	sp, #232	; 0xe8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80036fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10f      	bne.n	8003726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_UART_IRQHandler+0x66>
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fbd3 	bl	8003eca <UART_Receive_IT>
      return;
 8003724:	e256      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 80de 	beq.w	80038ec <HAL_UART_IRQHandler+0x22c>
 8003730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800373c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003740:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80d1 	beq.w	80038ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800374a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <HAL_UART_IRQHandler+0xae>
 8003756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
 800377a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_UART_IRQHandler+0xf6>
 800379e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d011      	beq.n	80037e6 <HAL_UART_IRQHandler+0x126>
 80037c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0208 	orr.w	r2, r3, #8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 81ed 	beq.w	8003bca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_UART_IRQHandler+0x14e>
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb5e 	bl	8003eca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <HAL_UART_IRQHandler+0x17a>
 8003832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04f      	beq.n	80038da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa66 	bl	8003d0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d141      	bne.n	80038d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3314      	adds	r3, #20
 8003854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800387a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800387e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1d9      	bne.n	800384e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4a7d      	ldr	r2, [pc, #500]	; (8003a9c <HAL_UART_IRQHandler+0x3dc>)
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd fed5 	bl	800165e <HAL_DMA_Abort_IT>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038c4:	4610      	mov	r0, r2
 80038c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e00e      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f99a 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	e00a      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f996 	bl	8003c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e006      	b.n	80038e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f992 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038e6:	e170      	b.n	8003bca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	bf00      	nop
    return;
 80038ea:	e16e      	b.n	8003bca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	f040 814a 	bne.w	8003b8a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8143 	beq.w	8003b8a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 813c 	beq.w	8003b8a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	f040 80b4 	bne.w	8003aa0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8140 	beq.w	8003bce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003956:	429a      	cmp	r2, r3
 8003958:	f080 8139 	bcs.w	8003bce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003962:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800396e:	f000 8088 	beq.w	8003a82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800398c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800399e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1d9      	bne.n	8003972 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3314      	adds	r3, #20
 80039de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80039f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e1      	bne.n	80039be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3314      	adds	r3, #20
 8003a1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e3      	bne.n	80039fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a52:	f023 0310 	bic.w	r3, r3, #16
 8003a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a64:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e3      	bne.n	8003a40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd fd7e 	bl	800157e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f8c0 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a98:	e099      	b.n	8003bce <HAL_UART_IRQHandler+0x50e>
 8003a9a:	bf00      	nop
 8003a9c:	08003dd3 	.word	0x08003dd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 808b 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8086 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003aea:	647a      	str	r2, [r7, #68]	; 0x44
 8003aec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e3      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b22:	633a      	str	r2, [r7, #48]	; 0x30
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e3      	bne.n	8003afe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b68:	61fa      	str	r2, [r7, #28]
 8003b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	617b      	str	r3, [r7, #20]
   return(result);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e3      	bne.n	8003b44 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b80:	4619      	mov	r1, r3
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f848 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b88:	e023      	b.n	8003bd2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_UART_IRQHandler+0x4ea>
 8003b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f929 	bl	8003dfa <UART_Transmit_IT>
    return;
 8003ba8:	e014      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x514>
 8003bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f969 	bl	8003e9a <UART_EndTransmit_IT>
    return;
 8003bc8:	e004      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
    return;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bd2:	bf00      	nop
  }
}
 8003bd4:	37e8      	adds	r7, #232	; 0xe8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop

08003bdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b090      	sub	sp, #64	; 0x40
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c40:	e050      	b.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c48:	d04c      	beq.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c50:	f7fd fa58 	bl	8001104 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d241      	bcs.n	8003ce4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	330c      	adds	r3, #12
 8003c7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c80:	637a      	str	r2, [r7, #52]	; 0x34
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e5      	bne.n	8003c60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb4:	623a      	str	r2, [r7, #32]
 8003cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	69f9      	ldr	r1, [r7, #28]
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e00f      	b.n	8003d04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	4013      	ands	r3, r2
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d09f      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3740      	adds	r7, #64	; 0x40
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b095      	sub	sp, #84	; 0x54
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d34:	643a      	str	r2, [r7, #64]	; 0x40
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d3c:	e841 2300 	strex	r3, r2, [r1]
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e5      	bne.n	8003d14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3314      	adds	r3, #20
 8003d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e5      	bne.n	8003d48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d119      	bne.n	8003db8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 0310 	bic.w	r3, r3, #16
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da4:	61ba      	str	r2, [r7, #24]
 8003da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6979      	ldr	r1, [r7, #20]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	613b      	str	r3, [r7, #16]
   return(result);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dc6:	bf00      	nop
 8003dc8:	3754      	adds	r7, #84	; 0x54
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f7ff ff09 	bl	8003c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b21      	cmp	r3, #33	; 0x21
 8003e0c:	d13e      	bne.n	8003e8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e16:	d114      	bne.n	8003e42 <UART_Transmit_IT+0x48>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d110      	bne.n	8003e42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	1c9a      	adds	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]
 8003e40:	e008      	b.n	8003e54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6211      	str	r1, [r2, #32]
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4619      	mov	r1, r3
 8003e62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10f      	bne.n	8003e88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fe8e 	bl	8003bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08c      	sub	sp, #48	; 0x30
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b22      	cmp	r3, #34	; 0x22
 8003edc:	f040 80ab 	bne.w	8004036 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d117      	bne.n	8003f1a <UART_Receive_IT+0x50>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d113      	bne.n	8003f1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	1c9a      	adds	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
 8003f18:	e026      	b.n	8003f68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2c:	d007      	beq.n	8003f3e <UART_Receive_IT+0x74>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10a      	bne.n	8003f4c <UART_Receive_IT+0x82>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e008      	b.n	8003f5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d15a      	bne.n	8004032 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0220 	bic.w	r2, r2, #32
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695a      	ldr	r2, [r3, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0201 	bic.w	r2, r2, #1
 8003faa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d135      	bne.n	8004028 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	623a      	str	r2, [r7, #32]
 8003fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	69f9      	ldr	r1, [r7, #28]
 8003fe8:	6a3a      	ldr	r2, [r7, #32]
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d10a      	bne.n	800401a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004004:	2300      	movs	r3, #0
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fdf9 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
 8004026:	e002      	b.n	800402e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fde1 	bl	8003bf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e002      	b.n	8004038 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	e000      	b.n	8004038 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
  }
}
 8004038:	4618      	mov	r0, r3
 800403a:	3730      	adds	r7, #48	; 0x30
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b0c0      	sub	sp, #256	; 0x100
 8004046:	af00      	add	r7, sp, #0
 8004048:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	ea40 0301 	orr.w	r3, r0, r1
 8004068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004098:	f021 010c 	bic.w	r1, r1, #12
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040a6:	430b      	orrs	r3, r1
 80040a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ba:	6999      	ldr	r1, [r3, #24]
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	ea40 0301 	orr.w	r3, r0, r1
 80040c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b8f      	ldr	r3, [pc, #572]	; (800430c <UART_SetConfig+0x2cc>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d005      	beq.n	80040e0 <UART_SetConfig+0xa0>
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b8d      	ldr	r3, [pc, #564]	; (8004310 <UART_SetConfig+0x2d0>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	d104      	bne.n	80040ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fd10 	bl	8002b04 <HAL_RCC_GetPCLK2Freq>
 80040e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040e8:	e003      	b.n	80040f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ea:	f7fe fcf7 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80040ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fc:	f040 810c 	bne.w	8004318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800410a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800410e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	1891      	adds	r1, r2, r2
 8004118:	65b9      	str	r1, [r7, #88]	; 0x58
 800411a:	415b      	adcs	r3, r3
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004122:	4621      	mov	r1, r4
 8004124:	eb12 0801 	adds.w	r8, r2, r1
 8004128:	4629      	mov	r1, r5
 800412a:	eb43 0901 	adc.w	r9, r3, r1
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004142:	4690      	mov	r8, r2
 8004144:	4699      	mov	r9, r3
 8004146:	4623      	mov	r3, r4
 8004148:	eb18 0303 	adds.w	r3, r8, r3
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004150:	462b      	mov	r3, r5
 8004152:	eb49 0303 	adc.w	r3, r9, r3
 8004156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004166:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800416a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800416e:	460b      	mov	r3, r1
 8004170:	18db      	adds	r3, r3, r3
 8004172:	653b      	str	r3, [r7, #80]	; 0x50
 8004174:	4613      	mov	r3, r2
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
 800417c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004184:	f7fc f894 	bl	80002b0 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4b61      	ldr	r3, [pc, #388]	; (8004314 <UART_SetConfig+0x2d4>)
 800418e:	fba3 2302 	umull	r2, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	011c      	lsls	r4, r3, #4
 8004196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80041b0:	415b      	adcs	r3, r3
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041b8:	4641      	mov	r1, r8
 80041ba:	eb12 0a01 	adds.w	sl, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0b01 	adc.w	fp, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d8:	4692      	mov	sl, r2
 80041da:	469b      	mov	fp, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	eb1a 0303 	adds.w	r3, sl, r3
 80041e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041e6:	464b      	mov	r3, r9
 80041e8:	eb4b 0303 	adc.w	r3, fp, r3
 80041ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	647b      	str	r3, [r7, #68]	; 0x44
 8004212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800421a:	f7fc f849 	bl	80002b0 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4611      	mov	r1, r2
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <UART_SetConfig+0x2d4>)
 8004226:	fba3 2301 	umull	r2, r3, r3, r1
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2264      	movs	r2, #100	; 0x64
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	1acb      	subs	r3, r1, r3
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800423a:	4b36      	ldr	r3, [pc, #216]	; (8004314 <UART_SetConfig+0x2d4>)
 800423c:	fba3 2302 	umull	r2, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004248:	441c      	add	r4, r3
 800424a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004254:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	63b9      	str	r1, [r7, #56]	; 0x38
 8004264:	415b      	adcs	r3, r3
 8004266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6339      	str	r1, [r7, #48]	; 0x30
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a0:	464b      	mov	r3, r9
 80042a2:	460a      	mov	r2, r1
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042c0:	460b      	mov	r3, r1
 80042c2:	18db      	adds	r3, r3, r3
 80042c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c6:	4613      	mov	r3, r2
 80042c8:	eb42 0303 	adc.w	r3, r2, r3
 80042cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042d6:	f7fb ffeb 	bl	80002b0 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <UART_SetConfig+0x2d4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	; (8004314 <UART_SetConfig+0x2d4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 0207 	and.w	r2, r3, #7
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4422      	add	r2, r4
 8004306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004308:	e105      	b.n	8004516 <UART_SetConfig+0x4d6>
 800430a:	bf00      	nop
 800430c:	40011000 	.word	0x40011000
 8004310:	40011400 	.word	0x40011400
 8004314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004322:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	1891      	adds	r1, r2, r2
 8004330:	6239      	str	r1, [r7, #32]
 8004332:	415b      	adcs	r3, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
 8004336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433a:	4641      	mov	r1, r8
 800433c:	1854      	adds	r4, r2, r1
 800433e:	4649      	mov	r1, r9
 8004340:	eb43 0501 	adc.w	r5, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	00eb      	lsls	r3, r5, #3
 800434e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004352:	00e2      	lsls	r2, r4, #3
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	4643      	mov	r3, r8
 800435a:	18e3      	adds	r3, r4, r3
 800435c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004360:	464b      	mov	r3, r9
 8004362:	eb45 0303 	adc.w	r3, r5, r3
 8004366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004376:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004386:	4629      	mov	r1, r5
 8004388:	008b      	lsls	r3, r1, #2
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004390:	4621      	mov	r1, r4
 8004392:	008a      	lsls	r2, r1, #2
 8004394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004398:	f7fb ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4b60      	ldr	r3, [pc, #384]	; (8004524 <UART_SetConfig+0x4e4>)
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	011c      	lsls	r4, r3, #4
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	61b9      	str	r1, [r7, #24]
 80043c4:	415b      	adcs	r3, r3
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043cc:	4641      	mov	r1, r8
 80043ce:	1851      	adds	r1, r2, r1
 80043d0:	6139      	str	r1, [r7, #16]
 80043d2:	4649      	mov	r1, r9
 80043d4:	414b      	adcs	r3, r1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e4:	4659      	mov	r1, fp
 80043e6:	00cb      	lsls	r3, r1, #3
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ee:	4651      	mov	r1, sl
 80043f0:	00ca      	lsls	r2, r1, #3
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	4642      	mov	r2, r8
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004400:	464b      	mov	r3, r9
 8004402:	460a      	mov	r2, r1
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	67bb      	str	r3, [r7, #120]	; 0x78
 8004416:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004424:	4649      	mov	r1, r9
 8004426:	008b      	lsls	r3, r1, #2
 8004428:	4641      	mov	r1, r8
 800442a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442e:	4641      	mov	r1, r8
 8004430:	008a      	lsls	r2, r1, #2
 8004432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004436:	f7fb ff3b 	bl	80002b0 <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4b39      	ldr	r3, [pc, #228]	; (8004524 <UART_SetConfig+0x4e4>)
 8004440:	fba3 1302 	umull	r1, r3, r3, r2
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	2164      	movs	r1, #100	; 0x64
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	3332      	adds	r3, #50	; 0x32
 8004452:	4a34      	ldr	r2, [pc, #208]	; (8004524 <UART_SetConfig+0x4e4>)
 8004454:	fba2 2303 	umull	r2, r3, r2, r3
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800445e:	441c      	add	r4, r3
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	673b      	str	r3, [r7, #112]	; 0x70
 8004468:	677a      	str	r2, [r7, #116]	; 0x74
 800446a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800446e:	4642      	mov	r2, r8
 8004470:	464b      	mov	r3, r9
 8004472:	1891      	adds	r1, r2, r2
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	415b      	adcs	r3, r3
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800447e:	4641      	mov	r1, r8
 8004480:	1851      	adds	r1, r2, r1
 8004482:	6039      	str	r1, [r7, #0]
 8004484:	4649      	mov	r1, r9
 8004486:	414b      	adcs	r3, r1
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004496:	4659      	mov	r1, fp
 8004498:	00cb      	lsls	r3, r1, #3
 800449a:	4651      	mov	r1, sl
 800449c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a0:	4651      	mov	r1, sl
 80044a2:	00ca      	lsls	r2, r1, #3
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	4603      	mov	r3, r0
 80044aa:	4642      	mov	r2, r8
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b0:	464b      	mov	r3, r9
 80044b2:	460a      	mov	r2, r1
 80044b4:	eb42 0303 	adc.w	r3, r2, r3
 80044b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	663b      	str	r3, [r7, #96]	; 0x60
 80044c4:	667a      	str	r2, [r7, #100]	; 0x64
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044d2:	4649      	mov	r1, r9
 80044d4:	008b      	lsls	r3, r1, #2
 80044d6:	4641      	mov	r1, r8
 80044d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044dc:	4641      	mov	r1, r8
 80044de:	008a      	lsls	r2, r1, #2
 80044e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044e4:	f7fb fee4 	bl	80002b0 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <UART_SetConfig+0x4e4>)
 80044ee:	fba3 1302 	umull	r1, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2164      	movs	r1, #100	; 0x64
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <UART_SetConfig+0x4e4>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 020f 	and.w	r2, r3, #15
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4422      	add	r2, r4
 8004514:	609a      	str	r2, [r3, #8]
}
 8004516:	bf00      	nop
 8004518:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	51eb851f 	.word	0x51eb851f

08004528 <__errno>:
 8004528:	4b01      	ldr	r3, [pc, #4]	; (8004530 <__errno+0x8>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c

08004534 <__libc_init_array>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4d0d      	ldr	r5, [pc, #52]	; (800456c <__libc_init_array+0x38>)
 8004538:	4c0d      	ldr	r4, [pc, #52]	; (8004570 <__libc_init_array+0x3c>)
 800453a:	1b64      	subs	r4, r4, r5
 800453c:	10a4      	asrs	r4, r4, #2
 800453e:	2600      	movs	r6, #0
 8004540:	42a6      	cmp	r6, r4
 8004542:	d109      	bne.n	8004558 <__libc_init_array+0x24>
 8004544:	4d0b      	ldr	r5, [pc, #44]	; (8004574 <__libc_init_array+0x40>)
 8004546:	4c0c      	ldr	r4, [pc, #48]	; (8004578 <__libc_init_array+0x44>)
 8004548:	f001 f834 	bl	80055b4 <_init>
 800454c:	1b64      	subs	r4, r4, r5
 800454e:	10a4      	asrs	r4, r4, #2
 8004550:	2600      	movs	r6, #0
 8004552:	42a6      	cmp	r6, r4
 8004554:	d105      	bne.n	8004562 <__libc_init_array+0x2e>
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	f855 3b04 	ldr.w	r3, [r5], #4
 800455c:	4798      	blx	r3
 800455e:	3601      	adds	r6, #1
 8004560:	e7ee      	b.n	8004540 <__libc_init_array+0xc>
 8004562:	f855 3b04 	ldr.w	r3, [r5], #4
 8004566:	4798      	blx	r3
 8004568:	3601      	adds	r6, #1
 800456a:	e7f2      	b.n	8004552 <__libc_init_array+0x1e>
 800456c:	080057ac 	.word	0x080057ac
 8004570:	080057ac 	.word	0x080057ac
 8004574:	080057ac 	.word	0x080057ac
 8004578:	080057b0 	.word	0x080057b0

0800457c <malloc>:
 800457c:	4b02      	ldr	r3, [pc, #8]	; (8004588 <malloc+0xc>)
 800457e:	4601      	mov	r1, r0
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f000 b87f 	b.w	8004684 <_malloc_r>
 8004586:	bf00      	nop
 8004588:	2000000c 	.word	0x2000000c

0800458c <free>:
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <free+0xc>)
 800458e:	4601      	mov	r1, r0
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	f000 b80b 	b.w	80045ac <_free_r>
 8004596:	bf00      	nop
 8004598:	2000000c 	.word	0x2000000c

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <_free_r>:
 80045ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ae:	2900      	cmp	r1, #0
 80045b0:	d044      	beq.n	800463c <_free_r+0x90>
 80045b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045b6:	9001      	str	r0, [sp, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f1a1 0404 	sub.w	r4, r1, #4
 80045be:	bfb8      	it	lt
 80045c0:	18e4      	addlt	r4, r4, r3
 80045c2:	f000 fc51 	bl	8004e68 <__malloc_lock>
 80045c6:	4a1e      	ldr	r2, [pc, #120]	; (8004640 <_free_r+0x94>)
 80045c8:	9801      	ldr	r0, [sp, #4]
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	b933      	cbnz	r3, 80045dc <_free_r+0x30>
 80045ce:	6063      	str	r3, [r4, #4]
 80045d0:	6014      	str	r4, [r2, #0]
 80045d2:	b003      	add	sp, #12
 80045d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045d8:	f000 bc4c 	b.w	8004e74 <__malloc_unlock>
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d908      	bls.n	80045f2 <_free_r+0x46>
 80045e0:	6825      	ldr	r5, [r4, #0]
 80045e2:	1961      	adds	r1, r4, r5
 80045e4:	428b      	cmp	r3, r1
 80045e6:	bf01      	itttt	eq
 80045e8:	6819      	ldreq	r1, [r3, #0]
 80045ea:	685b      	ldreq	r3, [r3, #4]
 80045ec:	1949      	addeq	r1, r1, r5
 80045ee:	6021      	streq	r1, [r4, #0]
 80045f0:	e7ed      	b.n	80045ce <_free_r+0x22>
 80045f2:	461a      	mov	r2, r3
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	b10b      	cbz	r3, 80045fc <_free_r+0x50>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d9fa      	bls.n	80045f2 <_free_r+0x46>
 80045fc:	6811      	ldr	r1, [r2, #0]
 80045fe:	1855      	adds	r5, r2, r1
 8004600:	42a5      	cmp	r5, r4
 8004602:	d10b      	bne.n	800461c <_free_r+0x70>
 8004604:	6824      	ldr	r4, [r4, #0]
 8004606:	4421      	add	r1, r4
 8004608:	1854      	adds	r4, r2, r1
 800460a:	42a3      	cmp	r3, r4
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	d1e0      	bne.n	80045d2 <_free_r+0x26>
 8004610:	681c      	ldr	r4, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	6053      	str	r3, [r2, #4]
 8004616:	4421      	add	r1, r4
 8004618:	6011      	str	r1, [r2, #0]
 800461a:	e7da      	b.n	80045d2 <_free_r+0x26>
 800461c:	d902      	bls.n	8004624 <_free_r+0x78>
 800461e:	230c      	movs	r3, #12
 8004620:	6003      	str	r3, [r0, #0]
 8004622:	e7d6      	b.n	80045d2 <_free_r+0x26>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	1961      	adds	r1, r4, r5
 8004628:	428b      	cmp	r3, r1
 800462a:	bf04      	itt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	6063      	str	r3, [r4, #4]
 8004632:	bf04      	itt	eq
 8004634:	1949      	addeq	r1, r1, r5
 8004636:	6021      	streq	r1, [r4, #0]
 8004638:	6054      	str	r4, [r2, #4]
 800463a:	e7ca      	b.n	80045d2 <_free_r+0x26>
 800463c:	b003      	add	sp, #12
 800463e:	bd30      	pop	{r4, r5, pc}
 8004640:	200001a8 	.word	0x200001a8

08004644 <sbrk_aligned>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4e0e      	ldr	r6, [pc, #56]	; (8004680 <sbrk_aligned+0x3c>)
 8004648:	460c      	mov	r4, r1
 800464a:	6831      	ldr	r1, [r6, #0]
 800464c:	4605      	mov	r5, r0
 800464e:	b911      	cbnz	r1, 8004656 <sbrk_aligned+0x12>
 8004650:	f000 f91a 	bl	8004888 <_sbrk_r>
 8004654:	6030      	str	r0, [r6, #0]
 8004656:	4621      	mov	r1, r4
 8004658:	4628      	mov	r0, r5
 800465a:	f000 f915 	bl	8004888 <_sbrk_r>
 800465e:	1c43      	adds	r3, r0, #1
 8004660:	d00a      	beq.n	8004678 <sbrk_aligned+0x34>
 8004662:	1cc4      	adds	r4, r0, #3
 8004664:	f024 0403 	bic.w	r4, r4, #3
 8004668:	42a0      	cmp	r0, r4
 800466a:	d007      	beq.n	800467c <sbrk_aligned+0x38>
 800466c:	1a21      	subs	r1, r4, r0
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f90a 	bl	8004888 <_sbrk_r>
 8004674:	3001      	adds	r0, #1
 8004676:	d101      	bne.n	800467c <sbrk_aligned+0x38>
 8004678:	f04f 34ff 	mov.w	r4, #4294967295
 800467c:	4620      	mov	r0, r4
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	200001ac 	.word	0x200001ac

08004684 <_malloc_r>:
 8004684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004688:	1ccd      	adds	r5, r1, #3
 800468a:	f025 0503 	bic.w	r5, r5, #3
 800468e:	3508      	adds	r5, #8
 8004690:	2d0c      	cmp	r5, #12
 8004692:	bf38      	it	cc
 8004694:	250c      	movcc	r5, #12
 8004696:	2d00      	cmp	r5, #0
 8004698:	4607      	mov	r7, r0
 800469a:	db01      	blt.n	80046a0 <_malloc_r+0x1c>
 800469c:	42a9      	cmp	r1, r5
 800469e:	d905      	bls.n	80046ac <_malloc_r+0x28>
 80046a0:	230c      	movs	r3, #12
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	2600      	movs	r6, #0
 80046a6:	4630      	mov	r0, r6
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046ac:	4e2e      	ldr	r6, [pc, #184]	; (8004768 <_malloc_r+0xe4>)
 80046ae:	f000 fbdb 	bl	8004e68 <__malloc_lock>
 80046b2:	6833      	ldr	r3, [r6, #0]
 80046b4:	461c      	mov	r4, r3
 80046b6:	bb34      	cbnz	r4, 8004706 <_malloc_r+0x82>
 80046b8:	4629      	mov	r1, r5
 80046ba:	4638      	mov	r0, r7
 80046bc:	f7ff ffc2 	bl	8004644 <sbrk_aligned>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	4604      	mov	r4, r0
 80046c4:	d14d      	bne.n	8004762 <_malloc_r+0xde>
 80046c6:	6834      	ldr	r4, [r6, #0]
 80046c8:	4626      	mov	r6, r4
 80046ca:	2e00      	cmp	r6, #0
 80046cc:	d140      	bne.n	8004750 <_malloc_r+0xcc>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	4631      	mov	r1, r6
 80046d2:	4638      	mov	r0, r7
 80046d4:	eb04 0803 	add.w	r8, r4, r3
 80046d8:	f000 f8d6 	bl	8004888 <_sbrk_r>
 80046dc:	4580      	cmp	r8, r0
 80046de:	d13a      	bne.n	8004756 <_malloc_r+0xd2>
 80046e0:	6821      	ldr	r1, [r4, #0]
 80046e2:	3503      	adds	r5, #3
 80046e4:	1a6d      	subs	r5, r5, r1
 80046e6:	f025 0503 	bic.w	r5, r5, #3
 80046ea:	3508      	adds	r5, #8
 80046ec:	2d0c      	cmp	r5, #12
 80046ee:	bf38      	it	cc
 80046f0:	250c      	movcc	r5, #12
 80046f2:	4629      	mov	r1, r5
 80046f4:	4638      	mov	r0, r7
 80046f6:	f7ff ffa5 	bl	8004644 <sbrk_aligned>
 80046fa:	3001      	adds	r0, #1
 80046fc:	d02b      	beq.n	8004756 <_malloc_r+0xd2>
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	442b      	add	r3, r5
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	e00e      	b.n	8004724 <_malloc_r+0xa0>
 8004706:	6822      	ldr	r2, [r4, #0]
 8004708:	1b52      	subs	r2, r2, r5
 800470a:	d41e      	bmi.n	800474a <_malloc_r+0xc6>
 800470c:	2a0b      	cmp	r2, #11
 800470e:	d916      	bls.n	800473e <_malloc_r+0xba>
 8004710:	1961      	adds	r1, r4, r5
 8004712:	42a3      	cmp	r3, r4
 8004714:	6025      	str	r5, [r4, #0]
 8004716:	bf18      	it	ne
 8004718:	6059      	strne	r1, [r3, #4]
 800471a:	6863      	ldr	r3, [r4, #4]
 800471c:	bf08      	it	eq
 800471e:	6031      	streq	r1, [r6, #0]
 8004720:	5162      	str	r2, [r4, r5]
 8004722:	604b      	str	r3, [r1, #4]
 8004724:	4638      	mov	r0, r7
 8004726:	f104 060b 	add.w	r6, r4, #11
 800472a:	f000 fba3 	bl	8004e74 <__malloc_unlock>
 800472e:	f026 0607 	bic.w	r6, r6, #7
 8004732:	1d23      	adds	r3, r4, #4
 8004734:	1af2      	subs	r2, r6, r3
 8004736:	d0b6      	beq.n	80046a6 <_malloc_r+0x22>
 8004738:	1b9b      	subs	r3, r3, r6
 800473a:	50a3      	str	r3, [r4, r2]
 800473c:	e7b3      	b.n	80046a6 <_malloc_r+0x22>
 800473e:	6862      	ldr	r2, [r4, #4]
 8004740:	42a3      	cmp	r3, r4
 8004742:	bf0c      	ite	eq
 8004744:	6032      	streq	r2, [r6, #0]
 8004746:	605a      	strne	r2, [r3, #4]
 8004748:	e7ec      	b.n	8004724 <_malloc_r+0xa0>
 800474a:	4623      	mov	r3, r4
 800474c:	6864      	ldr	r4, [r4, #4]
 800474e:	e7b2      	b.n	80046b6 <_malloc_r+0x32>
 8004750:	4634      	mov	r4, r6
 8004752:	6876      	ldr	r6, [r6, #4]
 8004754:	e7b9      	b.n	80046ca <_malloc_r+0x46>
 8004756:	230c      	movs	r3, #12
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	4638      	mov	r0, r7
 800475c:	f000 fb8a 	bl	8004e74 <__malloc_unlock>
 8004760:	e7a1      	b.n	80046a6 <_malloc_r+0x22>
 8004762:	6025      	str	r5, [r4, #0]
 8004764:	e7de      	b.n	8004724 <_malloc_r+0xa0>
 8004766:	bf00      	nop
 8004768:	200001a8 	.word	0x200001a8

0800476c <iprintf>:
 800476c:	b40f      	push	{r0, r1, r2, r3}
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <iprintf+0x2c>)
 8004770:	b513      	push	{r0, r1, r4, lr}
 8004772:	681c      	ldr	r4, [r3, #0]
 8004774:	b124      	cbz	r4, 8004780 <iprintf+0x14>
 8004776:	69a3      	ldr	r3, [r4, #24]
 8004778:	b913      	cbnz	r3, 8004780 <iprintf+0x14>
 800477a:	4620      	mov	r0, r4
 800477c:	f000 fa6e 	bl	8004c5c <__sinit>
 8004780:	ab05      	add	r3, sp, #20
 8004782:	9a04      	ldr	r2, [sp, #16]
 8004784:	68a1      	ldr	r1, [r4, #8]
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fba3 	bl	8004ed4 <_vfiprintf_r>
 800478e:	b002      	add	sp, #8
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004794:	b004      	add	sp, #16
 8004796:	4770      	bx	lr
 8004798:	2000000c 	.word	0x2000000c

0800479c <_puts_r>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	460e      	mov	r6, r1
 80047a0:	4605      	mov	r5, r0
 80047a2:	b118      	cbz	r0, 80047ac <_puts_r+0x10>
 80047a4:	6983      	ldr	r3, [r0, #24]
 80047a6:	b90b      	cbnz	r3, 80047ac <_puts_r+0x10>
 80047a8:	f000 fa58 	bl	8004c5c <__sinit>
 80047ac:	69ab      	ldr	r3, [r5, #24]
 80047ae:	68ac      	ldr	r4, [r5, #8]
 80047b0:	b913      	cbnz	r3, 80047b8 <_puts_r+0x1c>
 80047b2:	4628      	mov	r0, r5
 80047b4:	f000 fa52 	bl	8004c5c <__sinit>
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <_puts_r+0xd0>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d120      	bne.n	8004800 <_puts_r+0x64>
 80047be:	686c      	ldr	r4, [r5, #4]
 80047c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x36>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0598      	lsls	r0, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x36>
 80047cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ce:	f000 fae3 	bl	8004d98 <__retarget_lock_acquire_recursive>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0719      	lsls	r1, r3, #28
 80047d6:	d51d      	bpl.n	8004814 <_puts_r+0x78>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b1db      	cbz	r3, 8004814 <_puts_r+0x78>
 80047dc:	3e01      	subs	r6, #1
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	bb39      	cbnz	r1, 800483a <_puts_r+0x9e>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da38      	bge.n	8004860 <_puts_r+0xc4>
 80047ee:	4622      	mov	r2, r4
 80047f0:	210a      	movs	r1, #10
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f858 	bl	80048a8 <__swbuf_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d011      	beq.n	8004820 <_puts_r+0x84>
 80047fc:	250a      	movs	r5, #10
 80047fe:	e011      	b.n	8004824 <_puts_r+0x88>
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <_puts_r+0xd4>)
 8004802:	429c      	cmp	r4, r3
 8004804:	d101      	bne.n	800480a <_puts_r+0x6e>
 8004806:	68ac      	ldr	r4, [r5, #8]
 8004808:	e7da      	b.n	80047c0 <_puts_r+0x24>
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <_puts_r+0xd8>)
 800480c:	429c      	cmp	r4, r3
 800480e:	bf08      	it	eq
 8004810:	68ec      	ldreq	r4, [r5, #12]
 8004812:	e7d5      	b.n	80047c0 <_puts_r+0x24>
 8004814:	4621      	mov	r1, r4
 8004816:	4628      	mov	r0, r5
 8004818:	f000 f898 	bl	800494c <__swsetup_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0dd      	beq.n	80047dc <_puts_r+0x40>
 8004820:	f04f 35ff 	mov.w	r5, #4294967295
 8004824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004826:	07da      	lsls	r2, r3, #31
 8004828:	d405      	bmi.n	8004836 <_puts_r+0x9a>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	059b      	lsls	r3, r3, #22
 800482e:	d402      	bmi.n	8004836 <_puts_r+0x9a>
 8004830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004832:	f000 fab2 	bl	8004d9a <__retarget_lock_release_recursive>
 8004836:	4628      	mov	r0, r5
 8004838:	bd70      	pop	{r4, r5, r6, pc}
 800483a:	2b00      	cmp	r3, #0
 800483c:	da04      	bge.n	8004848 <_puts_r+0xac>
 800483e:	69a2      	ldr	r2, [r4, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	dc06      	bgt.n	8004852 <_puts_r+0xb6>
 8004844:	290a      	cmp	r1, #10
 8004846:	d004      	beq.n	8004852 <_puts_r+0xb6>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	7019      	strb	r1, [r3, #0]
 8004850:	e7c5      	b.n	80047de <_puts_r+0x42>
 8004852:	4622      	mov	r2, r4
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f827 	bl	80048a8 <__swbuf_r>
 800485a:	3001      	adds	r0, #1
 800485c:	d1bf      	bne.n	80047de <_puts_r+0x42>
 800485e:	e7df      	b.n	8004820 <_puts_r+0x84>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	250a      	movs	r5, #10
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	701d      	strb	r5, [r3, #0]
 800486a:	e7db      	b.n	8004824 <_puts_r+0x88>
 800486c:	08005730 	.word	0x08005730
 8004870:	08005750 	.word	0x08005750
 8004874:	08005710 	.word	0x08005710

08004878 <puts>:
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <puts+0xc>)
 800487a:	4601      	mov	r1, r0
 800487c:	6818      	ldr	r0, [r3, #0]
 800487e:	f7ff bf8d 	b.w	800479c <_puts_r>
 8004882:	bf00      	nop
 8004884:	2000000c 	.word	0x2000000c

08004888 <_sbrk_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	4d06      	ldr	r5, [pc, #24]	; (80048a4 <_sbrk_r+0x1c>)
 800488c:	2300      	movs	r3, #0
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc fa86 	bl	8000da4 <_sbrk>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_sbrk_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_sbrk_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	200001b4 	.word	0x200001b4

080048a8 <__swbuf_r>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	460e      	mov	r6, r1
 80048ac:	4614      	mov	r4, r2
 80048ae:	4605      	mov	r5, r0
 80048b0:	b118      	cbz	r0, 80048ba <__swbuf_r+0x12>
 80048b2:	6983      	ldr	r3, [r0, #24]
 80048b4:	b90b      	cbnz	r3, 80048ba <__swbuf_r+0x12>
 80048b6:	f000 f9d1 	bl	8004c5c <__sinit>
 80048ba:	4b21      	ldr	r3, [pc, #132]	; (8004940 <__swbuf_r+0x98>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	d12b      	bne.n	8004918 <__swbuf_r+0x70>
 80048c0:	686c      	ldr	r4, [r5, #4]
 80048c2:	69a3      	ldr	r3, [r4, #24]
 80048c4:	60a3      	str	r3, [r4, #8]
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	071a      	lsls	r2, r3, #28
 80048ca:	d52f      	bpl.n	800492c <__swbuf_r+0x84>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	b36b      	cbz	r3, 800492c <__swbuf_r+0x84>
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	1ac0      	subs	r0, r0, r3
 80048d6:	6963      	ldr	r3, [r4, #20]
 80048d8:	b2f6      	uxtb	r6, r6
 80048da:	4283      	cmp	r3, r0
 80048dc:	4637      	mov	r7, r6
 80048de:	dc04      	bgt.n	80048ea <__swbuf_r+0x42>
 80048e0:	4621      	mov	r1, r4
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f926 	bl	8004b34 <_fflush_r>
 80048e8:	bb30      	cbnz	r0, 8004938 <__swbuf_r+0x90>
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	6022      	str	r2, [r4, #0]
 80048f6:	701e      	strb	r6, [r3, #0]
 80048f8:	6963      	ldr	r3, [r4, #20]
 80048fa:	3001      	adds	r0, #1
 80048fc:	4283      	cmp	r3, r0
 80048fe:	d004      	beq.n	800490a <__swbuf_r+0x62>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	07db      	lsls	r3, r3, #31
 8004904:	d506      	bpl.n	8004914 <__swbuf_r+0x6c>
 8004906:	2e0a      	cmp	r6, #10
 8004908:	d104      	bne.n	8004914 <__swbuf_r+0x6c>
 800490a:	4621      	mov	r1, r4
 800490c:	4628      	mov	r0, r5
 800490e:	f000 f911 	bl	8004b34 <_fflush_r>
 8004912:	b988      	cbnz	r0, 8004938 <__swbuf_r+0x90>
 8004914:	4638      	mov	r0, r7
 8004916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <__swbuf_r+0x9c>)
 800491a:	429c      	cmp	r4, r3
 800491c:	d101      	bne.n	8004922 <__swbuf_r+0x7a>
 800491e:	68ac      	ldr	r4, [r5, #8]
 8004920:	e7cf      	b.n	80048c2 <__swbuf_r+0x1a>
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <__swbuf_r+0xa0>)
 8004924:	429c      	cmp	r4, r3
 8004926:	bf08      	it	eq
 8004928:	68ec      	ldreq	r4, [r5, #12]
 800492a:	e7ca      	b.n	80048c2 <__swbuf_r+0x1a>
 800492c:	4621      	mov	r1, r4
 800492e:	4628      	mov	r0, r5
 8004930:	f000 f80c 	bl	800494c <__swsetup_r>
 8004934:	2800      	cmp	r0, #0
 8004936:	d0cb      	beq.n	80048d0 <__swbuf_r+0x28>
 8004938:	f04f 37ff 	mov.w	r7, #4294967295
 800493c:	e7ea      	b.n	8004914 <__swbuf_r+0x6c>
 800493e:	bf00      	nop
 8004940:	08005730 	.word	0x08005730
 8004944:	08005750 	.word	0x08005750
 8004948:	08005710 	.word	0x08005710

0800494c <__swsetup_r>:
 800494c:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <__swsetup_r+0xcc>)
 800494e:	b570      	push	{r4, r5, r6, lr}
 8004950:	681d      	ldr	r5, [r3, #0]
 8004952:	4606      	mov	r6, r0
 8004954:	460c      	mov	r4, r1
 8004956:	b125      	cbz	r5, 8004962 <__swsetup_r+0x16>
 8004958:	69ab      	ldr	r3, [r5, #24]
 800495a:	b913      	cbnz	r3, 8004962 <__swsetup_r+0x16>
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f97d 	bl	8004c5c <__sinit>
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <__swsetup_r+0xd0>)
 8004964:	429c      	cmp	r4, r3
 8004966:	d10f      	bne.n	8004988 <__swsetup_r+0x3c>
 8004968:	686c      	ldr	r4, [r5, #4]
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004970:	0719      	lsls	r1, r3, #28
 8004972:	d42c      	bmi.n	80049ce <__swsetup_r+0x82>
 8004974:	06dd      	lsls	r5, r3, #27
 8004976:	d411      	bmi.n	800499c <__swsetup_r+0x50>
 8004978:	2309      	movs	r3, #9
 800497a:	6033      	str	r3, [r6, #0]
 800497c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	f04f 30ff 	mov.w	r0, #4294967295
 8004986:	e03e      	b.n	8004a06 <__swsetup_r+0xba>
 8004988:	4b25      	ldr	r3, [pc, #148]	; (8004a20 <__swsetup_r+0xd4>)
 800498a:	429c      	cmp	r4, r3
 800498c:	d101      	bne.n	8004992 <__swsetup_r+0x46>
 800498e:	68ac      	ldr	r4, [r5, #8]
 8004990:	e7eb      	b.n	800496a <__swsetup_r+0x1e>
 8004992:	4b24      	ldr	r3, [pc, #144]	; (8004a24 <__swsetup_r+0xd8>)
 8004994:	429c      	cmp	r4, r3
 8004996:	bf08      	it	eq
 8004998:	68ec      	ldreq	r4, [r5, #12]
 800499a:	e7e6      	b.n	800496a <__swsetup_r+0x1e>
 800499c:	0758      	lsls	r0, r3, #29
 800499e:	d512      	bpl.n	80049c6 <__swsetup_r+0x7a>
 80049a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a2:	b141      	cbz	r1, 80049b6 <__swsetup_r+0x6a>
 80049a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a8:	4299      	cmp	r1, r3
 80049aa:	d002      	beq.n	80049b2 <__swsetup_r+0x66>
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff fdfd 	bl	80045ac <_free_r>
 80049b2:	2300      	movs	r3, #0
 80049b4:	6363      	str	r3, [r4, #52]	; 0x34
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	2300      	movs	r3, #0
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f043 0308 	orr.w	r3, r3, #8
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	b94b      	cbnz	r3, 80049e6 <__swsetup_r+0x9a>
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049dc:	d003      	beq.n	80049e6 <__swsetup_r+0x9a>
 80049de:	4621      	mov	r1, r4
 80049e0:	4630      	mov	r0, r6
 80049e2:	f000 fa01 	bl	8004de8 <__smakebuf_r>
 80049e6:	89a0      	ldrh	r0, [r4, #12]
 80049e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ec:	f010 0301 	ands.w	r3, r0, #1
 80049f0:	d00a      	beq.n	8004a08 <__swsetup_r+0xbc>
 80049f2:	2300      	movs	r3, #0
 80049f4:	60a3      	str	r3, [r4, #8]
 80049f6:	6963      	ldr	r3, [r4, #20]
 80049f8:	425b      	negs	r3, r3
 80049fa:	61a3      	str	r3, [r4, #24]
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	b943      	cbnz	r3, 8004a12 <__swsetup_r+0xc6>
 8004a00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a04:	d1ba      	bne.n	800497c <__swsetup_r+0x30>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	0781      	lsls	r1, r0, #30
 8004a0a:	bf58      	it	pl
 8004a0c:	6963      	ldrpl	r3, [r4, #20]
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	e7f4      	b.n	80049fc <__swsetup_r+0xb0>
 8004a12:	2000      	movs	r0, #0
 8004a14:	e7f7      	b.n	8004a06 <__swsetup_r+0xba>
 8004a16:	bf00      	nop
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	08005730 	.word	0x08005730
 8004a20:	08005750 	.word	0x08005750
 8004a24:	08005710 	.word	0x08005710

08004a28 <__sflush_r>:
 8004a28:	898a      	ldrh	r2, [r1, #12]
 8004a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2e:	4605      	mov	r5, r0
 8004a30:	0710      	lsls	r0, r2, #28
 8004a32:	460c      	mov	r4, r1
 8004a34:	d458      	bmi.n	8004ae8 <__sflush_r+0xc0>
 8004a36:	684b      	ldr	r3, [r1, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	dc05      	bgt.n	8004a48 <__sflush_r+0x20>
 8004a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	dc02      	bgt.n	8004a48 <__sflush_r+0x20>
 8004a42:	2000      	movs	r0, #0
 8004a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d0f9      	beq.n	8004a42 <__sflush_r+0x1a>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a54:	682f      	ldr	r7, [r5, #0]
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	d032      	beq.n	8004ac0 <__sflush_r+0x98>
 8004a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	075a      	lsls	r2, r3, #29
 8004a60:	d505      	bpl.n	8004a6e <__sflush_r+0x46>
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	1ac0      	subs	r0, r0, r3
 8004a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a68:	b10b      	cbz	r3, 8004a6e <__sflush_r+0x46>
 8004a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a6c:	1ac0      	subs	r0, r0, r3
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4602      	mov	r2, r0
 8004a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a74:	6a21      	ldr	r1, [r4, #32]
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b0      	blx	r6
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	d106      	bne.n	8004a8e <__sflush_r+0x66>
 8004a80:	6829      	ldr	r1, [r5, #0]
 8004a82:	291d      	cmp	r1, #29
 8004a84:	d82c      	bhi.n	8004ae0 <__sflush_r+0xb8>
 8004a86:	4a2a      	ldr	r2, [pc, #168]	; (8004b30 <__sflush_r+0x108>)
 8004a88:	40ca      	lsrs	r2, r1
 8004a8a:	07d6      	lsls	r6, r2, #31
 8004a8c:	d528      	bpl.n	8004ae0 <__sflush_r+0xb8>
 8004a8e:	2200      	movs	r2, #0
 8004a90:	6062      	str	r2, [r4, #4]
 8004a92:	04d9      	lsls	r1, r3, #19
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	6022      	str	r2, [r4, #0]
 8004a98:	d504      	bpl.n	8004aa4 <__sflush_r+0x7c>
 8004a9a:	1c42      	adds	r2, r0, #1
 8004a9c:	d101      	bne.n	8004aa2 <__sflush_r+0x7a>
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	b903      	cbnz	r3, 8004aa4 <__sflush_r+0x7c>
 8004aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8004aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa6:	602f      	str	r7, [r5, #0]
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	d0ca      	beq.n	8004a42 <__sflush_r+0x1a>
 8004aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	d002      	beq.n	8004aba <__sflush_r+0x92>
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f7ff fd79 	bl	80045ac <_free_r>
 8004aba:	2000      	movs	r0, #0
 8004abc:	6360      	str	r0, [r4, #52]	; 0x34
 8004abe:	e7c1      	b.n	8004a44 <__sflush_r+0x1c>
 8004ac0:	6a21      	ldr	r1, [r4, #32]
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b0      	blx	r6
 8004ac8:	1c41      	adds	r1, r0, #1
 8004aca:	d1c7      	bne.n	8004a5c <__sflush_r+0x34>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0c4      	beq.n	8004a5c <__sflush_r+0x34>
 8004ad2:	2b1d      	cmp	r3, #29
 8004ad4:	d001      	beq.n	8004ada <__sflush_r+0xb2>
 8004ad6:	2b16      	cmp	r3, #22
 8004ad8:	d101      	bne.n	8004ade <__sflush_r+0xb6>
 8004ada:	602f      	str	r7, [r5, #0]
 8004adc:	e7b1      	b.n	8004a42 <__sflush_r+0x1a>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	e7ad      	b.n	8004a44 <__sflush_r+0x1c>
 8004ae8:	690f      	ldr	r7, [r1, #16]
 8004aea:	2f00      	cmp	r7, #0
 8004aec:	d0a9      	beq.n	8004a42 <__sflush_r+0x1a>
 8004aee:	0793      	lsls	r3, r2, #30
 8004af0:	680e      	ldr	r6, [r1, #0]
 8004af2:	bf08      	it	eq
 8004af4:	694b      	ldreq	r3, [r1, #20]
 8004af6:	600f      	str	r7, [r1, #0]
 8004af8:	bf18      	it	ne
 8004afa:	2300      	movne	r3, #0
 8004afc:	eba6 0807 	sub.w	r8, r6, r7
 8004b00:	608b      	str	r3, [r1, #8]
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	dd9c      	ble.n	8004a42 <__sflush_r+0x1a>
 8004b08:	6a21      	ldr	r1, [r4, #32]
 8004b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b0c:	4643      	mov	r3, r8
 8004b0e:	463a      	mov	r2, r7
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b0      	blx	r6
 8004b14:	2800      	cmp	r0, #0
 8004b16:	dc06      	bgt.n	8004b26 <__sflush_r+0xfe>
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1e:	81a3      	strh	r3, [r4, #12]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	e78e      	b.n	8004a44 <__sflush_r+0x1c>
 8004b26:	4407      	add	r7, r0
 8004b28:	eba8 0800 	sub.w	r8, r8, r0
 8004b2c:	e7e9      	b.n	8004b02 <__sflush_r+0xda>
 8004b2e:	bf00      	nop
 8004b30:	20400001 	.word	0x20400001

08004b34 <_fflush_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	4605      	mov	r5, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	b913      	cbnz	r3, 8004b44 <_fflush_r+0x10>
 8004b3e:	2500      	movs	r5, #0
 8004b40:	4628      	mov	r0, r5
 8004b42:	bd38      	pop	{r3, r4, r5, pc}
 8004b44:	b118      	cbz	r0, 8004b4e <_fflush_r+0x1a>
 8004b46:	6983      	ldr	r3, [r0, #24]
 8004b48:	b90b      	cbnz	r3, 8004b4e <_fflush_r+0x1a>
 8004b4a:	f000 f887 	bl	8004c5c <__sinit>
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <_fflush_r+0x6c>)
 8004b50:	429c      	cmp	r4, r3
 8004b52:	d11b      	bne.n	8004b8c <_fflush_r+0x58>
 8004b54:	686c      	ldr	r4, [r5, #4]
 8004b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ef      	beq.n	8004b3e <_fflush_r+0xa>
 8004b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b60:	07d0      	lsls	r0, r2, #31
 8004b62:	d404      	bmi.n	8004b6e <_fflush_r+0x3a>
 8004b64:	0599      	lsls	r1, r3, #22
 8004b66:	d402      	bmi.n	8004b6e <_fflush_r+0x3a>
 8004b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b6a:	f000 f915 	bl	8004d98 <__retarget_lock_acquire_recursive>
 8004b6e:	4628      	mov	r0, r5
 8004b70:	4621      	mov	r1, r4
 8004b72:	f7ff ff59 	bl	8004a28 <__sflush_r>
 8004b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b78:	07da      	lsls	r2, r3, #31
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	d4e0      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b7e:	89a3      	ldrh	r3, [r4, #12]
 8004b80:	059b      	lsls	r3, r3, #22
 8004b82:	d4dd      	bmi.n	8004b40 <_fflush_r+0xc>
 8004b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b86:	f000 f908 	bl	8004d9a <__retarget_lock_release_recursive>
 8004b8a:	e7d9      	b.n	8004b40 <_fflush_r+0xc>
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <_fflush_r+0x70>)
 8004b8e:	429c      	cmp	r4, r3
 8004b90:	d101      	bne.n	8004b96 <_fflush_r+0x62>
 8004b92:	68ac      	ldr	r4, [r5, #8]
 8004b94:	e7df      	b.n	8004b56 <_fflush_r+0x22>
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <_fflush_r+0x74>)
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	bf08      	it	eq
 8004b9c:	68ec      	ldreq	r4, [r5, #12]
 8004b9e:	e7da      	b.n	8004b56 <_fflush_r+0x22>
 8004ba0:	08005730 	.word	0x08005730
 8004ba4:	08005750 	.word	0x08005750
 8004ba8:	08005710 	.word	0x08005710

08004bac <std>:
 8004bac:	2300      	movs	r3, #0
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8004bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bba:	6083      	str	r3, [r0, #8]
 8004bbc:	8181      	strh	r1, [r0, #12]
 8004bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8004bc0:	81c2      	strh	r2, [r0, #14]
 8004bc2:	6183      	str	r3, [r0, #24]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	305c      	adds	r0, #92	; 0x5c
 8004bca:	f7ff fce7 	bl	800459c <memset>
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <std+0x38>)
 8004bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <std+0x3c>)
 8004bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <std+0x40>)
 8004bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bda:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <std+0x44>)
 8004bdc:	6224      	str	r4, [r4, #32]
 8004bde:	6323      	str	r3, [r4, #48]	; 0x30
 8004be0:	bd10      	pop	{r4, pc}
 8004be2:	bf00      	nop
 8004be4:	0800545d 	.word	0x0800545d
 8004be8:	0800547f 	.word	0x0800547f
 8004bec:	080054b7 	.word	0x080054b7
 8004bf0:	080054db 	.word	0x080054db

08004bf4 <_cleanup_r>:
 8004bf4:	4901      	ldr	r1, [pc, #4]	; (8004bfc <_cleanup_r+0x8>)
 8004bf6:	f000 b8af 	b.w	8004d58 <_fwalk_reent>
 8004bfa:	bf00      	nop
 8004bfc:	08004b35 	.word	0x08004b35

08004c00 <__sfmoreglue>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	2268      	movs	r2, #104	; 0x68
 8004c04:	1e4d      	subs	r5, r1, #1
 8004c06:	4355      	muls	r5, r2
 8004c08:	460e      	mov	r6, r1
 8004c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c0e:	f7ff fd39 	bl	8004684 <_malloc_r>
 8004c12:	4604      	mov	r4, r0
 8004c14:	b140      	cbz	r0, 8004c28 <__sfmoreglue+0x28>
 8004c16:	2100      	movs	r1, #0
 8004c18:	e9c0 1600 	strd	r1, r6, [r0]
 8004c1c:	300c      	adds	r0, #12
 8004c1e:	60a0      	str	r0, [r4, #8]
 8004c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c24:	f7ff fcba 	bl	800459c <memset>
 8004c28:	4620      	mov	r0, r4
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}

08004c2c <__sfp_lock_acquire>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__sfp_lock_acquire+0x8>)
 8004c2e:	f000 b8b3 	b.w	8004d98 <__retarget_lock_acquire_recursive>
 8004c32:	bf00      	nop
 8004c34:	200001b1 	.word	0x200001b1

08004c38 <__sfp_lock_release>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__sfp_lock_release+0x8>)
 8004c3a:	f000 b8ae 	b.w	8004d9a <__retarget_lock_release_recursive>
 8004c3e:	bf00      	nop
 8004c40:	200001b1 	.word	0x200001b1

08004c44 <__sinit_lock_acquire>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__sinit_lock_acquire+0x8>)
 8004c46:	f000 b8a7 	b.w	8004d98 <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	200001b2 	.word	0x200001b2

08004c50 <__sinit_lock_release>:
 8004c50:	4801      	ldr	r0, [pc, #4]	; (8004c58 <__sinit_lock_release+0x8>)
 8004c52:	f000 b8a2 	b.w	8004d9a <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	200001b2 	.word	0x200001b2

08004c5c <__sinit>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	f7ff fff0 	bl	8004c44 <__sinit_lock_acquire>
 8004c64:	69a3      	ldr	r3, [r4, #24]
 8004c66:	b11b      	cbz	r3, 8004c70 <__sinit+0x14>
 8004c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c6c:	f7ff bff0 	b.w	8004c50 <__sinit_lock_release>
 8004c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c74:	6523      	str	r3, [r4, #80]	; 0x50
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <__sinit+0x68>)
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <__sinit+0x6c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	bf04      	itt	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	61a3      	streq	r3, [r4, #24]
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f820 	bl	8004ccc <__sfp>
 8004c8c:	6060      	str	r0, [r4, #4]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f81c 	bl	8004ccc <__sfp>
 8004c94:	60a0      	str	r0, [r4, #8]
 8004c96:	4620      	mov	r0, r4
 8004c98:	f000 f818 	bl	8004ccc <__sfp>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	60e0      	str	r0, [r4, #12]
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	6860      	ldr	r0, [r4, #4]
 8004ca4:	f7ff ff82 	bl	8004bac <std>
 8004ca8:	68a0      	ldr	r0, [r4, #8]
 8004caa:	2201      	movs	r2, #1
 8004cac:	2109      	movs	r1, #9
 8004cae:	f7ff ff7d 	bl	8004bac <std>
 8004cb2:	68e0      	ldr	r0, [r4, #12]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	2112      	movs	r1, #18
 8004cb8:	f7ff ff78 	bl	8004bac <std>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	61a3      	str	r3, [r4, #24]
 8004cc0:	e7d2      	b.n	8004c68 <__sinit+0xc>
 8004cc2:	bf00      	nop
 8004cc4:	0800570c 	.word	0x0800570c
 8004cc8:	08004bf5 	.word	0x08004bf5

08004ccc <__sfp>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	4607      	mov	r7, r0
 8004cd0:	f7ff ffac 	bl	8004c2c <__sfp_lock_acquire>
 8004cd4:	4b1e      	ldr	r3, [pc, #120]	; (8004d50 <__sfp+0x84>)
 8004cd6:	681e      	ldr	r6, [r3, #0]
 8004cd8:	69b3      	ldr	r3, [r6, #24]
 8004cda:	b913      	cbnz	r3, 8004ce2 <__sfp+0x16>
 8004cdc:	4630      	mov	r0, r6
 8004cde:	f7ff ffbd 	bl	8004c5c <__sinit>
 8004ce2:	3648      	adds	r6, #72	; 0x48
 8004ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	d503      	bpl.n	8004cf4 <__sfp+0x28>
 8004cec:	6833      	ldr	r3, [r6, #0]
 8004cee:	b30b      	cbz	r3, 8004d34 <__sfp+0x68>
 8004cf0:	6836      	ldr	r6, [r6, #0]
 8004cf2:	e7f7      	b.n	8004ce4 <__sfp+0x18>
 8004cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cf8:	b9d5      	cbnz	r5, 8004d30 <__sfp+0x64>
 8004cfa:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <__sfp+0x88>)
 8004cfc:	60e3      	str	r3, [r4, #12]
 8004cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d02:	6665      	str	r5, [r4, #100]	; 0x64
 8004d04:	f000 f847 	bl	8004d96 <__retarget_lock_init_recursive>
 8004d08:	f7ff ff96 	bl	8004c38 <__sfp_lock_release>
 8004d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d14:	6025      	str	r5, [r4, #0]
 8004d16:	61a5      	str	r5, [r4, #24]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d20:	f7ff fc3c 	bl	800459c <memset>
 8004d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d30:	3468      	adds	r4, #104	; 0x68
 8004d32:	e7d9      	b.n	8004ce8 <__sfp+0x1c>
 8004d34:	2104      	movs	r1, #4
 8004d36:	4638      	mov	r0, r7
 8004d38:	f7ff ff62 	bl	8004c00 <__sfmoreglue>
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	6030      	str	r0, [r6, #0]
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d1d5      	bne.n	8004cf0 <__sfp+0x24>
 8004d44:	f7ff ff78 	bl	8004c38 <__sfp_lock_release>
 8004d48:	230c      	movs	r3, #12
 8004d4a:	603b      	str	r3, [r7, #0]
 8004d4c:	e7ee      	b.n	8004d2c <__sfp+0x60>
 8004d4e:	bf00      	nop
 8004d50:	0800570c 	.word	0x0800570c
 8004d54:	ffff0001 	.word	0xffff0001

08004d58 <_fwalk_reent>:
 8004d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	4688      	mov	r8, r1
 8004d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d64:	2700      	movs	r7, #0
 8004d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d6e:	d505      	bpl.n	8004d7c <_fwalk_reent+0x24>
 8004d70:	6824      	ldr	r4, [r4, #0]
 8004d72:	2c00      	cmp	r4, #0
 8004d74:	d1f7      	bne.n	8004d66 <_fwalk_reent+0xe>
 8004d76:	4638      	mov	r0, r7
 8004d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7c:	89ab      	ldrh	r3, [r5, #12]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d907      	bls.n	8004d92 <_fwalk_reent+0x3a>
 8004d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d86:	3301      	adds	r3, #1
 8004d88:	d003      	beq.n	8004d92 <_fwalk_reent+0x3a>
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	47c0      	blx	r8
 8004d90:	4307      	orrs	r7, r0
 8004d92:	3568      	adds	r5, #104	; 0x68
 8004d94:	e7e9      	b.n	8004d6a <_fwalk_reent+0x12>

08004d96 <__retarget_lock_init_recursive>:
 8004d96:	4770      	bx	lr

08004d98 <__retarget_lock_acquire_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <__retarget_lock_release_recursive>:
 8004d9a:	4770      	bx	lr

08004d9c <__swhatbuf_r>:
 8004d9c:	b570      	push	{r4, r5, r6, lr}
 8004d9e:	460e      	mov	r6, r1
 8004da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da4:	2900      	cmp	r1, #0
 8004da6:	b096      	sub	sp, #88	; 0x58
 8004da8:	4614      	mov	r4, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	da08      	bge.n	8004dc0 <__swhatbuf_r+0x24>
 8004dae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	061a      	lsls	r2, r3, #24
 8004db8:	d410      	bmi.n	8004ddc <__swhatbuf_r+0x40>
 8004dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dbe:	e00e      	b.n	8004dde <__swhatbuf_r+0x42>
 8004dc0:	466a      	mov	r2, sp
 8004dc2:	f000 fbb1 	bl	8005528 <_fstat_r>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	dbf1      	blt.n	8004dae <__swhatbuf_r+0x12>
 8004dca:	9a01      	ldr	r2, [sp, #4]
 8004dcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dd4:	425a      	negs	r2, r3
 8004dd6:	415a      	adcs	r2, r3
 8004dd8:	602a      	str	r2, [r5, #0]
 8004dda:	e7ee      	b.n	8004dba <__swhatbuf_r+0x1e>
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	2000      	movs	r0, #0
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	b016      	add	sp, #88	; 0x58
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004de8 <__smakebuf_r>:
 8004de8:	898b      	ldrh	r3, [r1, #12]
 8004dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dec:	079d      	lsls	r5, r3, #30
 8004dee:	4606      	mov	r6, r0
 8004df0:	460c      	mov	r4, r1
 8004df2:	d507      	bpl.n	8004e04 <__smakebuf_r+0x1c>
 8004df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	6123      	str	r3, [r4, #16]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	6163      	str	r3, [r4, #20]
 8004e00:	b002      	add	sp, #8
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	ab01      	add	r3, sp, #4
 8004e06:	466a      	mov	r2, sp
 8004e08:	f7ff ffc8 	bl	8004d9c <__swhatbuf_r>
 8004e0c:	9900      	ldr	r1, [sp, #0]
 8004e0e:	4605      	mov	r5, r0
 8004e10:	4630      	mov	r0, r6
 8004e12:	f7ff fc37 	bl	8004684 <_malloc_r>
 8004e16:	b948      	cbnz	r0, 8004e2c <__smakebuf_r+0x44>
 8004e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e1c:	059a      	lsls	r2, r3, #22
 8004e1e:	d4ef      	bmi.n	8004e00 <__smakebuf_r+0x18>
 8004e20:	f023 0303 	bic.w	r3, r3, #3
 8004e24:	f043 0302 	orr.w	r3, r3, #2
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e7e3      	b.n	8004df4 <__smakebuf_r+0xc>
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <__smakebuf_r+0x7c>)
 8004e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	6020      	str	r0, [r4, #0]
 8004e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	6163      	str	r3, [r4, #20]
 8004e3e:	9b01      	ldr	r3, [sp, #4]
 8004e40:	6120      	str	r0, [r4, #16]
 8004e42:	b15b      	cbz	r3, 8004e5c <__smakebuf_r+0x74>
 8004e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 fb7f 	bl	800554c <_isatty_r>
 8004e4e:	b128      	cbz	r0, 8004e5c <__smakebuf_r+0x74>
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	81a3      	strh	r3, [r4, #12]
 8004e5c:	89a0      	ldrh	r0, [r4, #12]
 8004e5e:	4305      	orrs	r5, r0
 8004e60:	81a5      	strh	r5, [r4, #12]
 8004e62:	e7cd      	b.n	8004e00 <__smakebuf_r+0x18>
 8004e64:	08004bf5 	.word	0x08004bf5

08004e68 <__malloc_lock>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__malloc_lock+0x8>)
 8004e6a:	f7ff bf95 	b.w	8004d98 <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	200001b0 	.word	0x200001b0

08004e74 <__malloc_unlock>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__malloc_unlock+0x8>)
 8004e76:	f7ff bf90 	b.w	8004d9a <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	200001b0 	.word	0x200001b0

08004e80 <__sfputc_r>:
 8004e80:	6893      	ldr	r3, [r2, #8]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	b410      	push	{r4}
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	da08      	bge.n	8004e9e <__sfputc_r+0x1e>
 8004e8c:	6994      	ldr	r4, [r2, #24]
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	db01      	blt.n	8004e96 <__sfputc_r+0x16>
 8004e92:	290a      	cmp	r1, #10
 8004e94:	d103      	bne.n	8004e9e <__sfputc_r+0x1e>
 8004e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9a:	f7ff bd05 	b.w	80048a8 <__swbuf_r>
 8004e9e:	6813      	ldr	r3, [r2, #0]
 8004ea0:	1c58      	adds	r0, r3, #1
 8004ea2:	6010      	str	r0, [r2, #0]
 8004ea4:	7019      	strb	r1, [r3, #0]
 8004ea6:	4608      	mov	r0, r1
 8004ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <__sfputs_r>:
 8004eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	460f      	mov	r7, r1
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	18d5      	adds	r5, r2, r3
 8004eb8:	42ac      	cmp	r4, r5
 8004eba:	d101      	bne.n	8004ec0 <__sfputs_r+0x12>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e007      	b.n	8004ed0 <__sfputs_r+0x22>
 8004ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f7ff ffda 	bl	8004e80 <__sfputc_r>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d1f3      	bne.n	8004eb8 <__sfputs_r+0xa>
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ed4 <_vfiprintf_r>:
 8004ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	460d      	mov	r5, r1
 8004eda:	b09d      	sub	sp, #116	; 0x74
 8004edc:	4614      	mov	r4, r2
 8004ede:	4698      	mov	r8, r3
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	b118      	cbz	r0, 8004eec <_vfiprintf_r+0x18>
 8004ee4:	6983      	ldr	r3, [r0, #24]
 8004ee6:	b90b      	cbnz	r3, 8004eec <_vfiprintf_r+0x18>
 8004ee8:	f7ff feb8 	bl	8004c5c <__sinit>
 8004eec:	4b89      	ldr	r3, [pc, #548]	; (8005114 <_vfiprintf_r+0x240>)
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	d11b      	bne.n	8004f2a <_vfiprintf_r+0x56>
 8004ef2:	6875      	ldr	r5, [r6, #4]
 8004ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef6:	07d9      	lsls	r1, r3, #31
 8004ef8:	d405      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004efa:	89ab      	ldrh	r3, [r5, #12]
 8004efc:	059a      	lsls	r2, r3, #22
 8004efe:	d402      	bmi.n	8004f06 <_vfiprintf_r+0x32>
 8004f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f02:	f7ff ff49 	bl	8004d98 <__retarget_lock_acquire_recursive>
 8004f06:	89ab      	ldrh	r3, [r5, #12]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	d501      	bpl.n	8004f10 <_vfiprintf_r+0x3c>
 8004f0c:	692b      	ldr	r3, [r5, #16]
 8004f0e:	b9eb      	cbnz	r3, 8004f4c <_vfiprintf_r+0x78>
 8004f10:	4629      	mov	r1, r5
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff fd1a 	bl	800494c <__swsetup_r>
 8004f18:	b1c0      	cbz	r0, 8004f4c <_vfiprintf_r+0x78>
 8004f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f1c:	07dc      	lsls	r4, r3, #31
 8004f1e:	d50e      	bpl.n	8004f3e <_vfiprintf_r+0x6a>
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	b01d      	add	sp, #116	; 0x74
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <_vfiprintf_r+0x244>)
 8004f2c:	429d      	cmp	r5, r3
 8004f2e:	d101      	bne.n	8004f34 <_vfiprintf_r+0x60>
 8004f30:	68b5      	ldr	r5, [r6, #8]
 8004f32:	e7df      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f34:	4b79      	ldr	r3, [pc, #484]	; (800511c <_vfiprintf_r+0x248>)
 8004f36:	429d      	cmp	r5, r3
 8004f38:	bf08      	it	eq
 8004f3a:	68f5      	ldreq	r5, [r6, #12]
 8004f3c:	e7da      	b.n	8004ef4 <_vfiprintf_r+0x20>
 8004f3e:	89ab      	ldrh	r3, [r5, #12]
 8004f40:	0598      	lsls	r0, r3, #22
 8004f42:	d4ed      	bmi.n	8004f20 <_vfiprintf_r+0x4c>
 8004f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f46:	f7ff ff28 	bl	8004d9a <__retarget_lock_release_recursive>
 8004f4a:	e7e9      	b.n	8004f20 <_vfiprintf_r+0x4c>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f50:	2320      	movs	r3, #32
 8004f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005120 <_vfiprintf_r+0x24c>
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f64:	f04f 0901 	mov.w	r9, #1
 8004f68:	4623      	mov	r3, r4
 8004f6a:	469a      	mov	sl, r3
 8004f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f70:	b10a      	cbz	r2, 8004f76 <_vfiprintf_r+0xa2>
 8004f72:	2a25      	cmp	r2, #37	; 0x25
 8004f74:	d1f9      	bne.n	8004f6a <_vfiprintf_r+0x96>
 8004f76:	ebba 0b04 	subs.w	fp, sl, r4
 8004f7a:	d00b      	beq.n	8004f94 <_vfiprintf_r+0xc0>
 8004f7c:	465b      	mov	r3, fp
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	4630      	mov	r0, r6
 8004f84:	f7ff ff93 	bl	8004eae <__sfputs_r>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f000 80aa 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f90:	445a      	add	r2, fp
 8004f92:	9209      	str	r2, [sp, #36]	; 0x24
 8004f94:	f89a 3000 	ldrb.w	r3, [sl]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80a2 	beq.w	80050e2 <_vfiprintf_r+0x20e>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	f10a 0a01 	add.w	sl, sl, #1
 8004fac:	9304      	str	r3, [sp, #16]
 8004fae:	9307      	str	r3, [sp, #28]
 8004fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb6:	4654      	mov	r4, sl
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4858      	ldr	r0, [pc, #352]	; (8005120 <_vfiprintf_r+0x24c>)
 8004fc0:	f7fb f926 	bl	8000210 <memchr>
 8004fc4:	9a04      	ldr	r2, [sp, #16]
 8004fc6:	b9d8      	cbnz	r0, 8005000 <_vfiprintf_r+0x12c>
 8004fc8:	06d1      	lsls	r1, r2, #27
 8004fca:	bf44      	itt	mi
 8004fcc:	2320      	movmi	r3, #32
 8004fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd2:	0713      	lsls	r3, r2, #28
 8004fd4:	bf44      	itt	mi
 8004fd6:	232b      	movmi	r3, #43	; 0x2b
 8004fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe2:	d015      	beq.n	8005010 <_vfiprintf_r+0x13c>
 8004fe4:	9a07      	ldr	r2, [sp, #28]
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f04f 0c0a 	mov.w	ip, #10
 8004fee:	4621      	mov	r1, r4
 8004ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff4:	3b30      	subs	r3, #48	; 0x30
 8004ff6:	2b09      	cmp	r3, #9
 8004ff8:	d94e      	bls.n	8005098 <_vfiprintf_r+0x1c4>
 8004ffa:	b1b0      	cbz	r0, 800502a <_vfiprintf_r+0x156>
 8004ffc:	9207      	str	r2, [sp, #28]
 8004ffe:	e014      	b.n	800502a <_vfiprintf_r+0x156>
 8005000:	eba0 0308 	sub.w	r3, r0, r8
 8005004:	fa09 f303 	lsl.w	r3, r9, r3
 8005008:	4313      	orrs	r3, r2
 800500a:	9304      	str	r3, [sp, #16]
 800500c:	46a2      	mov	sl, r4
 800500e:	e7d2      	b.n	8004fb6 <_vfiprintf_r+0xe2>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	1d19      	adds	r1, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9103      	str	r1, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfbb      	ittet	lt
 800501c:	425b      	neglt	r3, r3
 800501e:	f042 0202 	orrlt.w	r2, r2, #2
 8005022:	9307      	strge	r3, [sp, #28]
 8005024:	9307      	strlt	r3, [sp, #28]
 8005026:	bfb8      	it	lt
 8005028:	9204      	strlt	r2, [sp, #16]
 800502a:	7823      	ldrb	r3, [r4, #0]
 800502c:	2b2e      	cmp	r3, #46	; 0x2e
 800502e:	d10c      	bne.n	800504a <_vfiprintf_r+0x176>
 8005030:	7863      	ldrb	r3, [r4, #1]
 8005032:	2b2a      	cmp	r3, #42	; 0x2a
 8005034:	d135      	bne.n	80050a2 <_vfiprintf_r+0x1ce>
 8005036:	9b03      	ldr	r3, [sp, #12]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	9203      	str	r2, [sp, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	f04f 33ff 	movlt.w	r3, #4294967295
 8005046:	3402      	adds	r4, #2
 8005048:	9305      	str	r3, [sp, #20]
 800504a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005130 <_vfiprintf_r+0x25c>
 800504e:	7821      	ldrb	r1, [r4, #0]
 8005050:	2203      	movs	r2, #3
 8005052:	4650      	mov	r0, sl
 8005054:	f7fb f8dc 	bl	8000210 <memchr>
 8005058:	b140      	cbz	r0, 800506c <_vfiprintf_r+0x198>
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	eba0 000a 	sub.w	r0, r0, sl
 8005060:	fa03 f000 	lsl.w	r0, r3, r0
 8005064:	9b04      	ldr	r3, [sp, #16]
 8005066:	4303      	orrs	r3, r0
 8005068:	3401      	adds	r4, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005070:	482c      	ldr	r0, [pc, #176]	; (8005124 <_vfiprintf_r+0x250>)
 8005072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005076:	2206      	movs	r2, #6
 8005078:	f7fb f8ca 	bl	8000210 <memchr>
 800507c:	2800      	cmp	r0, #0
 800507e:	d03f      	beq.n	8005100 <_vfiprintf_r+0x22c>
 8005080:	4b29      	ldr	r3, [pc, #164]	; (8005128 <_vfiprintf_r+0x254>)
 8005082:	bb1b      	cbnz	r3, 80050cc <_vfiprintf_r+0x1f8>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	3307      	adds	r3, #7
 8005088:	f023 0307 	bic.w	r3, r3, #7
 800508c:	3308      	adds	r3, #8
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005092:	443b      	add	r3, r7
 8005094:	9309      	str	r3, [sp, #36]	; 0x24
 8005096:	e767      	b.n	8004f68 <_vfiprintf_r+0x94>
 8005098:	fb0c 3202 	mla	r2, ip, r2, r3
 800509c:	460c      	mov	r4, r1
 800509e:	2001      	movs	r0, #1
 80050a0:	e7a5      	b.n	8004fee <_vfiprintf_r+0x11a>
 80050a2:	2300      	movs	r3, #0
 80050a4:	3401      	adds	r4, #1
 80050a6:	9305      	str	r3, [sp, #20]
 80050a8:	4619      	mov	r1, r3
 80050aa:	f04f 0c0a 	mov.w	ip, #10
 80050ae:	4620      	mov	r0, r4
 80050b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b4:	3a30      	subs	r2, #48	; 0x30
 80050b6:	2a09      	cmp	r2, #9
 80050b8:	d903      	bls.n	80050c2 <_vfiprintf_r+0x1ee>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0c5      	beq.n	800504a <_vfiprintf_r+0x176>
 80050be:	9105      	str	r1, [sp, #20]
 80050c0:	e7c3      	b.n	800504a <_vfiprintf_r+0x176>
 80050c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c6:	4604      	mov	r4, r0
 80050c8:	2301      	movs	r3, #1
 80050ca:	e7f0      	b.n	80050ae <_vfiprintf_r+0x1da>
 80050cc:	ab03      	add	r3, sp, #12
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	462a      	mov	r2, r5
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <_vfiprintf_r+0x258>)
 80050d4:	a904      	add	r1, sp, #16
 80050d6:	4630      	mov	r0, r6
 80050d8:	f3af 8000 	nop.w
 80050dc:	4607      	mov	r7, r0
 80050de:	1c78      	adds	r0, r7, #1
 80050e0:	d1d6      	bne.n	8005090 <_vfiprintf_r+0x1bc>
 80050e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050e4:	07d9      	lsls	r1, r3, #31
 80050e6:	d405      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050e8:	89ab      	ldrh	r3, [r5, #12]
 80050ea:	059a      	lsls	r2, r3, #22
 80050ec:	d402      	bmi.n	80050f4 <_vfiprintf_r+0x220>
 80050ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050f0:	f7ff fe53 	bl	8004d9a <__retarget_lock_release_recursive>
 80050f4:	89ab      	ldrh	r3, [r5, #12]
 80050f6:	065b      	lsls	r3, r3, #25
 80050f8:	f53f af12 	bmi.w	8004f20 <_vfiprintf_r+0x4c>
 80050fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050fe:	e711      	b.n	8004f24 <_vfiprintf_r+0x50>
 8005100:	ab03      	add	r3, sp, #12
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	462a      	mov	r2, r5
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <_vfiprintf_r+0x258>)
 8005108:	a904      	add	r1, sp, #16
 800510a:	4630      	mov	r0, r6
 800510c:	f000 f880 	bl	8005210 <_printf_i>
 8005110:	e7e4      	b.n	80050dc <_vfiprintf_r+0x208>
 8005112:	bf00      	nop
 8005114:	08005730 	.word	0x08005730
 8005118:	08005750 	.word	0x08005750
 800511c:	08005710 	.word	0x08005710
 8005120:	08005770 	.word	0x08005770
 8005124:	0800577a 	.word	0x0800577a
 8005128:	00000000 	.word	0x00000000
 800512c:	08004eaf 	.word	0x08004eaf
 8005130:	08005776 	.word	0x08005776

08005134 <_printf_common>:
 8005134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005138:	4616      	mov	r6, r2
 800513a:	4699      	mov	r9, r3
 800513c:	688a      	ldr	r2, [r1, #8]
 800513e:	690b      	ldr	r3, [r1, #16]
 8005140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005144:	4293      	cmp	r3, r2
 8005146:	bfb8      	it	lt
 8005148:	4613      	movlt	r3, r2
 800514a:	6033      	str	r3, [r6, #0]
 800514c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005150:	4607      	mov	r7, r0
 8005152:	460c      	mov	r4, r1
 8005154:	b10a      	cbz	r2, 800515a <_printf_common+0x26>
 8005156:	3301      	adds	r3, #1
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	0699      	lsls	r1, r3, #26
 800515e:	bf42      	ittt	mi
 8005160:	6833      	ldrmi	r3, [r6, #0]
 8005162:	3302      	addmi	r3, #2
 8005164:	6033      	strmi	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	f015 0506 	ands.w	r5, r5, #6
 800516c:	d106      	bne.n	800517c <_printf_common+0x48>
 800516e:	f104 0a19 	add.w	sl, r4, #25
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	6832      	ldr	r2, [r6, #0]
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	42ab      	cmp	r3, r5
 800517a:	dc26      	bgt.n	80051ca <_printf_common+0x96>
 800517c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005180:	1e13      	subs	r3, r2, #0
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	bf18      	it	ne
 8005186:	2301      	movne	r3, #1
 8005188:	0692      	lsls	r2, r2, #26
 800518a:	d42b      	bmi.n	80051e4 <_printf_common+0xb0>
 800518c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d01e      	beq.n	80051d8 <_printf_common+0xa4>
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	68e5      	ldr	r5, [r4, #12]
 800519e:	6832      	ldr	r2, [r6, #0]
 80051a0:	f003 0306 	and.w	r3, r3, #6
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	bf08      	it	eq
 80051a8:	1aad      	subeq	r5, r5, r2
 80051aa:	68a3      	ldr	r3, [r4, #8]
 80051ac:	6922      	ldr	r2, [r4, #16]
 80051ae:	bf0c      	ite	eq
 80051b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b4:	2500      	movne	r5, #0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bfc4      	itt	gt
 80051ba:	1a9b      	subgt	r3, r3, r2
 80051bc:	18ed      	addgt	r5, r5, r3
 80051be:	2600      	movs	r6, #0
 80051c0:	341a      	adds	r4, #26
 80051c2:	42b5      	cmp	r5, r6
 80051c4:	d11a      	bne.n	80051fc <_printf_common+0xc8>
 80051c6:	2000      	movs	r0, #0
 80051c8:	e008      	b.n	80051dc <_printf_common+0xa8>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4652      	mov	r2, sl
 80051ce:	4649      	mov	r1, r9
 80051d0:	4638      	mov	r0, r7
 80051d2:	47c0      	blx	r8
 80051d4:	3001      	adds	r0, #1
 80051d6:	d103      	bne.n	80051e0 <_printf_common+0xac>
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e0:	3501      	adds	r5, #1
 80051e2:	e7c6      	b.n	8005172 <_printf_common+0x3e>
 80051e4:	18e1      	adds	r1, r4, r3
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ee:	4422      	add	r2, r4
 80051f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051f8:	3302      	adds	r3, #2
 80051fa:	e7c7      	b.n	800518c <_printf_common+0x58>
 80051fc:	2301      	movs	r3, #1
 80051fe:	4622      	mov	r2, r4
 8005200:	4649      	mov	r1, r9
 8005202:	4638      	mov	r0, r7
 8005204:	47c0      	blx	r8
 8005206:	3001      	adds	r0, #1
 8005208:	d0e6      	beq.n	80051d8 <_printf_common+0xa4>
 800520a:	3601      	adds	r6, #1
 800520c:	e7d9      	b.n	80051c2 <_printf_common+0x8e>
	...

08005210 <_printf_i>:
 8005210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005214:	7e0f      	ldrb	r7, [r1, #24]
 8005216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005218:	2f78      	cmp	r7, #120	; 0x78
 800521a:	4691      	mov	r9, r2
 800521c:	4680      	mov	r8, r0
 800521e:	460c      	mov	r4, r1
 8005220:	469a      	mov	sl, r3
 8005222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005226:	d807      	bhi.n	8005238 <_printf_i+0x28>
 8005228:	2f62      	cmp	r7, #98	; 0x62
 800522a:	d80a      	bhi.n	8005242 <_printf_i+0x32>
 800522c:	2f00      	cmp	r7, #0
 800522e:	f000 80d8 	beq.w	80053e2 <_printf_i+0x1d2>
 8005232:	2f58      	cmp	r7, #88	; 0x58
 8005234:	f000 80a3 	beq.w	800537e <_printf_i+0x16e>
 8005238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800523c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005240:	e03a      	b.n	80052b8 <_printf_i+0xa8>
 8005242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005246:	2b15      	cmp	r3, #21
 8005248:	d8f6      	bhi.n	8005238 <_printf_i+0x28>
 800524a:	a101      	add	r1, pc, #4	; (adr r1, 8005250 <_printf_i+0x40>)
 800524c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052bd 	.word	0x080052bd
 8005258:	08005239 	.word	0x08005239
 800525c:	08005239 	.word	0x08005239
 8005260:	08005239 	.word	0x08005239
 8005264:	08005239 	.word	0x08005239
 8005268:	080052bd 	.word	0x080052bd
 800526c:	08005239 	.word	0x08005239
 8005270:	08005239 	.word	0x08005239
 8005274:	08005239 	.word	0x08005239
 8005278:	08005239 	.word	0x08005239
 800527c:	080053c9 	.word	0x080053c9
 8005280:	080052ed 	.word	0x080052ed
 8005284:	080053ab 	.word	0x080053ab
 8005288:	08005239 	.word	0x08005239
 800528c:	08005239 	.word	0x08005239
 8005290:	080053eb 	.word	0x080053eb
 8005294:	08005239 	.word	0x08005239
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005239 	.word	0x08005239
 80052a0:	08005239 	.word	0x08005239
 80052a4:	080053b3 	.word	0x080053b3
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	1d1a      	adds	r2, r3, #4
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	602a      	str	r2, [r5, #0]
 80052b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0a3      	b.n	8005404 <_printf_i+0x1f4>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	6829      	ldr	r1, [r5, #0]
 80052c0:	0606      	lsls	r6, r0, #24
 80052c2:	f101 0304 	add.w	r3, r1, #4
 80052c6:	d50a      	bpl.n	80052de <_printf_i+0xce>
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	602b      	str	r3, [r5, #0]
 80052cc:	2e00      	cmp	r6, #0
 80052ce:	da03      	bge.n	80052d8 <_printf_i+0xc8>
 80052d0:	232d      	movs	r3, #45	; 0x2d
 80052d2:	4276      	negs	r6, r6
 80052d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052d8:	485e      	ldr	r0, [pc, #376]	; (8005454 <_printf_i+0x244>)
 80052da:	230a      	movs	r3, #10
 80052dc:	e019      	b.n	8005312 <_printf_i+0x102>
 80052de:	680e      	ldr	r6, [r1, #0]
 80052e0:	602b      	str	r3, [r5, #0]
 80052e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052e6:	bf18      	it	ne
 80052e8:	b236      	sxthne	r6, r6
 80052ea:	e7ef      	b.n	80052cc <_printf_i+0xbc>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	6029      	str	r1, [r5, #0]
 80052f4:	0601      	lsls	r1, r0, #24
 80052f6:	d501      	bpl.n	80052fc <_printf_i+0xec>
 80052f8:	681e      	ldr	r6, [r3, #0]
 80052fa:	e002      	b.n	8005302 <_printf_i+0xf2>
 80052fc:	0646      	lsls	r6, r0, #25
 80052fe:	d5fb      	bpl.n	80052f8 <_printf_i+0xe8>
 8005300:	881e      	ldrh	r6, [r3, #0]
 8005302:	4854      	ldr	r0, [pc, #336]	; (8005454 <_printf_i+0x244>)
 8005304:	2f6f      	cmp	r7, #111	; 0x6f
 8005306:	bf0c      	ite	eq
 8005308:	2308      	moveq	r3, #8
 800530a:	230a      	movne	r3, #10
 800530c:	2100      	movs	r1, #0
 800530e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005312:	6865      	ldr	r5, [r4, #4]
 8005314:	60a5      	str	r5, [r4, #8]
 8005316:	2d00      	cmp	r5, #0
 8005318:	bfa2      	ittt	ge
 800531a:	6821      	ldrge	r1, [r4, #0]
 800531c:	f021 0104 	bicge.w	r1, r1, #4
 8005320:	6021      	strge	r1, [r4, #0]
 8005322:	b90e      	cbnz	r6, 8005328 <_printf_i+0x118>
 8005324:	2d00      	cmp	r5, #0
 8005326:	d04d      	beq.n	80053c4 <_printf_i+0x1b4>
 8005328:	4615      	mov	r5, r2
 800532a:	fbb6 f1f3 	udiv	r1, r6, r3
 800532e:	fb03 6711 	mls	r7, r3, r1, r6
 8005332:	5dc7      	ldrb	r7, [r0, r7]
 8005334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005338:	4637      	mov	r7, r6
 800533a:	42bb      	cmp	r3, r7
 800533c:	460e      	mov	r6, r1
 800533e:	d9f4      	bls.n	800532a <_printf_i+0x11a>
 8005340:	2b08      	cmp	r3, #8
 8005342:	d10b      	bne.n	800535c <_printf_i+0x14c>
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	07de      	lsls	r6, r3, #31
 8005348:	d508      	bpl.n	800535c <_printf_i+0x14c>
 800534a:	6923      	ldr	r3, [r4, #16]
 800534c:	6861      	ldr	r1, [r4, #4]
 800534e:	4299      	cmp	r1, r3
 8005350:	bfde      	ittt	le
 8005352:	2330      	movle	r3, #48	; 0x30
 8005354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800535c:	1b52      	subs	r2, r2, r5
 800535e:	6122      	str	r2, [r4, #16]
 8005360:	f8cd a000 	str.w	sl, [sp]
 8005364:	464b      	mov	r3, r9
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4640      	mov	r0, r8
 800536c:	f7ff fee2 	bl	8005134 <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14c      	bne.n	800540e <_printf_i+0x1fe>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	b004      	add	sp, #16
 800537a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537e:	4835      	ldr	r0, [pc, #212]	; (8005454 <_printf_i+0x244>)
 8005380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005384:	6829      	ldr	r1, [r5, #0]
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	f851 6b04 	ldr.w	r6, [r1], #4
 800538c:	6029      	str	r1, [r5, #0]
 800538e:	061d      	lsls	r5, r3, #24
 8005390:	d514      	bpl.n	80053bc <_printf_i+0x1ac>
 8005392:	07df      	lsls	r7, r3, #31
 8005394:	bf44      	itt	mi
 8005396:	f043 0320 	orrmi.w	r3, r3, #32
 800539a:	6023      	strmi	r3, [r4, #0]
 800539c:	b91e      	cbnz	r6, 80053a6 <_printf_i+0x196>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	f023 0320 	bic.w	r3, r3, #32
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	2310      	movs	r3, #16
 80053a8:	e7b0      	b.n	800530c <_printf_i+0xfc>
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f043 0320 	orr.w	r3, r3, #32
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	2378      	movs	r3, #120	; 0x78
 80053b4:	4828      	ldr	r0, [pc, #160]	; (8005458 <_printf_i+0x248>)
 80053b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ba:	e7e3      	b.n	8005384 <_printf_i+0x174>
 80053bc:	0659      	lsls	r1, r3, #25
 80053be:	bf48      	it	mi
 80053c0:	b2b6      	uxthmi	r6, r6
 80053c2:	e7e6      	b.n	8005392 <_printf_i+0x182>
 80053c4:	4615      	mov	r5, r2
 80053c6:	e7bb      	b.n	8005340 <_printf_i+0x130>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6826      	ldr	r6, [r4, #0]
 80053cc:	6961      	ldr	r1, [r4, #20]
 80053ce:	1d18      	adds	r0, r3, #4
 80053d0:	6028      	str	r0, [r5, #0]
 80053d2:	0635      	lsls	r5, r6, #24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0x1cc>
 80053d8:	6019      	str	r1, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0x1d2>
 80053dc:	0670      	lsls	r0, r6, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0x1c8>
 80053e0:	8019      	strh	r1, [r3, #0]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	4615      	mov	r5, r2
 80053e8:	e7ba      	b.n	8005360 <_printf_i+0x150>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	602a      	str	r2, [r5, #0]
 80053f0:	681d      	ldr	r5, [r3, #0]
 80053f2:	6862      	ldr	r2, [r4, #4]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4628      	mov	r0, r5
 80053f8:	f7fa ff0a 	bl	8000210 <memchr>
 80053fc:	b108      	cbz	r0, 8005402 <_printf_i+0x1f2>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	6060      	str	r0, [r4, #4]
 8005402:	6863      	ldr	r3, [r4, #4]
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	2300      	movs	r3, #0
 8005408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540c:	e7a8      	b.n	8005360 <_printf_i+0x150>
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	462a      	mov	r2, r5
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d0ab      	beq.n	8005374 <_printf_i+0x164>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	079b      	lsls	r3, r3, #30
 8005420:	d413      	bmi.n	800544a <_printf_i+0x23a>
 8005422:	68e0      	ldr	r0, [r4, #12]
 8005424:	9b03      	ldr	r3, [sp, #12]
 8005426:	4298      	cmp	r0, r3
 8005428:	bfb8      	it	lt
 800542a:	4618      	movlt	r0, r3
 800542c:	e7a4      	b.n	8005378 <_printf_i+0x168>
 800542e:	2301      	movs	r3, #1
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d09b      	beq.n	8005374 <_printf_i+0x164>
 800543c:	3501      	adds	r5, #1
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	9903      	ldr	r1, [sp, #12]
 8005442:	1a5b      	subs	r3, r3, r1
 8005444:	42ab      	cmp	r3, r5
 8005446:	dcf2      	bgt.n	800542e <_printf_i+0x21e>
 8005448:	e7eb      	b.n	8005422 <_printf_i+0x212>
 800544a:	2500      	movs	r5, #0
 800544c:	f104 0619 	add.w	r6, r4, #25
 8005450:	e7f5      	b.n	800543e <_printf_i+0x22e>
 8005452:	bf00      	nop
 8005454:	08005781 	.word	0x08005781
 8005458:	08005792 	.word	0x08005792

0800545c <__sread>:
 800545c:	b510      	push	{r4, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	f000 f894 	bl	8005590 <_read_r>
 8005468:	2800      	cmp	r0, #0
 800546a:	bfab      	itete	ge
 800546c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800546e:	89a3      	ldrhlt	r3, [r4, #12]
 8005470:	181b      	addge	r3, r3, r0
 8005472:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005476:	bfac      	ite	ge
 8005478:	6563      	strge	r3, [r4, #84]	; 0x54
 800547a:	81a3      	strhlt	r3, [r4, #12]
 800547c:	bd10      	pop	{r4, pc}

0800547e <__swrite>:
 800547e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005482:	461f      	mov	r7, r3
 8005484:	898b      	ldrh	r3, [r1, #12]
 8005486:	05db      	lsls	r3, r3, #23
 8005488:	4605      	mov	r5, r0
 800548a:	460c      	mov	r4, r1
 800548c:	4616      	mov	r6, r2
 800548e:	d505      	bpl.n	800549c <__swrite+0x1e>
 8005490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005494:	2302      	movs	r3, #2
 8005496:	2200      	movs	r2, #0
 8005498:	f000 f868 	bl	800556c <_lseek_r>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054a6:	81a3      	strh	r3, [r4, #12]
 80054a8:	4632      	mov	r2, r6
 80054aa:	463b      	mov	r3, r7
 80054ac:	4628      	mov	r0, r5
 80054ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	f000 b817 	b.w	80054e4 <_write_r>

080054b6 <__sseek>:
 80054b6:	b510      	push	{r4, lr}
 80054b8:	460c      	mov	r4, r1
 80054ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054be:	f000 f855 	bl	800556c <_lseek_r>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	bf15      	itete	ne
 80054c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054d2:	81a3      	strheq	r3, [r4, #12]
 80054d4:	bf18      	it	ne
 80054d6:	81a3      	strhne	r3, [r4, #12]
 80054d8:	bd10      	pop	{r4, pc}

080054da <__sclose>:
 80054da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054de:	f000 b813 	b.w	8005508 <_close_r>
	...

080054e4 <_write_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d07      	ldr	r5, [pc, #28]	; (8005504 <_write_r+0x20>)
 80054e8:	4604      	mov	r4, r0
 80054ea:	4608      	mov	r0, r1
 80054ec:	4611      	mov	r1, r2
 80054ee:	2200      	movs	r2, #0
 80054f0:	602a      	str	r2, [r5, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	f7fb fc05 	bl	8000d02 <_write>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_write_r+0x1e>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_write_r+0x1e>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	200001b4 	.word	0x200001b4

08005508 <_close_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d06      	ldr	r5, [pc, #24]	; (8005524 <_close_r+0x1c>)
 800550c:	2300      	movs	r3, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fb fc11 	bl	8000d3a <_close>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_close_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_close_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	200001b4 	.word	0x200001b4

08005528 <_fstat_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	4d07      	ldr	r5, [pc, #28]	; (8005548 <_fstat_r+0x20>)
 800552c:	2300      	movs	r3, #0
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	f7fb fc0c 	bl	8000d52 <_fstat>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d102      	bne.n	8005544 <_fstat_r+0x1c>
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	b103      	cbz	r3, 8005544 <_fstat_r+0x1c>
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	bf00      	nop
 8005548:	200001b4 	.word	0x200001b4

0800554c <_isatty_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4d06      	ldr	r5, [pc, #24]	; (8005568 <_isatty_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fb fc0b 	bl	8000d72 <_isatty>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_isatty_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_isatty_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	200001b4 	.word	0x200001b4

0800556c <_lseek_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d07      	ldr	r5, [pc, #28]	; (800558c <_lseek_r+0x20>)
 8005570:	4604      	mov	r4, r0
 8005572:	4608      	mov	r0, r1
 8005574:	4611      	mov	r1, r2
 8005576:	2200      	movs	r2, #0
 8005578:	602a      	str	r2, [r5, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	f7fb fc04 	bl	8000d88 <_lseek>
 8005580:	1c43      	adds	r3, r0, #1
 8005582:	d102      	bne.n	800558a <_lseek_r+0x1e>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	b103      	cbz	r3, 800558a <_lseek_r+0x1e>
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	bd38      	pop	{r3, r4, r5, pc}
 800558c:	200001b4 	.word	0x200001b4

08005590 <_read_r>:
 8005590:	b538      	push	{r3, r4, r5, lr}
 8005592:	4d07      	ldr	r5, [pc, #28]	; (80055b0 <_read_r+0x20>)
 8005594:	4604      	mov	r4, r0
 8005596:	4608      	mov	r0, r1
 8005598:	4611      	mov	r1, r2
 800559a:	2200      	movs	r2, #0
 800559c:	602a      	str	r2, [r5, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	f7fb fb92 	bl	8000cc8 <_read>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_read_r+0x1e>
 80055a8:	682b      	ldr	r3, [r5, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_read_r+0x1e>
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	200001b4 	.word	0x200001b4

080055b4 <_init>:
 80055b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b6:	bf00      	nop
 80055b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ba:	bc08      	pop	{r3}
 80055bc:	469e      	mov	lr, r3
 80055be:	4770      	bx	lr

080055c0 <_fini>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr
