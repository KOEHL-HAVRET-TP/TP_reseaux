
TP_Bus_Reseaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005794  08005794  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800579c  0800579c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08005814  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005814  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faf3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002783  00000000  00000000  0002fb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023576  00000000  00000000  00033b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a6d  00000000  00000000  000570ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cece4  00000000  00000000  00068b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013781f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b24  00000000  00000000  00137870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055a4 	.word	0x080055a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080055a4 	.word	0x080055a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BMP280_check>:
int16_t dig_P8;
int16_t dig_P9;

BMP280_S32_t t_fine;

int BMP280_check() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 80005ba:	23d0      	movs	r3, #208	; 0xd0
 80005bc:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80005be:	23ee      	movs	r3, #238	; 0xee
 80005c0:	b299      	uxth	r1, r3
 80005c2:	1d3a      	adds	r2, r7, #4
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4819      	ldr	r0, [pc, #100]	; (8000634 <BMP280_check+0x80>)
 80005ce:	f001 fbeb 	bl	8001da8 <HAL_I2C_Master_Transmit>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <BMP280_check+0x84>)
 80005de:	f004 f943 	bl	8004868 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80005e2:	23ee      	movs	r3, #238	; 0xee
 80005e4:	b299      	uxth	r1, r3
 80005e6:	2301      	movs	r3, #1
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	9000      	str	r0, [sp, #0]
 80005f2:	4810      	ldr	r0, [pc, #64]	; (8000634 <BMP280_check+0x80>)
 80005f4:	f001 fcd6 	bl	8001fa4 <HAL_I2C_Master_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d002      	beq.n	8000608 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <BMP280_check+0x88>)
 8000604:	f004 f930 	bl	8004868 <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 8000608:	793b      	ldrb	r3, [r7, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <BMP280_check+0x8c>)
 800060e:	f004 f8a5 	bl	800475c <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	2258      	movs	r2, #88	; 0x58
 8000616:	4293      	cmp	r3, r2
 8000618:	d104      	bne.n	8000624 <BMP280_check+0x70>
		printf("Ok\r\n");
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <BMP280_check+0x90>)
 800061c:	f004 f924 	bl	8004868 <puts>
		return 0;
 8000620:	2300      	movs	r3, #0
 8000622:	e003      	b.n	800062c <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <BMP280_check+0x94>)
 8000626:	f004 f91f 	bl	8004868 <puts>
		return 1;
 800062a:	2301      	movs	r3, #1
	}
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000cc 	.word	0x200000cc
 8000638:	080055bc 	.word	0x080055bc
 800063c:	080055e0 	.word	0x080055e0
 8000640:	08005604 	.word	0x08005604
 8000644:	08005610 	.word	0x08005610
 8000648:	08005614 	.word	0x08005614

0800064c <BMP280_init>:

int BMP280_init() {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 8000652:	2357      	movs	r3, #87	; 0x57
 8000654:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <BMP280_init+0x40>)
 8000658:	f004 f906 	bl	8004868 <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 800065c:	22f4      	movs	r2, #244	; 0xf4
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4619      	mov	r1, r3
 8000662:	4610      	mov	r0, r2
 8000664:	f000 f818 	bl	8000698 <BMP280_Write_Reg>
 8000668:	4603      	mov	r3, r0
 800066a:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d104      	bne.n	800067c <BMP280_init+0x30>
		printf("Config Ok\r\n");
 8000672:	4807      	ldr	r0, [pc, #28]	; (8000690 <BMP280_init+0x44>)
 8000674:	f004 f8f8 	bl	8004868 <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}
	//BMP280_get_trimming();
	return 0;
 8000678:	2300      	movs	r3, #0
 800067a:	e003      	b.n	8000684 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <BMP280_init+0x48>)
 800067e:	f004 f8f3 	bl	8004868 <puts>
		return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08005620 	.word	0x08005620
 8000690:	08005630 	.word	0x08005630
 8000694:	0800563c 	.word	0x0800563c

08000698 <BMP280_Write_Reg>:

int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80006ac:	79bb      	ldrb	r3, [r7, #6]
 80006ae:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 80006b0:	23ee      	movs	r3, #238	; 0xee
 80006b2:	b299      	uxth	r1, r3
 80006b4:	f107 020c 	add.w	r2, r7, #12
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2302      	movs	r3, #2
 80006c0:	4814      	ldr	r0, [pc, #80]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006c2:	f001 fb71 	bl	8001da8 <HAL_I2C_Master_Transmit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d002      	beq.n	80006d6 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 80006d0:	4811      	ldr	r0, [pc, #68]	; (8000718 <BMP280_Write_Reg+0x80>)
 80006d2:	f004 f8c9 	bl	8004868 <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 80006d6:	23ee      	movs	r3, #238	; 0xee
 80006d8:	b299      	uxth	r1, r3
 80006da:	f107 020c 	add.w	r2, r7, #12
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2301      	movs	r3, #1
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <BMP280_Write_Reg+0x7c>)
 80006e8:	f001 fc5c 	bl	8001fa4 <HAL_I2C_Master_Receive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <BMP280_Write_Reg+0x84>)
 80006f8:	f004 f8b6 	bl	8004868 <puts>
	}

	if (buf[0] == value) {
 80006fc:	7b3b      	ldrb	r3, [r7, #12]
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	429a      	cmp	r2, r3
 8000702:	d101      	bne.n	8000708 <BMP280_Write_Reg+0x70>
		return 0;
 8000704:	2300      	movs	r3, #0
 8000706:	e000      	b.n	800070a <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000708:	2301      	movs	r3, #1
	}
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000cc 	.word	0x200000cc
 8000718:	0800564c 	.word	0x0800564c
 800071c:	08005668 	.word	0x08005668

08000720 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000726:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_CAN1_Init+0x8c>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_CAN1_Init+0x88>)
 800072c:	2210      	movs	r2, #16
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_CAN1_Init+0x88>)
 800073e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000742:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000746:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800074a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_CAN1_Init+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_CAN1_Init+0x88>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_CAN1_Init+0x88>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000772:	f000 fc83 	bl	800107c <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800077c:	f000 f9bc 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  pHeader.StdId = 0x61;
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_CAN1_Init+0x90>)
 8000782:	2261      	movs	r2, #97	; 0x61
 8000784:	601a      	str	r2, [r3, #0]
  pHeader.ExtId = 0x00; //ne sera pas utilisée
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_CAN1_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  pHeader.IDE = CAN_ID_STD;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_CAN1_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  pHeader.RTR = CAN_RTR_DATA;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_CAN1_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  pHeader.DLC = 2;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_CAN1_Init+0x90>)
 800079a:	2202      	movs	r2, #2
 800079c:	611a      	str	r2, [r3, #16]
  pHeader.TransmitGlobalTime = DISABLE;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <MX_CAN1_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a4 	.word	0x200000a4
 80007ac:	40006400 	.word	0x40006400
 80007b0:	2000008c 	.word	0x2000008c

080007b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a19      	ldr	r2, [pc, #100]	; (8000838 <HAL_CAN_MspInit+0x84>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d12c      	bne.n	8000830 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_CAN_MspInit+0x88>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_CAN_MspInit+0x88>)
 80007e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_CAN_MspInit+0x88>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <HAL_CAN_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a10      	ldr	r2, [pc, #64]	; (800083c <HAL_CAN_MspInit+0x88>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_CAN_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800080e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000820:	2309      	movs	r3, #9
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_CAN_MspInit+0x8c>)
 800082c:	f000 ffe4 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40006400 	.word	0x40006400
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400

08000844 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_GPIO_Init+0x4c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_GPIO_Init+0x4c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_GPIO_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_GPIO_Init+0x4c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <MX_GPIO_Init+0x4c>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_GPIO_Init+0x4c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C1_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C1_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C1_Init+0x50>)
 80008d2:	f001 f925 	bl	8001b20 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f90c 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000cc 	.word	0x200000cc
 80008e8:	40005400 	.word	0x40005400
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_I2C_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_I2C_MspInit+0x88>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092e:	23c0      	movs	r3, #192	; 0xc0
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	2312      	movs	r3, #18
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093e:	2304      	movs	r3, #4
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <HAL_I2C_MspInit+0x8c>)
 800094a:	f000 ff55 	bl	80017f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 fae4 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f84a 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff5a 	bl	8000844 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000990:	f7ff fec6 	bl	8000720 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000994:	f7ff ff7e 	bl	8000894 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000998:	f000 f9d8 	bl	8000d4c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800099c:	f000 fa00 	bl	8000da0 <MX_USART2_UART_Init>
	/*printf("bonjour\r\n");
	int size = snprintf(buffer,max_len,"bonjour\r\n");
	HAL_UART_Transmit(&huart2, buffer, size, 0xFFFF);*/

	//main_comm();
	printf("\r\nChecking for BMP280\r\n");
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <main+0x88>)
 80009a2:	f003 ff61 	bl	8004868 <puts>
	BMP280_check();
 80009a6:	f7ff fe05 	bl	80005b4 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <main+0x8c>)
 80009ac:	f003 ff5c 	bl	8004868 <puts>
	BMP280_init();
 80009b0:	f7ff fe4c 	bl	800064c <BMP280_init>


	//bus CAN

	HAL_CAN_Start(&hcan1);
 80009b4:	4816      	ldr	r0, [pc, #88]	; (8000a10 <main+0x90>)
 80009b6:	f000 fc5c 	bl	8001272 <HAL_CAN_Start>

	aData[0]=0x5A; //90 degres
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <main+0x94>)
 80009bc:	225a      	movs	r2, #90	; 0x5a
 80009be:	701a      	strb	r2, [r3, #0]
	aData[1]=0x01; //négatif
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <main+0x94>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <main+0x98>)
 80009c8:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <main+0x94>)
 80009ca:	4914      	ldr	r1, [pc, #80]	; (8000a1c <main+0x9c>)
 80009cc:	4810      	ldr	r0, [pc, #64]	; (8000a10 <main+0x90>)
 80009ce:	f000 fc94 	bl	80012fa <HAL_CAN_AddTxMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		aData[1]=0;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <main+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	705a      	strb	r2, [r3, #1]
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0x98>)
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <main+0x94>)
 80009dc:	490f      	ldr	r1, [pc, #60]	; (8000a1c <main+0x9c>)
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <main+0x90>)
 80009e0:	f000 fc8b 	bl	80012fa <HAL_CAN_AddTxMessage>
		HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e8:	f000 fb24 	bl	8001034 <HAL_Delay>
		aData[1]=1;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <main+0x94>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	705a      	strb	r2, [r3, #1]
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, aData, &pTxMailbox);
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <main+0x98>)
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <main+0x94>)
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <main+0x9c>)
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <main+0x90>)
 80009fa:	f000 fc7e 	bl	80012fa <HAL_CAN_AddTxMessage>
		//BMP280_get_pressure();
		//HAL_UART_Transmit(&huart1, "Hello i'm nucleo board\r\n", 24, HAL_MAX_DELAY);
		//HAL_UART_Receive_IT(&huart2, buffer, sizeof(buffer),HAL_MAX_DELAY);
		//HAL_UART_Transmit(&huart1, buffer[0], 24, HAL_MAX_DELAY);
		//printf('pointeur=%d',pt);
		HAL_Delay(1000);
 80009fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a02:	f000 fb17 	bl	8001034 <HAL_Delay>
		aData[1]=0;
 8000a06:	e7e4      	b.n	80009d2 <main+0x52>
 8000a08:	080056b8 	.word	0x080056b8
 8000a0c:	080056d0 	.word	0x080056d0
 8000a10:	200000a4 	.word	0x200000a4
 8000a14:	20000120 	.word	0x20000120
 8000a18:	20000128 	.word	0x20000128
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b094      	sub	sp, #80	; 0x50
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2234      	movs	r2, #52	; 0x34
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 fdac 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	4a28      	ldr	r2, [pc, #160]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6413      	str	r3, [r2, #64]	; 0x40
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <SystemClock_Config+0xd0>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a60:	2300      	movs	r3, #0
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a6c:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <SystemClock_Config+0xd4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a88:	2310      	movs	r3, #16
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a94:	2308      	movs	r3, #8
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a98:	2350      	movs	r3, #80	; 0x50
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fa91 	bl	8002fd4 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ab8:	f000 f81e 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2102      	movs	r1, #2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 ffb7 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ae4:	f000 f808 	bl	8000af8 <Error_Handler>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	3750      	adds	r7, #80	; 0x50
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */

	//int size = snprintf(ch,sizeof(int),);
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b5c:	1d39      	adds	r1, r7, #4
 8000b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b62:	2201      	movs	r2, #1
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <__io_putchar+0x20>)
 8000b66:	f002 fd20 	bl	80035aa <HAL_UART_Transmit>
	return ch;
 8000b6a:	687b      	ldr	r3, [r7, #4]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000174 	.word	0x20000174

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 fa16 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	if(buffer[pt]='\n'){
		HAL_UART_Transmit(&huart1, )
	}
	pt++;*/
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 fd7d 	bl	80036d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000174 	.word	0x20000174

08000be0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e00a      	b.n	8000c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bf2:	f3af 8000 	nop.w
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	b2ca      	uxtb	r2, r1
 8000c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbf0      	blt.n	8000bf2 <_read+0x12>
	}

return len;
 8000c10:	687b      	ldr	r3, [r7, #4]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b086      	sub	sp, #24
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	e009      	b.n	8000c40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff8d 	bl	8000b54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	dbf1      	blt.n	8000c2c <_write+0x12>
	}
	return len;
 8000c48:	687b      	ldr	r3, [r7, #4]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_close>:

int _close(int file)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	return -1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_isatty>:

int _isatty(int file)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f003 fc24 	bl	8004538 <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	2000012c 	.word	0x2000012c
 8000d24:	200001d0 	.word	0x200001d0

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART1_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART1_UART_Init+0x4c>)
 8000d84:	f002 fbc4 	bl	8003510 <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f7ff feb3 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000130 	.word	0x20000130
 8000d9c:	40011000 	.word	0x40011000

08000da0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART2_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART2_UART_Init+0x4c>)
 8000dd8:	f002 fb9a 	bl	8003510 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f7ff fe89 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000174 	.word	0x20000174
 8000df0:	40004400 	.word	0x40004400

08000df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a36      	ldr	r2, [pc, #216]	; (8000eec <HAL_UART_MspInit+0xf8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12d      	bne.n	8000e72 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a34      	ldr	r2, [pc, #208]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	4b2e      	ldr	r3, [pc, #184]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e60:	2307      	movs	r3, #7
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4822      	ldr	r0, [pc, #136]	; (8000ef4 <HAL_UART_MspInit+0x100>)
 8000e6c:	f000 fcc4 	bl	80017f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e70:	e038      	b.n	8000ee4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a20      	ldr	r2, [pc, #128]	; (8000ef8 <HAL_UART_MspInit+0x104>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d133      	bne.n	8000ee4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a1a      	ldr	r2, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0xfc>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_UART_MspInit+0x100>)
 8000ed0:	f000 fc92 	bl	80017f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2026      	movs	r0, #38	; 0x26
 8000eda:	f000 fbc4 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ede:	2026      	movs	r0, #38	; 0x26
 8000ee0:	f000 fbdd 	bl	800169e <HAL_NVIC_EnableIRQ>
}
 8000ee4:	bf00      	nop
 8000ee6:	3730      	adds	r7, #48	; 0x30
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40004400 	.word	0x40004400

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff feff 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f003 fb0b 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fd27 	bl	8000980 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f40:	080057a4 	.word	0x080057a4
  ldr r2, =_sbss
 8000f44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f48:	200001cc 	.word	0x200001cc

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fb69 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fdbe 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fb81 	bl	80016ba <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fb49 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	200001b8 	.word	0x200001b8

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200001b8 	.word	0x200001b8

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e0ed      	b.n	800126a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fb8a 	bl	80007b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b0:	f7ff ffb4 	bl	800101c <HAL_GetTick>
 80010b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010b6:	e012      	b.n	80010de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b8:	f7ff ffb0 	bl	800101c <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d90b      	bls.n	80010de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e0c5      	b.n	800126a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0e5      	beq.n	80010b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0202 	bic.w	r2, r2, #2
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010fc:	f7ff ff8e 	bl	800101c <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001102:	e012      	b.n	800112a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001104:	f7ff ff8a 	bl	800101c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d90b      	bls.n	800112a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2205      	movs	r2, #5
 8001122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e09f      	b.n	800126a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1e5      	bne.n	8001104 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e1b      	ldrb	r3, [r3, #24]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7e5b      	ldrb	r3, [r3, #25]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7e9b      	ldrb	r3, [r3, #26]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0220 	orr.w	r2, r2, #32
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0220 	bic.w	r2, r2, #32
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7edb      	ldrb	r3, [r3, #27]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0210 	bic.w	r2, r2, #16
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f042 0210 	orr.w	r2, r2, #16
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7f1b      	ldrb	r3, [r3, #28]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0208 	orr.w	r2, r2, #8
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0208 	bic.w	r2, r2, #8
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7f5b      	ldrb	r3, [r3, #29]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0204 	orr.w	r2, r2, #4
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e007      	b.n	8001234 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0204 	bic.w	r2, r2, #4
 8001232:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	ea42 0103 	orr.w	r1, r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12e      	bne.n	80012e4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2202      	movs	r2, #2
 800128a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800129e:	f7ff febd 	bl	800101c <HAL_GetTick>
 80012a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012a4:	e012      	b.n	80012cc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a6:	f7ff feb9 	bl	800101c <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b0a      	cmp	r3, #10
 80012b2:	d90b      	bls.n	80012cc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2205      	movs	r2, #5
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e012      	b.n	80012f2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e5      	bne.n	80012a6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e006      	b.n	80012f2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
  }
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b089      	sub	sp, #36	; 0x24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	60f8      	str	r0, [r7, #12]
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d003      	beq.n	8001326 <HAL_CAN_AddTxMessage+0x2c>
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	2b02      	cmp	r3, #2
 8001322:	f040 80b8 	bne.w	8001496 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10a      	bne.n	8001346 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001336:	2b00      	cmp	r3, #0
 8001338:	d105      	bne.n	8001346 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a0 	beq.w	8001486 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	0e1b      	lsrs	r3, r3, #24
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d907      	bls.n	8001366 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e09e      	b.n	80014a4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10d      	bne.n	8001394 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	6809      	ldr	r1, [r1, #0]
 8001386:	431a      	orrs	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3318      	adds	r3, #24
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	440b      	add	r3, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e00f      	b.n	80013b4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800139e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013a4:	68f9      	ldr	r1, [r7, #12]
 80013a6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80013a8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3318      	adds	r3, #24
 80013ae:	011b      	lsls	r3, r3, #4
 80013b0:	440b      	add	r3, r1
 80013b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3318      	adds	r3, #24
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	440b      	add	r3, r1
 80013c4:	3304      	adds	r3, #4
 80013c6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	7d1b      	ldrb	r3, [r3, #20]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d111      	bne.n	80013f4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	3318      	adds	r3, #24
 80013d8:	011b      	lsls	r3, r3, #4
 80013da:	4413      	add	r3, r2
 80013dc:	3304      	adds	r3, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	6811      	ldr	r1, [r2, #0]
 80013e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3318      	adds	r3, #24
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	440b      	add	r3, r1
 80013f0:	3304      	adds	r3, #4
 80013f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3307      	adds	r3, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	061a      	lsls	r2, r3, #24
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3306      	adds	r3, #6
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3305      	adds	r3, #5
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	4313      	orrs	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	3204      	adds	r2, #4
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4610      	mov	r0, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	ea43 0200 	orr.w	r2, r3, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	011b      	lsls	r3, r3, #4
 8001424:	440b      	add	r3, r1
 8001426:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800142a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3303      	adds	r3, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	061a      	lsls	r2, r3, #24
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3302      	adds	r3, #2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3301      	adds	r3, #1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	4313      	orrs	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	4610      	mov	r0, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	6811      	ldr	r1, [r2, #0]
 8001452:	ea43 0200 	orr.w	r2, r3, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	440b      	add	r3, r1
 800145c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001460:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	3318      	adds	r3, #24
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	6811      	ldr	r1, [r2, #0]
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	3318      	adds	r3, #24
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	440b      	add	r3, r1
 8001480:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e00e      	b.n	80014a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e006      	b.n	80014a4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff3e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff8e 	bl	80015a4 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff31 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b084      	sub	sp, #16
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016e0:	f7ff fc9c 	bl	800101c <HAL_GetTick>
 80016e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d008      	beq.n	8001704 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e052      	b.n	80017aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0216 	bic.w	r2, r2, #22
 8001712:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001722:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <HAL_DMA_Abort+0x62>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0208 	bic.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001754:	e013      	b.n	800177e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001756:	f7ff fc61 	bl	800101c <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b05      	cmp	r3, #5
 8001762:	d90c      	bls.n	800177e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2203      	movs	r2, #3
 800176e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e015      	b.n	80017aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e4      	bne.n	8001756 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001790:	223f      	movs	r2, #63	; 0x3f
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d004      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e00c      	b.n	80017ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2205      	movs	r2, #5
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	e165      	b.n	8001ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001814:	2201      	movs	r2, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8154 	bne.w	8001ada <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d005      	beq.n	800184a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	2b02      	cmp	r3, #2
 8001848:	d130      	bne.n	80018ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 0201 	and.w	r2, r3, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d017      	beq.n	80018e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d123      	bne.n	800193c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0203 	and.w	r2, r3, #3
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80ae 	beq.w	8001ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_GPIO_Init+0x300>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a5c      	ldr	r2, [pc, #368]	; (8001af8 <HAL_GPIO_Init+0x300>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <HAL_GPIO_Init+0x300>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <HAL_GPIO_Init+0x304>)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4f      	ldr	r2, [pc, #316]	; (8001b00 <HAL_GPIO_Init+0x308>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d025      	beq.n	8001a12 <HAL_GPIO_Init+0x21a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4e      	ldr	r2, [pc, #312]	; (8001b04 <HAL_GPIO_Init+0x30c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d01f      	beq.n	8001a0e <HAL_GPIO_Init+0x216>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_GPIO_Init+0x310>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x212>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4c      	ldr	r2, [pc, #304]	; (8001b0c <HAL_GPIO_Init+0x314>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x20e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_GPIO_Init+0x318>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x20a>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <HAL_GPIO_Init+0x31c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x206>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a49      	ldr	r2, [pc, #292]	; (8001b18 <HAL_GPIO_Init+0x320>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x202>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e00c      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e00a      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 80019fe:	2305      	movs	r3, #5
 8001a00:	e008      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 8001a02:	2304      	movs	r3, #4
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 8001a06:	2303      	movs	r3, #3
 8001a08:	e004      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e002      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <HAL_GPIO_Init+0x21c>
 8001a12:	2300      	movs	r3, #0
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	f002 0203 	and.w	r2, r2, #3
 8001a1a:	0092      	lsls	r2, r2, #2
 8001a1c:	4093      	lsls	r3, r2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x304>)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a56:	4a31      	ldr	r2, [pc, #196]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a80:	4a26      	ldr	r2, [pc, #152]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad4:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_GPIO_Init+0x324>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	f67f ae96 	bls.w	8001814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3724      	adds	r7, #36	; 0x24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40013800 	.word	0x40013800
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020c00 	.word	0x40020c00
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40021400 	.word	0x40021400
 8001b18:	40021800 	.word	0x40021800
 8001b1c:	40013c00 	.word	0x40013c00

08001b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e12b      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fed2 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2224      	movs	r2, #36	; 0x24
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b84:	f001 f854 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8001b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d807      	bhi.n	8001ba4 <HAL_I2C_Init+0x84>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_I2C_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e006      	b.n	8001bb2 <HAL_I2C_Init+0x92>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4a7d      	ldr	r2, [pc, #500]	; (8001d9c <HAL_I2C_Init+0x27c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	bf94      	ite	ls
 8001bac:	2301      	movls	r3, #1
 8001bae:	2300      	movhi	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0e7      	b.n	8001d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <HAL_I2C_Init+0x280>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d802      	bhi.n	8001bf4 <HAL_I2C_Init+0xd4>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	e009      	b.n	8001c08 <HAL_I2C_Init+0xe8>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4a69      	ldr	r2, [pc, #420]	; (8001da4 <HAL_I2C_Init+0x284>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	3301      	adds	r3, #1
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	495c      	ldr	r1, [pc, #368]	; (8001d94 <HAL_I2C_Init+0x274>)
 8001c24:	428b      	cmp	r3, r1
 8001c26:	d819      	bhi.n	8001c5c <HAL_I2C_Init+0x13c>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1e59      	subs	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c36:	1c59      	adds	r1, r3, #1
 8001c38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c3c:	400b      	ands	r3, r1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00a      	beq.n	8001c58 <HAL_I2C_Init+0x138>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1e59      	subs	r1, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	e051      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x168>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x18e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x196>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1dc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff f92e 	bl	800101c <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 80e0 	bne.w	8001f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4970      	ldr	r1, [pc, #448]	; (8001f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fc58 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0d3      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Transmit+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0cc      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fac2 	bl	80023f0 <I2C_MasterRequestWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e8c:	e066      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fcd2 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fcc2 	bl	80028be <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d194      	bne.n	8001e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff f830 	bl	800101c <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	f040 820b 	bne.w	80023e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2319      	movs	r3, #25
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	497c      	ldr	r1, [pc, #496]	; (80021c8 <HAL_I2C_Master_Receive+0x224>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fb5a 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e1fe      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2C_Master_Receive+0x50>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e1f7      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d007      	beq.n	800201a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2222      	movs	r2, #34	; 0x22
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2210      	movs	r2, #16
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	893a      	ldrh	r2, [r7, #8]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_I2C_Master_Receive+0x228>)
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa46 	bl	80024f4 <I2C_MasterRequestRead>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1b8      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e18c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d11b      	bne.n	80020e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e16c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d11b      	bne.n	8002122 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	e14c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002148:	e138      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b03      	cmp	r3, #3
 8002150:	f200 80f1 	bhi.w	8002336 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b01      	cmp	r3, #1
 800215a:	d123      	bne.n	80021a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fbed 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e139      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a2:	e10b      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d14e      	bne.n	800224a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	2200      	movs	r2, #0
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_I2C_Master_Receive+0x22c>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa6a 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e10e      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
 80021c6:	bf00      	nop
 80021c8:	00100002 	.word	0x00100002
 80021cc:	ffff0000 	.word	0xffff0000
 80021d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002248:	e0b8      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	2200      	movs	r2, #0
 8002252:	4966      	ldr	r1, [pc, #408]	; (80023ec <HAL_I2C_Master_Receive+0x448>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa1b 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0bf      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	2200      	movs	r2, #0
 80022ae:	494f      	ldr	r1, [pc, #316]	; (80023ec <HAL_I2C_Master_Receive+0x448>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f9ed 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e091      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002334:	e042      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fb00 	bl	8002940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e04c      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d118      	bne.n	80023bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f aec2 	bne.w	800214a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	00010004 	.word	0x00010004

080023f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d006      	beq.n	800241a <I2C_MasterRequestWrite+0x2a>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d003      	beq.n	800241a <I2C_MasterRequestWrite+0x2a>
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002418:	d108      	bne.n	800242c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e00b      	b.n	8002444 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	2b12      	cmp	r3, #18
 8002432:	d107      	bne.n	8002444 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f91d 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246a:	d103      	bne.n	8002474 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e035      	b.n	80024e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002480:	d108      	bne.n	8002494 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002482:	897b      	ldrh	r3, [r7, #10]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002490:	611a      	str	r2, [r3, #16]
 8002492:	e01b      	b.n	80024cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002494:	897b      	ldrh	r3, [r7, #10]
 8002496:	11db      	asrs	r3, r3, #7
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f003 0306 	and.w	r3, r3, #6
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f063 030f 	orn	r3, r3, #15
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	490e      	ldr	r1, [pc, #56]	; (80024ec <I2C_MasterRequestWrite+0xfc>)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f943 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e010      	b.n	80024e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4907      	ldr	r1, [pc, #28]	; (80024f0 <I2C_MasterRequestWrite+0x100>)
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f933 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	00010008 	.word	0x00010008
 80024f0:	00010002 	.word	0x00010002

080024f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	460b      	mov	r3, r1
 8002502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002518:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d006      	beq.n	800252e <I2C_MasterRequestRead+0x3a>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d003      	beq.n	800252e <I2C_MasterRequestRead+0x3a>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800252c:	d108      	bne.n	8002540 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e00b      	b.n	8002558 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	2b11      	cmp	r3, #17
 8002546:	d107      	bne.n	8002558 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f893 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257e:	d103      	bne.n	8002588 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e079      	b.n	8002680 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002594:	d108      	bne.n	80025a8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002596:	897b      	ldrh	r3, [r7, #10]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e05f      	b.n	8002668 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	11db      	asrs	r3, r3, #7
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0306 	and.w	r3, r3, #6
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f063 030f 	orn	r3, r3, #15
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <I2C_MasterRequestRead+0x194>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f8b9 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e054      	b.n	8002680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4929      	ldr	r1, [pc, #164]	; (800268c <I2C_MasterRequestRead+0x198>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8a9 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e044      	b.n	8002680 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f831 	bl	8002690 <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002642:	d103      	bne.n	800264c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800264a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e017      	b.n	8002680 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	11db      	asrs	r3, r3, #7
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f063 030e 	orn	r3, r3, #14
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <I2C_MasterRequestRead+0x198>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f865 	bl	800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	00010008 	.word	0x00010008
 800268c:	00010002 	.word	0x00010002

08002690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a0:	e025      	b.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d021      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7fe fcb7 	bl	800101c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d116      	bne.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e023      	b.n	8002736 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10d      	bne.n	8002714 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4013      	ands	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	e00c      	b.n	800272e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	43da      	mvns	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d0b6      	beq.n	80026a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800274c:	e051      	b.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275c:	d123      	bne.n	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002776:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e046      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d021      	beq.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe fc35 	bl	800101c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f043 0220 	orr.w	r2, r3, #32
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e020      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10c      	bne.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4013      	ands	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf14      	ite	ne
 800280e:	2301      	movne	r3, #1
 8002810:	2300      	moveq	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e00b      	b.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	43da      	mvns	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf14      	ite	ne
 8002828:	2301      	movne	r3, #1
 800282a:	2300      	moveq	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d18d      	bne.n	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002848:	e02d      	b.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f8ce 	bl	80029ec <I2C_IsAcknowledgeFailed>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e02d      	b.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d021      	beq.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe fbdb 	bl	800101c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d116      	bne.n	80028a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2220      	movs	r2, #32
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0220 	orr.w	r2, r3, #32
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e007      	b.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d1ca      	bne.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ca:	e02d      	b.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f88d 	bl	80029ec <I2C_IsAcknowledgeFailed>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e02d      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d021      	beq.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e4:	f7fe fb9a 	bl	800101c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d116      	bne.n	8002928 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e007      	b.n	8002938 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d1ca      	bne.n	80028cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800294c:	e042      	b.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b10      	cmp	r3, #16
 800295a:	d119      	bne.n	8002990 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0210 	mvn.w	r2, #16
 8002964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e029      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002990:	f7fe fb44 	bl	800101c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	429a      	cmp	r2, r3
 800299e:	d302      	bcc.n	80029a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d116      	bne.n	80029d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e007      	b.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d1b5      	bne.n	800294e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d11b      	bne.n	8002a3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f043 0204 	orr.w	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fa6e 	bl	800101c <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fa6a 	bl	800101c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f855 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe f9ce 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	080056e4 	.word	0x080056e4
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000000 	.word	0x20000000

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	080056f4 	.word	0x080056f4

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffdc 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0b5b      	lsrs	r3, r3, #13
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	080056f4 	.word	0x080056f4

08002c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c84:	b0a6      	sub	sp, #152	; 0x98
 8002c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca6:	4bc8      	ldr	r3, [pc, #800]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	f200 817e 	bhi.w	8002fb0 <HAL_RCC_GetSysClockFreq+0x330>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002fb1 	.word	0x08002fb1
 8002cc4:	08002fb1 	.word	0x08002fb1
 8002cc8:	08002fb1 	.word	0x08002fb1
 8002ccc:	08002cf9 	.word	0x08002cf9
 8002cd0:	08002fb1 	.word	0x08002fb1
 8002cd4:	08002fb1 	.word	0x08002fb1
 8002cd8:	08002fb1 	.word	0x08002fb1
 8002cdc:	08002d01 	.word	0x08002d01
 8002ce0:	08002fb1 	.word	0x08002fb1
 8002ce4:	08002fb1 	.word	0x08002fb1
 8002ce8:	08002fb1 	.word	0x08002fb1
 8002cec:	08002e6b 	.word	0x08002e6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4bb6      	ldr	r3, [pc, #728]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002cf6:	e15f      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf8:	4bb5      	ldr	r3, [pc, #724]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002cfe:	e15b      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d00:	4bb1      	ldr	r3, [pc, #708]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d0c:	4bae      	ldr	r3, [pc, #696]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d031      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d18:	4bab      	ldr	r3, [pc, #684]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	2200      	movs	r2, #0
 8002d20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d30:	4ba7      	ldr	r3, [pc, #668]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d32:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002d36:	462a      	mov	r2, r5
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	4621      	mov	r1, r4
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	4aa2      	ldr	r2, [pc, #648]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002d48:	4621      	mov	r1, r4
 8002d4a:	fba1 1202 	umull	r1, r2, r1, r2
 8002d4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d50:	460a      	mov	r2, r1
 8002d52:	67ba      	str	r2, [r7, #120]	; 0x78
 8002d54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d56:	4413      	add	r3, r2
 8002d58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5e:	2200      	movs	r2, #0
 8002d60:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002d6c:	f7fd faa0 	bl	80002b0 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d7a:	e064      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7c:	4b92      	ldr	r3, [pc, #584]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	2200      	movs	r2, #0
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
 8002d86:	657a      	str	r2, [r7, #84]	; 0x54
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	2300      	movs	r3, #0
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d94:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002d98:	4622      	mov	r2, r4
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0159      	lsls	r1, r3, #5
 8002da6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002daa:	0150      	lsls	r0, r2, #5
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4621      	mov	r1, r4
 8002db2:	1a51      	subs	r1, r2, r1
 8002db4:	6139      	str	r1, [r7, #16]
 8002db6:	4629      	mov	r1, r5
 8002db8:	eb63 0301 	sbc.w	r3, r3, r1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dca:	4659      	mov	r1, fp
 8002dcc:	018b      	lsls	r3, r1, #6
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	018a      	lsls	r2, r1, #6
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ebb2 0801 	subs.w	r8, r2, r1
 8002dde:	4659      	mov	r1, fp
 8002de0:	eb63 0901 	sbc.w	r9, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df8:	4690      	mov	r8, r2
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	eb18 0303 	adds.w	r3, r8, r3
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	462b      	mov	r3, r5
 8002e06:	eb49 0303 	adc.w	r3, r9, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	028b      	lsls	r3, r1, #10
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e22:	4621      	mov	r1, r4
 8002e24:	028a      	lsls	r2, r1, #10
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2e:	2200      	movs	r2, #0
 8002e30:	643b      	str	r3, [r7, #64]	; 0x40
 8002e32:	647a      	str	r2, [r7, #68]	; 0x44
 8002e34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e38:	f7fd fa3a 	bl	80002b0 <__aeabi_uldivmod>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	4613      	mov	r3, r2
 8002e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e46:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	3301      	adds	r3, #1
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002e68:	e0a6      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6a:	4b57      	ldr	r3, [pc, #348]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d02a      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b51      	ldr	r3, [pc, #324]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002e94:	2100      	movs	r1, #0
 8002e96:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002e98:	fb03 f201 	mul.w	r2, r3, r1
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ea6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eaa:	677a      	str	r2, [r7, #116]	; 0x74
 8002eac:	460a      	mov	r2, r1
 8002eae:	673a      	str	r2, [r7, #112]	; 0x70
 8002eb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb2:	4413      	add	r3, r2
 8002eb4:	677b      	str	r3, [r7, #116]	; 0x74
 8002eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eba:	2200      	movs	r2, #0
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8002ebe:	637a      	str	r2, [r7, #52]	; 0x34
 8002ec0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ec4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002ec8:	f7fd f9f2 	bl	80002b0 <__aeabi_uldivmod>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ed6:	e05b      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	099b      	lsrs	r3, r3, #6
 8002ede:	2200      	movs	r2, #0
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	464b      	mov	r3, r9
 8002ef8:	f04f 0000 	mov.w	r0, #0
 8002efc:	f04f 0100 	mov.w	r1, #0
 8002f00:	0159      	lsls	r1, r3, #5
 8002f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f06:	0150      	lsls	r0, r2, #5
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f12:	4649      	mov	r1, r9
 8002f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f30:	eb63 050b 	sbc.w	r5, r3, fp
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	00eb      	lsls	r3, r5, #3
 8002f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f42:	00e2      	lsls	r2, r4, #3
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	18e3      	adds	r3, r4, r3
 8002f4c:	603b      	str	r3, [r7, #0]
 8002f4e:	464b      	mov	r3, r9
 8002f50:	eb45 0303 	adc.w	r3, r5, r3
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f62:	4629      	mov	r1, r5
 8002f64:	028b      	lsls	r3, r1, #10
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	028a      	lsls	r2, r1, #10
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	61fa      	str	r2, [r7, #28]
 8002f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f82:	f7fd f995 	bl	80002b0 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0f1b      	lsrs	r3, r3, #28
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002fae:	e003      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x34c>)
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002fb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3798      	adds	r7, #152	; 0x98
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	017d7840 	.word	0x017d7840

08002fd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e28d      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8083 	beq.w	80030fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ff4:	4b94      	ldr	r3, [pc, #592]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d019      	beq.n	8003034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003000:	4b91      	ldr	r3, [pc, #580]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003008:	2b08      	cmp	r3, #8
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800300c:	4b8e      	ldr	r3, [pc, #568]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b84      	ldr	r3, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x124>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e25a      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x90>
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xcc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0xb4>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b73      	ldr	r3, [pc, #460]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a72      	ldr	r2, [pc, #456]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xcc>
 8003088:	4b6f      	ldr	r3, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6b      	ldr	r2, [pc, #428]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fd ffb8 	bl	800101c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd ffb4 	bl	800101c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e21f      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b61      	ldr	r3, [pc, #388]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xdc>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fd ffa4 	bl	800101c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd ffa0 	bl	800101c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e20b      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x104>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06f      	beq.n	80031e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003106:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d017      	beq.n	8003142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003112:	4b4d      	ldr	r3, [pc, #308]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x186>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1d3      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x278>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd ff4d 	bl	800101c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003186:	f7fd ff49 	bl	800101c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b4      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x278>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd ff2c 	bl	800101c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fd ff28 	bl	800101c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e193      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fd ff0c 	bl	800101c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7fd ff08 	bl	800101c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e173      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x274>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x234>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x27c>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fd fef5 	bl	800101c <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7fd fef1 	bl	800101c <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e15c      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b83      	ldr	r3, [pc, #524]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7f      	ldr	r3, [pc, #508]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a7e      	ldr	r2, [pc, #504]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b7c      	ldr	r3, [pc, #496]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fd feb1 	bl	800101c <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fd fead 	bl	800101c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e118      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x31e>
 80032e4:	4b66      	ldr	r3, [pc, #408]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x358>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x340>
 80032fa:	4b61      	ldr	r3, [pc, #388]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a60      	ldr	r2, [pc, #384]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x358>
 8003314:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a59      	ldr	r2, [pc, #356]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a56      	ldr	r2, [pc, #344]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd fe72 	bl	800101c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd fe6e 	bl	800101c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0d7      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x368>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd fe5c 	bl	800101c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd fe58 	bl	800101c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0c1      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80ad 	beq.w	8003500 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d060      	beq.n	8003474 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d145      	bne.n	8003446 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_RCC_OscConfig+0x4b4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fe2c 	bl	800101c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fe28 	bl	800101c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e093      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	491b      	ldr	r1, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x4b4>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fd fdfd 	bl	800101c <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fd fdf9 	bl	800101c <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e064      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003438:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x452>
 8003444:	e05c      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_RCC_OscConfig+0x4b4>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fde6 	bl	800101c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd fde2 	bl	800101c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04d      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x480>
 8003472:	e045      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e040      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
 8003480:	40023800 	.word	0x40023800
 8003484:	40007000 	.word	0x40007000
 8003488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348c:	4b1f      	ldr	r3, [pc, #124]	; (800350c <HAL_RCC_OscConfig+0x538>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d030      	beq.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d129      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d122      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d119      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10f      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e03f      	b.n	80035a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fc5c 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2224      	movs	r2, #36	; 0x24
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fd7b 	bl	8004050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08a      	sub	sp, #40	; 0x28
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	603b      	str	r3, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d17c      	bne.n	80036c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <HAL_UART_Transmit+0x2c>
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e075      	b.n	80036c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Transmit+0x3e>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e06e      	b.n	80036c6 <HAL_UART_Transmit+0x11c>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	; 0x21
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fe:	f7fd fd0d 	bl	800101c <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	88fa      	ldrh	r2, [r7, #6]
 800360e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	d108      	bne.n	800362c <HAL_UART_Transmit+0x82>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e003      	b.n	8003634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800363c:	e02a      	b.n	8003694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2180      	movs	r1, #128	; 0x80
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 faf9 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e036      	b.n	80036c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	3302      	adds	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	e007      	b.n	8003686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	3301      	adds	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1cf      	bne.n	800363e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fac9 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e006      	b.n	80036c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b0ba      	sub	sp, #232	; 0xe8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800370e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_UART_IRQHandler+0x66>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fbd3 	bl	8003eda <UART_Receive_IT>
      return;
 8003734:	e256      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80de 	beq.w	80038fc <HAL_UART_IRQHandler+0x22c>
 8003740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80d1 	beq.w	80038fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_UART_IRQHandler+0xae>
 8003766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_UART_IRQHandler+0xd2>
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
 80037ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d011      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
 80037d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0208 	orr.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 81ed 	beq.w	8003bda <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x14e>
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb5e 	bl	8003eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_UART_IRQHandler+0x17a>
 8003842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d04f      	beq.n	80038ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa66 	bl	8003d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d141      	bne.n	80038e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003874:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800388a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1d9      	bne.n	800385e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4a7d      	ldr	r2, [pc, #500]	; (8003aac <HAL_UART_IRQHandler+0x3dc>)
 80038b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd ff77 	bl	80017b2 <HAL_DMA_Abort_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038d4:	4610      	mov	r0, r2
 80038d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e00e      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f99a 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e00a      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f996 	bl	8003c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e006      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f992 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80038f6:	e170      	b.n	8003bda <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	bf00      	nop
    return;
 80038fa:	e16e      	b.n	8003bda <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 814a 	bne.w	8003b9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8143 	beq.w	8003b9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 813c 	beq.w	8003b9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	f040 80b4 	bne.w	8003ab0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8140 	beq.w	8003bde <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003966:	429a      	cmp	r2, r3
 8003968:	f080 8139 	bcs.w	8003bde <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003972:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	f000 8088 	beq.w	8003a92 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003998:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800399c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1d9      	bne.n	8003982 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80039de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80039f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80039f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e1      	bne.n	80039ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3314      	adds	r3, #20
 8003a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e3      	bne.n	8003a0a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a62:	f023 0310 	bic.w	r3, r3, #16
 8003a66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a74:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a76:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e3      	bne.n	8003a50 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fd fe20 	bl	80016d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8c0 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aa8:	e099      	b.n	8003bde <HAL_UART_IRQHandler+0x50e>
 8003aaa:	bf00      	nop
 8003aac:	08003de3 	.word	0x08003de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 808b 	beq.w	8003be2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8086 	beq.w	8003be2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003afa:	647a      	str	r2, [r7, #68]	; 0x44
 8003afc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3314      	adds	r3, #20
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b32:	633a      	str	r2, [r7, #48]	; 0x30
 8003b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1e3      	bne.n	8003b0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0310 	bic.w	r3, r3, #16
 8003b6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003b78:	61fa      	str	r2, [r7, #28]
 8003b7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	69b9      	ldr	r1, [r7, #24]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	617b      	str	r3, [r7, #20]
   return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e3      	bne.n	8003b54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f848 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b98:	e023      	b.n	8003be2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_UART_IRQHandler+0x4ea>
 8003ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f929 	bl	8003e0a <UART_Transmit_IT>
    return;
 8003bb8:	e014      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_UART_IRQHandler+0x514>
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f969 	bl	8003eaa <UART_EndTransmit_IT>
    return;
 8003bd8:	e004      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
    return;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
      return;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
      return;
 8003be2:	bf00      	nop
  }
}
 8003be4:	37e8      	adds	r7, #232	; 0xe8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b090      	sub	sp, #64	; 0x40
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e050      	b.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d04c      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c60:	f7fd f9dc 	bl	800101c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d241      	bcs.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c90:	637a      	str	r2, [r7, #52]	; 0x34
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc4:	623a      	str	r2, [r7, #32]
 8003cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69f9      	ldr	r1, [r7, #28]
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e00f      	b.n	8003d14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d09f      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3740      	adds	r7, #64	; 0x40
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b095      	sub	sp, #84	; 0x54
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	330c      	adds	r3, #12
 8003d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d44:	643a      	str	r2, [r7, #64]	; 0x40
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d80:	e841 2300 	strex	r3, r2, [r1]
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e5      	bne.n	8003d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d119      	bne.n	8003dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0310 	bic.w	r3, r3, #16
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003db4:	61ba      	str	r2, [r7, #24]
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dd6:	bf00      	nop
 8003dd8:	3754      	adds	r7, #84	; 0x54
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff ff09 	bl	8003c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b21      	cmp	r3, #33	; 0x21
 8003e1c:	d13e      	bne.n	8003e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d114      	bne.n	8003e52 <UART_Transmit_IT+0x48>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d110      	bne.n	8003e52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	621a      	str	r2, [r3, #32]
 8003e50:	e008      	b.n	8003e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6211      	str	r1, [r2, #32]
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4619      	mov	r1, r3
 8003e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10f      	bne.n	8003e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fe8e 	bl	8003bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b08c      	sub	sp, #48	; 0x30
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	f040 80ab 	bne.w	8004046 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef8:	d117      	bne.n	8003f2a <UART_Receive_IT+0x50>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d113      	bne.n	8003f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	e026      	b.n	8003f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d007      	beq.n	8003f4e <UART_Receive_IT+0x74>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <UART_Receive_IT+0x82>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e008      	b.n	8003f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	4619      	mov	r1, r3
 8003f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d15a      	bne.n	8004042 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0220 	bic.w	r2, r2, #32
 8003f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d135      	bne.n	8004038 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	330c      	adds	r3, #12
 8003fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff2:	623a      	str	r2, [r7, #32]
 8003ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	69f9      	ldr	r1, [r7, #28]
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d10a      	bne.n	800402a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fdf9 	bl	8003c28 <HAL_UARTEx_RxEventCallback>
 8004036:	e002      	b.n	800403e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fde1 	bl	8003c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	e002      	b.n	8004048 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	e000      	b.n	8004048 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
  }
}
 8004048:	4618      	mov	r0, r3
 800404a:	3730      	adds	r7, #48	; 0x30
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004054:	b0c0      	sub	sp, #256	; 0x100
 8004056:	af00      	add	r7, sp, #0
 8004058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406c:	68d9      	ldr	r1, [r3, #12]
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	ea40 0301 	orr.w	r3, r0, r1
 8004078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040a8:	f021 010c 	bic.w	r1, r1, #12
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040b6:	430b      	orrs	r3, r1
 80040b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ca:	6999      	ldr	r1, [r3, #24]
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	ea40 0301 	orr.w	r3, r0, r1
 80040d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b8f      	ldr	r3, [pc, #572]	; (800431c <UART_SetConfig+0x2cc>)
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d005      	beq.n	80040f0 <UART_SetConfig+0xa0>
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <UART_SetConfig+0x2d0>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d104      	bne.n	80040fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fe fdb2 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 80040f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040f8:	e003      	b.n	8004102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040fa:	f7fe fd99 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 80040fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410c:	f040 810c 	bne.w	8004328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004114:	2200      	movs	r2, #0
 8004116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800411a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800411e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004122:	4622      	mov	r2, r4
 8004124:	462b      	mov	r3, r5
 8004126:	1891      	adds	r1, r2, r2
 8004128:	65b9      	str	r1, [r7, #88]	; 0x58
 800412a:	415b      	adcs	r3, r3
 800412c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800412e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004132:	4621      	mov	r1, r4
 8004134:	eb12 0801 	adds.w	r8, r2, r1
 8004138:	4629      	mov	r1, r5
 800413a:	eb43 0901 	adc.w	r9, r3, r1
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800414a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800414e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004152:	4690      	mov	r8, r2
 8004154:	4699      	mov	r9, r3
 8004156:	4623      	mov	r3, r4
 8004158:	eb18 0303 	adds.w	r3, r8, r3
 800415c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004160:	462b      	mov	r3, r5
 8004162:	eb49 0303 	adc.w	r3, r9, r3
 8004166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800417a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800417e:	460b      	mov	r3, r1
 8004180:	18db      	adds	r3, r3, r3
 8004182:	653b      	str	r3, [r7, #80]	; 0x50
 8004184:	4613      	mov	r3, r2
 8004186:	eb42 0303 	adc.w	r3, r2, r3
 800418a:	657b      	str	r3, [r7, #84]	; 0x54
 800418c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004194:	f7fc f88c 	bl	80002b0 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <UART_SetConfig+0x2d4>)
 800419e:	fba3 2302 	umull	r2, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	011c      	lsls	r4, r3, #4
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	64b9      	str	r1, [r7, #72]	; 0x48
 80041c0:	415b      	adcs	r3, r3
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041c8:	4641      	mov	r1, r8
 80041ca:	eb12 0a01 	adds.w	sl, r2, r1
 80041ce:	4649      	mov	r1, r9
 80041d0:	eb43 0b01 	adc.w	fp, r3, r1
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e8:	4692      	mov	sl, r2
 80041ea:	469b      	mov	fp, r3
 80041ec:	4643      	mov	r3, r8
 80041ee:	eb1a 0303 	adds.w	r3, sl, r3
 80041f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f6:	464b      	mov	r3, r9
 80041f8:	eb4b 0303 	adc.w	r3, fp, r3
 80041fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800420c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004214:	460b      	mov	r3, r1
 8004216:	18db      	adds	r3, r3, r3
 8004218:	643b      	str	r3, [r7, #64]	; 0x40
 800421a:	4613      	mov	r3, r2
 800421c:	eb42 0303 	adc.w	r3, r2, r3
 8004220:	647b      	str	r3, [r7, #68]	; 0x44
 8004222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800422a:	f7fc f841 	bl	80002b0 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4611      	mov	r1, r2
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <UART_SetConfig+0x2d4>)
 8004236:	fba3 2301 	umull	r2, r3, r3, r1
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2264      	movs	r2, #100	; 0x64
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	1acb      	subs	r3, r1, r3
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <UART_SetConfig+0x2d4>)
 800424c:	fba3 2302 	umull	r2, r3, r3, r2
 8004250:	095b      	lsrs	r3, r3, #5
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004258:	441c      	add	r4, r3
 800425a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	63b9      	str	r1, [r7, #56]	; 0x38
 8004274:	415b      	adcs	r3, r3
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800427c:	4641      	mov	r1, r8
 800427e:	1851      	adds	r1, r2, r1
 8004280:	6339      	str	r1, [r7, #48]	; 0x30
 8004282:	4649      	mov	r1, r9
 8004284:	414b      	adcs	r3, r1
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004294:	4659      	mov	r1, fp
 8004296:	00cb      	lsls	r3, r1, #3
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429e:	4651      	mov	r1, sl
 80042a0:	00ca      	lsls	r2, r1, #3
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	4642      	mov	r2, r8
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b0:	464b      	mov	r3, r9
 80042b2:	460a      	mov	r2, r1
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042d0:	460b      	mov	r3, r1
 80042d2:	18db      	adds	r3, r3, r3
 80042d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d6:	4613      	mov	r3, r2
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042e6:	f7fb ffe3 	bl	80002b0 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <UART_SetConfig+0x2d4>)
 80042f0:	fba3 1302 	umull	r1, r3, r3, r2
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	2164      	movs	r1, #100	; 0x64
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	3332      	adds	r3, #50	; 0x32
 8004302:	4a08      	ldr	r2, [pc, #32]	; (8004324 <UART_SetConfig+0x2d4>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	095b      	lsrs	r3, r3, #5
 800430a:	f003 0207 	and.w	r2, r3, #7
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4422      	add	r2, r4
 8004316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004318:	e105      	b.n	8004526 <UART_SetConfig+0x4d6>
 800431a:	bf00      	nop
 800431c:	40011000 	.word	0x40011000
 8004320:	40011400 	.word	0x40011400
 8004324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800433a:	4642      	mov	r2, r8
 800433c:	464b      	mov	r3, r9
 800433e:	1891      	adds	r1, r2, r2
 8004340:	6239      	str	r1, [r7, #32]
 8004342:	415b      	adcs	r3, r3
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
 8004346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800434a:	4641      	mov	r1, r8
 800434c:	1854      	adds	r4, r2, r1
 800434e:	4649      	mov	r1, r9
 8004350:	eb43 0501 	adc.w	r5, r3, r1
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	00eb      	lsls	r3, r5, #3
 800435e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	4643      	mov	r3, r8
 800436a:	18e3      	adds	r3, r4, r3
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004370:	464b      	mov	r3, r9
 8004372:	eb45 0303 	adc.w	r3, r5, r3
 8004376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004396:	4629      	mov	r1, r5
 8004398:	008b      	lsls	r3, r1, #2
 800439a:	4621      	mov	r1, r4
 800439c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a0:	4621      	mov	r1, r4
 80043a2:	008a      	lsls	r2, r1, #2
 80043a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043a8:	f7fb ff82 	bl	80002b0 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4b60      	ldr	r3, [pc, #384]	; (8004534 <UART_SetConfig+0x4e4>)
 80043b2:	fba3 2302 	umull	r2, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	011c      	lsls	r4, r3, #4
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	61b9      	str	r1, [r7, #24]
 80043d4:	415b      	adcs	r3, r3
 80043d6:	61fb      	str	r3, [r7, #28]
 80043d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6139      	str	r1, [r7, #16]
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	67bb      	str	r3, [r7, #120]	; 0x78
 8004426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004434:	4649      	mov	r1, r9
 8004436:	008b      	lsls	r3, r1, #2
 8004438:	4641      	mov	r1, r8
 800443a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800443e:	4641      	mov	r1, r8
 8004440:	008a      	lsls	r2, r1, #2
 8004442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004446:	f7fb ff33 	bl	80002b0 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <UART_SetConfig+0x4e4>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	3332      	adds	r3, #50	; 0x32
 8004462:	4a34      	ldr	r2, [pc, #208]	; (8004534 <UART_SetConfig+0x4e4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800446e:	441c      	add	r4, r3
 8004470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004474:	2200      	movs	r2, #0
 8004476:	673b      	str	r3, [r7, #112]	; 0x70
 8004478:	677a      	str	r2, [r7, #116]	; 0x74
 800447a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800447e:	4642      	mov	r2, r8
 8004480:	464b      	mov	r3, r9
 8004482:	1891      	adds	r1, r2, r2
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	415b      	adcs	r3, r3
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800448e:	4641      	mov	r1, r8
 8004490:	1851      	adds	r1, r2, r1
 8004492:	6039      	str	r1, [r7, #0]
 8004494:	4649      	mov	r1, r9
 8004496:	414b      	adcs	r3, r1
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a6:	4659      	mov	r1, fp
 80044a8:	00cb      	lsls	r3, r1, #3
 80044aa:	4651      	mov	r1, sl
 80044ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b0:	4651      	mov	r1, sl
 80044b2:	00ca      	lsls	r2, r1, #3
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	4603      	mov	r3, r0
 80044ba:	4642      	mov	r2, r8
 80044bc:	189b      	adds	r3, r3, r2
 80044be:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c0:	464b      	mov	r3, r9
 80044c2:	460a      	mov	r2, r1
 80044c4:	eb42 0303 	adc.w	r3, r2, r3
 80044c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	663b      	str	r3, [r7, #96]	; 0x60
 80044d4:	667a      	str	r2, [r7, #100]	; 0x64
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044e2:	4649      	mov	r1, r9
 80044e4:	008b      	lsls	r3, r1, #2
 80044e6:	4641      	mov	r1, r8
 80044e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ec:	4641      	mov	r1, r8
 80044ee:	008a      	lsls	r2, r1, #2
 80044f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044f4:	f7fb fedc 	bl	80002b0 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <UART_SetConfig+0x4e4>)
 80044fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2164      	movs	r1, #100	; 0x64
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	3332      	adds	r3, #50	; 0x32
 8004510:	4a08      	ldr	r2, [pc, #32]	; (8004534 <UART_SetConfig+0x4e4>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	f003 020f 	and.w	r2, r3, #15
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4422      	add	r2, r4
 8004524:	609a      	str	r2, [r3, #8]
}
 8004526:	bf00      	nop
 8004528:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800452c:	46bd      	mov	sp, r7
 800452e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004532:	bf00      	nop
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4d0d      	ldr	r5, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1b64      	subs	r4, r4, r5
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2600      	movs	r6, #0
 8004550:	42a6      	cmp	r6, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4d0b      	ldr	r5, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f001 f824 	bl	80055a4 <_init>
 800455c:	1b64      	subs	r4, r4, r5
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2600      	movs	r6, #0
 8004562:	42a6      	cmp	r6, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f855 3b04 	ldr.w	r3, [r5], #4
 800456c:	4798      	blx	r3
 800456e:	3601      	adds	r6, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f855 3b04 	ldr.w	r3, [r5], #4
 8004576:	4798      	blx	r3
 8004578:	3601      	adds	r6, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	0800579c 	.word	0x0800579c
 8004580:	0800579c 	.word	0x0800579c
 8004584:	0800579c 	.word	0x0800579c
 8004588:	080057a0 	.word	0x080057a0

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <_free_r>:
 800459c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800459e:	2900      	cmp	r1, #0
 80045a0:	d044      	beq.n	800462c <_free_r+0x90>
 80045a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a6:	9001      	str	r0, [sp, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f1a1 0404 	sub.w	r4, r1, #4
 80045ae:	bfb8      	it	lt
 80045b0:	18e4      	addlt	r4, r4, r3
 80045b2:	f000 fc51 	bl	8004e58 <__malloc_lock>
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <_free_r+0x94>)
 80045b8:	9801      	ldr	r0, [sp, #4]
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	b933      	cbnz	r3, 80045cc <_free_r+0x30>
 80045be:	6063      	str	r3, [r4, #4]
 80045c0:	6014      	str	r4, [r2, #0]
 80045c2:	b003      	add	sp, #12
 80045c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045c8:	f000 bc4c 	b.w	8004e64 <__malloc_unlock>
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d908      	bls.n	80045e2 <_free_r+0x46>
 80045d0:	6825      	ldr	r5, [r4, #0]
 80045d2:	1961      	adds	r1, r4, r5
 80045d4:	428b      	cmp	r3, r1
 80045d6:	bf01      	itttt	eq
 80045d8:	6819      	ldreq	r1, [r3, #0]
 80045da:	685b      	ldreq	r3, [r3, #4]
 80045dc:	1949      	addeq	r1, r1, r5
 80045de:	6021      	streq	r1, [r4, #0]
 80045e0:	e7ed      	b.n	80045be <_free_r+0x22>
 80045e2:	461a      	mov	r2, r3
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	b10b      	cbz	r3, 80045ec <_free_r+0x50>
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d9fa      	bls.n	80045e2 <_free_r+0x46>
 80045ec:	6811      	ldr	r1, [r2, #0]
 80045ee:	1855      	adds	r5, r2, r1
 80045f0:	42a5      	cmp	r5, r4
 80045f2:	d10b      	bne.n	800460c <_free_r+0x70>
 80045f4:	6824      	ldr	r4, [r4, #0]
 80045f6:	4421      	add	r1, r4
 80045f8:	1854      	adds	r4, r2, r1
 80045fa:	42a3      	cmp	r3, r4
 80045fc:	6011      	str	r1, [r2, #0]
 80045fe:	d1e0      	bne.n	80045c2 <_free_r+0x26>
 8004600:	681c      	ldr	r4, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	6053      	str	r3, [r2, #4]
 8004606:	4421      	add	r1, r4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	e7da      	b.n	80045c2 <_free_r+0x26>
 800460c:	d902      	bls.n	8004614 <_free_r+0x78>
 800460e:	230c      	movs	r3, #12
 8004610:	6003      	str	r3, [r0, #0]
 8004612:	e7d6      	b.n	80045c2 <_free_r+0x26>
 8004614:	6825      	ldr	r5, [r4, #0]
 8004616:	1961      	adds	r1, r4, r5
 8004618:	428b      	cmp	r3, r1
 800461a:	bf04      	itt	eq
 800461c:	6819      	ldreq	r1, [r3, #0]
 800461e:	685b      	ldreq	r3, [r3, #4]
 8004620:	6063      	str	r3, [r4, #4]
 8004622:	bf04      	itt	eq
 8004624:	1949      	addeq	r1, r1, r5
 8004626:	6021      	streq	r1, [r4, #0]
 8004628:	6054      	str	r4, [r2, #4]
 800462a:	e7ca      	b.n	80045c2 <_free_r+0x26>
 800462c:	b003      	add	sp, #12
 800462e:	bd30      	pop	{r4, r5, pc}
 8004630:	200001bc 	.word	0x200001bc

08004634 <sbrk_aligned>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4e0e      	ldr	r6, [pc, #56]	; (8004670 <sbrk_aligned+0x3c>)
 8004638:	460c      	mov	r4, r1
 800463a:	6831      	ldr	r1, [r6, #0]
 800463c:	4605      	mov	r5, r0
 800463e:	b911      	cbnz	r1, 8004646 <sbrk_aligned+0x12>
 8004640:	f000 f91a 	bl	8004878 <_sbrk_r>
 8004644:	6030      	str	r0, [r6, #0]
 8004646:	4621      	mov	r1, r4
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f915 	bl	8004878 <_sbrk_r>
 800464e:	1c43      	adds	r3, r0, #1
 8004650:	d00a      	beq.n	8004668 <sbrk_aligned+0x34>
 8004652:	1cc4      	adds	r4, r0, #3
 8004654:	f024 0403 	bic.w	r4, r4, #3
 8004658:	42a0      	cmp	r0, r4
 800465a:	d007      	beq.n	800466c <sbrk_aligned+0x38>
 800465c:	1a21      	subs	r1, r4, r0
 800465e:	4628      	mov	r0, r5
 8004660:	f000 f90a 	bl	8004878 <_sbrk_r>
 8004664:	3001      	adds	r0, #1
 8004666:	d101      	bne.n	800466c <sbrk_aligned+0x38>
 8004668:	f04f 34ff 	mov.w	r4, #4294967295
 800466c:	4620      	mov	r0, r4
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	200001c0 	.word	0x200001c0

08004674 <_malloc_r>:
 8004674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004678:	1ccd      	adds	r5, r1, #3
 800467a:	f025 0503 	bic.w	r5, r5, #3
 800467e:	3508      	adds	r5, #8
 8004680:	2d0c      	cmp	r5, #12
 8004682:	bf38      	it	cc
 8004684:	250c      	movcc	r5, #12
 8004686:	2d00      	cmp	r5, #0
 8004688:	4607      	mov	r7, r0
 800468a:	db01      	blt.n	8004690 <_malloc_r+0x1c>
 800468c:	42a9      	cmp	r1, r5
 800468e:	d905      	bls.n	800469c <_malloc_r+0x28>
 8004690:	230c      	movs	r3, #12
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	2600      	movs	r6, #0
 8004696:	4630      	mov	r0, r6
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800469c:	4e2e      	ldr	r6, [pc, #184]	; (8004758 <_malloc_r+0xe4>)
 800469e:	f000 fbdb 	bl	8004e58 <__malloc_lock>
 80046a2:	6833      	ldr	r3, [r6, #0]
 80046a4:	461c      	mov	r4, r3
 80046a6:	bb34      	cbnz	r4, 80046f6 <_malloc_r+0x82>
 80046a8:	4629      	mov	r1, r5
 80046aa:	4638      	mov	r0, r7
 80046ac:	f7ff ffc2 	bl	8004634 <sbrk_aligned>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	4604      	mov	r4, r0
 80046b4:	d14d      	bne.n	8004752 <_malloc_r+0xde>
 80046b6:	6834      	ldr	r4, [r6, #0]
 80046b8:	4626      	mov	r6, r4
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	d140      	bne.n	8004740 <_malloc_r+0xcc>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	4631      	mov	r1, r6
 80046c2:	4638      	mov	r0, r7
 80046c4:	eb04 0803 	add.w	r8, r4, r3
 80046c8:	f000 f8d6 	bl	8004878 <_sbrk_r>
 80046cc:	4580      	cmp	r8, r0
 80046ce:	d13a      	bne.n	8004746 <_malloc_r+0xd2>
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	3503      	adds	r5, #3
 80046d4:	1a6d      	subs	r5, r5, r1
 80046d6:	f025 0503 	bic.w	r5, r5, #3
 80046da:	3508      	adds	r5, #8
 80046dc:	2d0c      	cmp	r5, #12
 80046de:	bf38      	it	cc
 80046e0:	250c      	movcc	r5, #12
 80046e2:	4629      	mov	r1, r5
 80046e4:	4638      	mov	r0, r7
 80046e6:	f7ff ffa5 	bl	8004634 <sbrk_aligned>
 80046ea:	3001      	adds	r0, #1
 80046ec:	d02b      	beq.n	8004746 <_malloc_r+0xd2>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	442b      	add	r3, r5
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	e00e      	b.n	8004714 <_malloc_r+0xa0>
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	1b52      	subs	r2, r2, r5
 80046fa:	d41e      	bmi.n	800473a <_malloc_r+0xc6>
 80046fc:	2a0b      	cmp	r2, #11
 80046fe:	d916      	bls.n	800472e <_malloc_r+0xba>
 8004700:	1961      	adds	r1, r4, r5
 8004702:	42a3      	cmp	r3, r4
 8004704:	6025      	str	r5, [r4, #0]
 8004706:	bf18      	it	ne
 8004708:	6059      	strne	r1, [r3, #4]
 800470a:	6863      	ldr	r3, [r4, #4]
 800470c:	bf08      	it	eq
 800470e:	6031      	streq	r1, [r6, #0]
 8004710:	5162      	str	r2, [r4, r5]
 8004712:	604b      	str	r3, [r1, #4]
 8004714:	4638      	mov	r0, r7
 8004716:	f104 060b 	add.w	r6, r4, #11
 800471a:	f000 fba3 	bl	8004e64 <__malloc_unlock>
 800471e:	f026 0607 	bic.w	r6, r6, #7
 8004722:	1d23      	adds	r3, r4, #4
 8004724:	1af2      	subs	r2, r6, r3
 8004726:	d0b6      	beq.n	8004696 <_malloc_r+0x22>
 8004728:	1b9b      	subs	r3, r3, r6
 800472a:	50a3      	str	r3, [r4, r2]
 800472c:	e7b3      	b.n	8004696 <_malloc_r+0x22>
 800472e:	6862      	ldr	r2, [r4, #4]
 8004730:	42a3      	cmp	r3, r4
 8004732:	bf0c      	ite	eq
 8004734:	6032      	streq	r2, [r6, #0]
 8004736:	605a      	strne	r2, [r3, #4]
 8004738:	e7ec      	b.n	8004714 <_malloc_r+0xa0>
 800473a:	4623      	mov	r3, r4
 800473c:	6864      	ldr	r4, [r4, #4]
 800473e:	e7b2      	b.n	80046a6 <_malloc_r+0x32>
 8004740:	4634      	mov	r4, r6
 8004742:	6876      	ldr	r6, [r6, #4]
 8004744:	e7b9      	b.n	80046ba <_malloc_r+0x46>
 8004746:	230c      	movs	r3, #12
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4638      	mov	r0, r7
 800474c:	f000 fb8a 	bl	8004e64 <__malloc_unlock>
 8004750:	e7a1      	b.n	8004696 <_malloc_r+0x22>
 8004752:	6025      	str	r5, [r4, #0]
 8004754:	e7de      	b.n	8004714 <_malloc_r+0xa0>
 8004756:	bf00      	nop
 8004758:	200001bc 	.word	0x200001bc

0800475c <iprintf>:
 800475c:	b40f      	push	{r0, r1, r2, r3}
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <iprintf+0x2c>)
 8004760:	b513      	push	{r0, r1, r4, lr}
 8004762:	681c      	ldr	r4, [r3, #0]
 8004764:	b124      	cbz	r4, 8004770 <iprintf+0x14>
 8004766:	69a3      	ldr	r3, [r4, #24]
 8004768:	b913      	cbnz	r3, 8004770 <iprintf+0x14>
 800476a:	4620      	mov	r0, r4
 800476c:	f000 fa6e 	bl	8004c4c <__sinit>
 8004770:	ab05      	add	r3, sp, #20
 8004772:	9a04      	ldr	r2, [sp, #16]
 8004774:	68a1      	ldr	r1, [r4, #8]
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	4620      	mov	r0, r4
 800477a:	f000 fba3 	bl	8004ec4 <_vfiprintf_r>
 800477e:	b002      	add	sp, #8
 8004780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004784:	b004      	add	sp, #16
 8004786:	4770      	bx	lr
 8004788:	2000000c 	.word	0x2000000c

0800478c <_puts_r>:
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	460e      	mov	r6, r1
 8004790:	4605      	mov	r5, r0
 8004792:	b118      	cbz	r0, 800479c <_puts_r+0x10>
 8004794:	6983      	ldr	r3, [r0, #24]
 8004796:	b90b      	cbnz	r3, 800479c <_puts_r+0x10>
 8004798:	f000 fa58 	bl	8004c4c <__sinit>
 800479c:	69ab      	ldr	r3, [r5, #24]
 800479e:	68ac      	ldr	r4, [r5, #8]
 80047a0:	b913      	cbnz	r3, 80047a8 <_puts_r+0x1c>
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 fa52 	bl	8004c4c <__sinit>
 80047a8:	4b2c      	ldr	r3, [pc, #176]	; (800485c <_puts_r+0xd0>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	d120      	bne.n	80047f0 <_puts_r+0x64>
 80047ae:	686c      	ldr	r4, [r5, #4]
 80047b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047b2:	07db      	lsls	r3, r3, #31
 80047b4:	d405      	bmi.n	80047c2 <_puts_r+0x36>
 80047b6:	89a3      	ldrh	r3, [r4, #12]
 80047b8:	0598      	lsls	r0, r3, #22
 80047ba:	d402      	bmi.n	80047c2 <_puts_r+0x36>
 80047bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047be:	f000 fae3 	bl	8004d88 <__retarget_lock_acquire_recursive>
 80047c2:	89a3      	ldrh	r3, [r4, #12]
 80047c4:	0719      	lsls	r1, r3, #28
 80047c6:	d51d      	bpl.n	8004804 <_puts_r+0x78>
 80047c8:	6923      	ldr	r3, [r4, #16]
 80047ca:	b1db      	cbz	r3, 8004804 <_puts_r+0x78>
 80047cc:	3e01      	subs	r6, #1
 80047ce:	68a3      	ldr	r3, [r4, #8]
 80047d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047d4:	3b01      	subs	r3, #1
 80047d6:	60a3      	str	r3, [r4, #8]
 80047d8:	bb39      	cbnz	r1, 800482a <_puts_r+0x9e>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	da38      	bge.n	8004850 <_puts_r+0xc4>
 80047de:	4622      	mov	r2, r4
 80047e0:	210a      	movs	r1, #10
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f858 	bl	8004898 <__swbuf_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d011      	beq.n	8004810 <_puts_r+0x84>
 80047ec:	250a      	movs	r5, #10
 80047ee:	e011      	b.n	8004814 <_puts_r+0x88>
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <_puts_r+0xd4>)
 80047f2:	429c      	cmp	r4, r3
 80047f4:	d101      	bne.n	80047fa <_puts_r+0x6e>
 80047f6:	68ac      	ldr	r4, [r5, #8]
 80047f8:	e7da      	b.n	80047b0 <_puts_r+0x24>
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <_puts_r+0xd8>)
 80047fc:	429c      	cmp	r4, r3
 80047fe:	bf08      	it	eq
 8004800:	68ec      	ldreq	r4, [r5, #12]
 8004802:	e7d5      	b.n	80047b0 <_puts_r+0x24>
 8004804:	4621      	mov	r1, r4
 8004806:	4628      	mov	r0, r5
 8004808:	f000 f898 	bl	800493c <__swsetup_r>
 800480c:	2800      	cmp	r0, #0
 800480e:	d0dd      	beq.n	80047cc <_puts_r+0x40>
 8004810:	f04f 35ff 	mov.w	r5, #4294967295
 8004814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004816:	07da      	lsls	r2, r3, #31
 8004818:	d405      	bmi.n	8004826 <_puts_r+0x9a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	059b      	lsls	r3, r3, #22
 800481e:	d402      	bmi.n	8004826 <_puts_r+0x9a>
 8004820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004822:	f000 fab2 	bl	8004d8a <__retarget_lock_release_recursive>
 8004826:	4628      	mov	r0, r5
 8004828:	bd70      	pop	{r4, r5, r6, pc}
 800482a:	2b00      	cmp	r3, #0
 800482c:	da04      	bge.n	8004838 <_puts_r+0xac>
 800482e:	69a2      	ldr	r2, [r4, #24]
 8004830:	429a      	cmp	r2, r3
 8004832:	dc06      	bgt.n	8004842 <_puts_r+0xb6>
 8004834:	290a      	cmp	r1, #10
 8004836:	d004      	beq.n	8004842 <_puts_r+0xb6>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	7019      	strb	r1, [r3, #0]
 8004840:	e7c5      	b.n	80047ce <_puts_r+0x42>
 8004842:	4622      	mov	r2, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f000 f827 	bl	8004898 <__swbuf_r>
 800484a:	3001      	adds	r0, #1
 800484c:	d1bf      	bne.n	80047ce <_puts_r+0x42>
 800484e:	e7df      	b.n	8004810 <_puts_r+0x84>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	250a      	movs	r5, #10
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	6022      	str	r2, [r4, #0]
 8004858:	701d      	strb	r5, [r3, #0]
 800485a:	e7db      	b.n	8004814 <_puts_r+0x88>
 800485c:	08005720 	.word	0x08005720
 8004860:	08005740 	.word	0x08005740
 8004864:	08005700 	.word	0x08005700

08004868 <puts>:
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <puts+0xc>)
 800486a:	4601      	mov	r1, r0
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	f7ff bf8d 	b.w	800478c <_puts_r>
 8004872:	bf00      	nop
 8004874:	2000000c 	.word	0x2000000c

08004878 <_sbrk_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4d06      	ldr	r5, [pc, #24]	; (8004894 <_sbrk_r+0x1c>)
 800487c:	2300      	movs	r3, #0
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fc fa1a 	bl	8000cbc <_sbrk>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_sbrk_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_sbrk_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200001c8 	.word	0x200001c8

08004898 <__swbuf_r>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	460e      	mov	r6, r1
 800489c:	4614      	mov	r4, r2
 800489e:	4605      	mov	r5, r0
 80048a0:	b118      	cbz	r0, 80048aa <__swbuf_r+0x12>
 80048a2:	6983      	ldr	r3, [r0, #24]
 80048a4:	b90b      	cbnz	r3, 80048aa <__swbuf_r+0x12>
 80048a6:	f000 f9d1 	bl	8004c4c <__sinit>
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <__swbuf_r+0x98>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	d12b      	bne.n	8004908 <__swbuf_r+0x70>
 80048b0:	686c      	ldr	r4, [r5, #4]
 80048b2:	69a3      	ldr	r3, [r4, #24]
 80048b4:	60a3      	str	r3, [r4, #8]
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	071a      	lsls	r2, r3, #28
 80048ba:	d52f      	bpl.n	800491c <__swbuf_r+0x84>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	b36b      	cbz	r3, 800491c <__swbuf_r+0x84>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	6963      	ldr	r3, [r4, #20]
 80048c8:	b2f6      	uxtb	r6, r6
 80048ca:	4283      	cmp	r3, r0
 80048cc:	4637      	mov	r7, r6
 80048ce:	dc04      	bgt.n	80048da <__swbuf_r+0x42>
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f926 	bl	8004b24 <_fflush_r>
 80048d8:	bb30      	cbnz	r0, 8004928 <__swbuf_r+0x90>
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	3b01      	subs	r3, #1
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	701e      	strb	r6, [r3, #0]
 80048e8:	6963      	ldr	r3, [r4, #20]
 80048ea:	3001      	adds	r0, #1
 80048ec:	4283      	cmp	r3, r0
 80048ee:	d004      	beq.n	80048fa <__swbuf_r+0x62>
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	07db      	lsls	r3, r3, #31
 80048f4:	d506      	bpl.n	8004904 <__swbuf_r+0x6c>
 80048f6:	2e0a      	cmp	r6, #10
 80048f8:	d104      	bne.n	8004904 <__swbuf_r+0x6c>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f911 	bl	8004b24 <_fflush_r>
 8004902:	b988      	cbnz	r0, 8004928 <__swbuf_r+0x90>
 8004904:	4638      	mov	r0, r7
 8004906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <__swbuf_r+0x9c>)
 800490a:	429c      	cmp	r4, r3
 800490c:	d101      	bne.n	8004912 <__swbuf_r+0x7a>
 800490e:	68ac      	ldr	r4, [r5, #8]
 8004910:	e7cf      	b.n	80048b2 <__swbuf_r+0x1a>
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <__swbuf_r+0xa0>)
 8004914:	429c      	cmp	r4, r3
 8004916:	bf08      	it	eq
 8004918:	68ec      	ldreq	r4, [r5, #12]
 800491a:	e7ca      	b.n	80048b2 <__swbuf_r+0x1a>
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f000 f80c 	bl	800493c <__swsetup_r>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0cb      	beq.n	80048c0 <__swbuf_r+0x28>
 8004928:	f04f 37ff 	mov.w	r7, #4294967295
 800492c:	e7ea      	b.n	8004904 <__swbuf_r+0x6c>
 800492e:	bf00      	nop
 8004930:	08005720 	.word	0x08005720
 8004934:	08005740 	.word	0x08005740
 8004938:	08005700 	.word	0x08005700

0800493c <__swsetup_r>:
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <__swsetup_r+0xcc>)
 800493e:	b570      	push	{r4, r5, r6, lr}
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	4606      	mov	r6, r0
 8004944:	460c      	mov	r4, r1
 8004946:	b125      	cbz	r5, 8004952 <__swsetup_r+0x16>
 8004948:	69ab      	ldr	r3, [r5, #24]
 800494a:	b913      	cbnz	r3, 8004952 <__swsetup_r+0x16>
 800494c:	4628      	mov	r0, r5
 800494e:	f000 f97d 	bl	8004c4c <__sinit>
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <__swsetup_r+0xd0>)
 8004954:	429c      	cmp	r4, r3
 8004956:	d10f      	bne.n	8004978 <__swsetup_r+0x3c>
 8004958:	686c      	ldr	r4, [r5, #4]
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004960:	0719      	lsls	r1, r3, #28
 8004962:	d42c      	bmi.n	80049be <__swsetup_r+0x82>
 8004964:	06dd      	lsls	r5, r3, #27
 8004966:	d411      	bmi.n	800498c <__swsetup_r+0x50>
 8004968:	2309      	movs	r3, #9
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e03e      	b.n	80049f6 <__swsetup_r+0xba>
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <__swsetup_r+0xd4>)
 800497a:	429c      	cmp	r4, r3
 800497c:	d101      	bne.n	8004982 <__swsetup_r+0x46>
 800497e:	68ac      	ldr	r4, [r5, #8]
 8004980:	e7eb      	b.n	800495a <__swsetup_r+0x1e>
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <__swsetup_r+0xd8>)
 8004984:	429c      	cmp	r4, r3
 8004986:	bf08      	it	eq
 8004988:	68ec      	ldreq	r4, [r5, #12]
 800498a:	e7e6      	b.n	800495a <__swsetup_r+0x1e>
 800498c:	0758      	lsls	r0, r3, #29
 800498e:	d512      	bpl.n	80049b6 <__swsetup_r+0x7a>
 8004990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004992:	b141      	cbz	r1, 80049a6 <__swsetup_r+0x6a>
 8004994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <__swsetup_r+0x66>
 800499c:	4630      	mov	r0, r6
 800499e:	f7ff fdfd 	bl	800459c <_free_r>
 80049a2:	2300      	movs	r3, #0
 80049a4:	6363      	str	r3, [r4, #52]	; 0x34
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	b94b      	cbnz	r3, 80049d6 <__swsetup_r+0x9a>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d003      	beq.n	80049d6 <__swsetup_r+0x9a>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 fa01 	bl	8004dd8 <__smakebuf_r>
 80049d6:	89a0      	ldrh	r0, [r4, #12]
 80049d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049dc:	f010 0301 	ands.w	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <__swsetup_r+0xbc>
 80049e2:	2300      	movs	r3, #0
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6963      	ldr	r3, [r4, #20]
 80049e8:	425b      	negs	r3, r3
 80049ea:	61a3      	str	r3, [r4, #24]
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b943      	cbnz	r3, 8004a02 <__swsetup_r+0xc6>
 80049f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f4:	d1ba      	bne.n	800496c <__swsetup_r+0x30>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	0781      	lsls	r1, r0, #30
 80049fa:	bf58      	it	pl
 80049fc:	6963      	ldrpl	r3, [r4, #20]
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	e7f4      	b.n	80049ec <__swsetup_r+0xb0>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7f7      	b.n	80049f6 <__swsetup_r+0xba>
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	08005720 	.word	0x08005720
 8004a10:	08005740 	.word	0x08005740
 8004a14:	08005700 	.word	0x08005700

08004a18 <__sflush_r>:
 8004a18:	898a      	ldrh	r2, [r1, #12]
 8004a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	4605      	mov	r5, r0
 8004a20:	0710      	lsls	r0, r2, #28
 8004a22:	460c      	mov	r4, r1
 8004a24:	d458      	bmi.n	8004ad8 <__sflush_r+0xc0>
 8004a26:	684b      	ldr	r3, [r1, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dc05      	bgt.n	8004a38 <__sflush_r+0x20>
 8004a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	dc02      	bgt.n	8004a38 <__sflush_r+0x20>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	d0f9      	beq.n	8004a32 <__sflush_r+0x1a>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a44:	682f      	ldr	r7, [r5, #0]
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	d032      	beq.n	8004ab0 <__sflush_r+0x98>
 8004a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	075a      	lsls	r2, r3, #29
 8004a50:	d505      	bpl.n	8004a5e <__sflush_r+0x46>
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a58:	b10b      	cbz	r3, 8004a5e <__sflush_r+0x46>
 8004a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a5c:	1ac0      	subs	r0, r0, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4602      	mov	r2, r0
 8004a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a64:	6a21      	ldr	r1, [r4, #32]
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b0      	blx	r6
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	d106      	bne.n	8004a7e <__sflush_r+0x66>
 8004a70:	6829      	ldr	r1, [r5, #0]
 8004a72:	291d      	cmp	r1, #29
 8004a74:	d82c      	bhi.n	8004ad0 <__sflush_r+0xb8>
 8004a76:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <__sflush_r+0x108>)
 8004a78:	40ca      	lsrs	r2, r1
 8004a7a:	07d6      	lsls	r6, r2, #31
 8004a7c:	d528      	bpl.n	8004ad0 <__sflush_r+0xb8>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	6062      	str	r2, [r4, #4]
 8004a82:	04d9      	lsls	r1, r3, #19
 8004a84:	6922      	ldr	r2, [r4, #16]
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	d504      	bpl.n	8004a94 <__sflush_r+0x7c>
 8004a8a:	1c42      	adds	r2, r0, #1
 8004a8c:	d101      	bne.n	8004a92 <__sflush_r+0x7a>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	b903      	cbnz	r3, 8004a94 <__sflush_r+0x7c>
 8004a92:	6560      	str	r0, [r4, #84]	; 0x54
 8004a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a96:	602f      	str	r7, [r5, #0]
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d0ca      	beq.n	8004a32 <__sflush_r+0x1a>
 8004a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d002      	beq.n	8004aaa <__sflush_r+0x92>
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f7ff fd79 	bl	800459c <_free_r>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	6360      	str	r0, [r4, #52]	; 0x34
 8004aae:	e7c1      	b.n	8004a34 <__sflush_r+0x1c>
 8004ab0:	6a21      	ldr	r1, [r4, #32]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b0      	blx	r6
 8004ab8:	1c41      	adds	r1, r0, #1
 8004aba:	d1c7      	bne.n	8004a4c <__sflush_r+0x34>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0c4      	beq.n	8004a4c <__sflush_r+0x34>
 8004ac2:	2b1d      	cmp	r3, #29
 8004ac4:	d001      	beq.n	8004aca <__sflush_r+0xb2>
 8004ac6:	2b16      	cmp	r3, #22
 8004ac8:	d101      	bne.n	8004ace <__sflush_r+0xb6>
 8004aca:	602f      	str	r7, [r5, #0]
 8004acc:	e7b1      	b.n	8004a32 <__sflush_r+0x1a>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	e7ad      	b.n	8004a34 <__sflush_r+0x1c>
 8004ad8:	690f      	ldr	r7, [r1, #16]
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	d0a9      	beq.n	8004a32 <__sflush_r+0x1a>
 8004ade:	0793      	lsls	r3, r2, #30
 8004ae0:	680e      	ldr	r6, [r1, #0]
 8004ae2:	bf08      	it	eq
 8004ae4:	694b      	ldreq	r3, [r1, #20]
 8004ae6:	600f      	str	r7, [r1, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	2300      	movne	r3, #0
 8004aec:	eba6 0807 	sub.w	r8, r6, r7
 8004af0:	608b      	str	r3, [r1, #8]
 8004af2:	f1b8 0f00 	cmp.w	r8, #0
 8004af6:	dd9c      	ble.n	8004a32 <__sflush_r+0x1a>
 8004af8:	6a21      	ldr	r1, [r4, #32]
 8004afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004afc:	4643      	mov	r3, r8
 8004afe:	463a      	mov	r2, r7
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	2800      	cmp	r0, #0
 8004b06:	dc06      	bgt.n	8004b16 <__sflush_r+0xfe>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e78e      	b.n	8004a34 <__sflush_r+0x1c>
 8004b16:	4407      	add	r7, r0
 8004b18:	eba8 0800 	sub.w	r8, r8, r0
 8004b1c:	e7e9      	b.n	8004af2 <__sflush_r+0xda>
 8004b1e:	bf00      	nop
 8004b20:	20400001 	.word	0x20400001

08004b24 <_fflush_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	690b      	ldr	r3, [r1, #16]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b913      	cbnz	r3, 8004b34 <_fflush_r+0x10>
 8004b2e:	2500      	movs	r5, #0
 8004b30:	4628      	mov	r0, r5
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	b118      	cbz	r0, 8004b3e <_fflush_r+0x1a>
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	b90b      	cbnz	r3, 8004b3e <_fflush_r+0x1a>
 8004b3a:	f000 f887 	bl	8004c4c <__sinit>
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <_fflush_r+0x6c>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d11b      	bne.n	8004b7c <_fflush_r+0x58>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ef      	beq.n	8004b2e <_fflush_r+0xa>
 8004b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b50:	07d0      	lsls	r0, r2, #31
 8004b52:	d404      	bmi.n	8004b5e <_fflush_r+0x3a>
 8004b54:	0599      	lsls	r1, r3, #22
 8004b56:	d402      	bmi.n	8004b5e <_fflush_r+0x3a>
 8004b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5a:	f000 f915 	bl	8004d88 <__retarget_lock_acquire_recursive>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7ff ff59 	bl	8004a18 <__sflush_r>
 8004b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b68:	07da      	lsls	r2, r3, #31
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	d4e0      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	059b      	lsls	r3, r3, #22
 8004b72:	d4dd      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b76:	f000 f908 	bl	8004d8a <__retarget_lock_release_recursive>
 8004b7a:	e7d9      	b.n	8004b30 <_fflush_r+0xc>
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <_fflush_r+0x70>)
 8004b7e:	429c      	cmp	r4, r3
 8004b80:	d101      	bne.n	8004b86 <_fflush_r+0x62>
 8004b82:	68ac      	ldr	r4, [r5, #8]
 8004b84:	e7df      	b.n	8004b46 <_fflush_r+0x22>
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <_fflush_r+0x74>)
 8004b88:	429c      	cmp	r4, r3
 8004b8a:	bf08      	it	eq
 8004b8c:	68ec      	ldreq	r4, [r5, #12]
 8004b8e:	e7da      	b.n	8004b46 <_fflush_r+0x22>
 8004b90:	08005720 	.word	0x08005720
 8004b94:	08005740 	.word	0x08005740
 8004b98:	08005700 	.word	0x08005700

08004b9c <std>:
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004baa:	6083      	str	r3, [r0, #8]
 8004bac:	8181      	strh	r1, [r0, #12]
 8004bae:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb0:	81c2      	strh	r2, [r0, #14]
 8004bb2:	6183      	str	r3, [r0, #24]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	305c      	adds	r0, #92	; 0x5c
 8004bba:	f7ff fce7 	bl	800458c <memset>
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x38>)
 8004bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x3c>)
 8004bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x40>)
 8004bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x44>)
 8004bcc:	6224      	str	r4, [r4, #32]
 8004bce:	6323      	str	r3, [r4, #48]	; 0x30
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	0800544d 	.word	0x0800544d
 8004bd8:	0800546f 	.word	0x0800546f
 8004bdc:	080054a7 	.word	0x080054a7
 8004be0:	080054cb 	.word	0x080054cb

08004be4 <_cleanup_r>:
 8004be4:	4901      	ldr	r1, [pc, #4]	; (8004bec <_cleanup_r+0x8>)
 8004be6:	f000 b8af 	b.w	8004d48 <_fwalk_reent>
 8004bea:	bf00      	nop
 8004bec:	08004b25 	.word	0x08004b25

08004bf0 <__sfmoreglue>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	2268      	movs	r2, #104	; 0x68
 8004bf4:	1e4d      	subs	r5, r1, #1
 8004bf6:	4355      	muls	r5, r2
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfe:	f7ff fd39 	bl	8004674 <_malloc_r>
 8004c02:	4604      	mov	r4, r0
 8004c04:	b140      	cbz	r0, 8004c18 <__sfmoreglue+0x28>
 8004c06:	2100      	movs	r1, #0
 8004c08:	e9c0 1600 	strd	r1, r6, [r0]
 8004c0c:	300c      	adds	r0, #12
 8004c0e:	60a0      	str	r0, [r4, #8]
 8004c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c14:	f7ff fcba 	bl	800458c <memset>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 b8b3 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	200001c5 	.word	0x200001c5

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 b8ae 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200001c5 	.word	0x200001c5

08004c34 <__sinit_lock_acquire>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sinit_lock_acquire+0x8>)
 8004c36:	f000 b8a7 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	200001c6 	.word	0x200001c6

08004c40 <__sinit_lock_release>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sinit_lock_release+0x8>)
 8004c42:	f000 b8a2 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004c46:	bf00      	nop
 8004c48:	200001c6 	.word	0x200001c6

08004c4c <__sinit>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f7ff fff0 	bl	8004c34 <__sinit_lock_acquire>
 8004c54:	69a3      	ldr	r3, [r4, #24]
 8004c56:	b11b      	cbz	r3, 8004c60 <__sinit+0x14>
 8004c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5c:	f7ff bff0 	b.w	8004c40 <__sinit_lock_release>
 8004c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c64:	6523      	str	r3, [r4, #80]	; 0x50
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <__sinit+0x68>)
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <__sinit+0x6c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	bf04      	itt	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	61a3      	streq	r3, [r4, #24]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f820 	bl	8004cbc <__sfp>
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 f81c 	bl	8004cbc <__sfp>
 8004c84:	60a0      	str	r0, [r4, #8]
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f818 	bl	8004cbc <__sfp>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	60e0      	str	r0, [r4, #12]
 8004c90:	2104      	movs	r1, #4
 8004c92:	6860      	ldr	r0, [r4, #4]
 8004c94:	f7ff ff82 	bl	8004b9c <std>
 8004c98:	68a0      	ldr	r0, [r4, #8]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2109      	movs	r1, #9
 8004c9e:	f7ff ff7d 	bl	8004b9c <std>
 8004ca2:	68e0      	ldr	r0, [r4, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	2112      	movs	r1, #18
 8004ca8:	f7ff ff78 	bl	8004b9c <std>
 8004cac:	2301      	movs	r3, #1
 8004cae:	61a3      	str	r3, [r4, #24]
 8004cb0:	e7d2      	b.n	8004c58 <__sinit+0xc>
 8004cb2:	bf00      	nop
 8004cb4:	080056fc 	.word	0x080056fc
 8004cb8:	08004be5 	.word	0x08004be5

08004cbc <__sfp>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	4607      	mov	r7, r0
 8004cc0:	f7ff ffac 	bl	8004c1c <__sfp_lock_acquire>
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <__sfp+0x84>)
 8004cc6:	681e      	ldr	r6, [r3, #0]
 8004cc8:	69b3      	ldr	r3, [r6, #24]
 8004cca:	b913      	cbnz	r3, 8004cd2 <__sfp+0x16>
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f7ff ffbd 	bl	8004c4c <__sinit>
 8004cd2:	3648      	adds	r6, #72	; 0x48
 8004cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	d503      	bpl.n	8004ce4 <__sfp+0x28>
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	b30b      	cbz	r3, 8004d24 <__sfp+0x68>
 8004ce0:	6836      	ldr	r6, [r6, #0]
 8004ce2:	e7f7      	b.n	8004cd4 <__sfp+0x18>
 8004ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ce8:	b9d5      	cbnz	r5, 8004d20 <__sfp+0x64>
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <__sfp+0x88>)
 8004cec:	60e3      	str	r3, [r4, #12]
 8004cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf4:	f000 f847 	bl	8004d86 <__retarget_lock_init_recursive>
 8004cf8:	f7ff ff96 	bl	8004c28 <__sfp_lock_release>
 8004cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d04:	6025      	str	r5, [r4, #0]
 8004d06:	61a5      	str	r5, [r4, #24]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d10:	f7ff fc3c 	bl	800458c <memset>
 8004d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d20:	3468      	adds	r4, #104	; 0x68
 8004d22:	e7d9      	b.n	8004cd8 <__sfp+0x1c>
 8004d24:	2104      	movs	r1, #4
 8004d26:	4638      	mov	r0, r7
 8004d28:	f7ff ff62 	bl	8004bf0 <__sfmoreglue>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1d5      	bne.n	8004ce0 <__sfp+0x24>
 8004d34:	f7ff ff78 	bl	8004c28 <__sfp_lock_release>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	e7ee      	b.n	8004d1c <__sfp+0x60>
 8004d3e:	bf00      	nop
 8004d40:	080056fc 	.word	0x080056fc
 8004d44:	ffff0001 	.word	0xffff0001

08004d48 <_fwalk_reent>:
 8004d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	4688      	mov	r8, r1
 8004d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d54:	2700      	movs	r7, #0
 8004d56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d5e:	d505      	bpl.n	8004d6c <_fwalk_reent+0x24>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	2c00      	cmp	r4, #0
 8004d64:	d1f7      	bne.n	8004d56 <_fwalk_reent+0xe>
 8004d66:	4638      	mov	r0, r7
 8004d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6c:	89ab      	ldrh	r3, [r5, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d907      	bls.n	8004d82 <_fwalk_reent+0x3a>
 8004d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d76:	3301      	adds	r3, #1
 8004d78:	d003      	beq.n	8004d82 <_fwalk_reent+0x3a>
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	47c0      	blx	r8
 8004d80:	4307      	orrs	r7, r0
 8004d82:	3568      	adds	r5, #104	; 0x68
 8004d84:	e7e9      	b.n	8004d5a <_fwalk_reent+0x12>

08004d86 <__retarget_lock_init_recursive>:
 8004d86:	4770      	bx	lr

08004d88 <__retarget_lock_acquire_recursive>:
 8004d88:	4770      	bx	lr

08004d8a <__retarget_lock_release_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <__swhatbuf_r>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	460e      	mov	r6, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	2900      	cmp	r1, #0
 8004d96:	b096      	sub	sp, #88	; 0x58
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	da08      	bge.n	8004db0 <__swhatbuf_r+0x24>
 8004d9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	061a      	lsls	r2, r3, #24
 8004da8:	d410      	bmi.n	8004dcc <__swhatbuf_r+0x40>
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	e00e      	b.n	8004dce <__swhatbuf_r+0x42>
 8004db0:	466a      	mov	r2, sp
 8004db2:	f000 fbb1 	bl	8005518 <_fstat_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	dbf1      	blt.n	8004d9e <__swhatbuf_r+0x12>
 8004dba:	9a01      	ldr	r2, [sp, #4]
 8004dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dc4:	425a      	negs	r2, r3
 8004dc6:	415a      	adcs	r2, r3
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	e7ee      	b.n	8004daa <__swhatbuf_r+0x1e>
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	b016      	add	sp, #88	; 0x58
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dd8 <__smakebuf_r>:
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ddc:	079d      	lsls	r5, r3, #30
 8004dde:	4606      	mov	r6, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	d507      	bpl.n	8004df4 <__smakebuf_r+0x1c>
 8004de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	2301      	movs	r3, #1
 8004dee:	6163      	str	r3, [r4, #20]
 8004df0:	b002      	add	sp, #8
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	ab01      	add	r3, sp, #4
 8004df6:	466a      	mov	r2, sp
 8004df8:	f7ff ffc8 	bl	8004d8c <__swhatbuf_r>
 8004dfc:	9900      	ldr	r1, [sp, #0]
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4630      	mov	r0, r6
 8004e02:	f7ff fc37 	bl	8004674 <_malloc_r>
 8004e06:	b948      	cbnz	r0, 8004e1c <__smakebuf_r+0x44>
 8004e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d4ef      	bmi.n	8004df0 <__smakebuf_r+0x18>
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	e7e3      	b.n	8004de4 <__smakebuf_r+0xc>
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <__smakebuf_r+0x7c>)
 8004e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	6020      	str	r0, [r4, #0]
 8004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	9b00      	ldr	r3, [sp, #0]
 8004e2c:	6163      	str	r3, [r4, #20]
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	6120      	str	r0, [r4, #16]
 8004e32:	b15b      	cbz	r3, 8004e4c <__smakebuf_r+0x74>
 8004e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 fb7f 	bl	800553c <_isatty_r>
 8004e3e:	b128      	cbz	r0, 8004e4c <__smakebuf_r+0x74>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	89a0      	ldrh	r0, [r4, #12]
 8004e4e:	4305      	orrs	r5, r0
 8004e50:	81a5      	strh	r5, [r4, #12]
 8004e52:	e7cd      	b.n	8004df0 <__smakebuf_r+0x18>
 8004e54:	08004be5 	.word	0x08004be5

08004e58 <__malloc_lock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__malloc_lock+0x8>)
 8004e5a:	f7ff bf95 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004e5e:	bf00      	nop
 8004e60:	200001c4 	.word	0x200001c4

08004e64 <__malloc_unlock>:
 8004e64:	4801      	ldr	r0, [pc, #4]	; (8004e6c <__malloc_unlock+0x8>)
 8004e66:	f7ff bf90 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004e6a:	bf00      	nop
 8004e6c:	200001c4 	.word	0x200001c4

08004e70 <__sfputc_r>:
 8004e70:	6893      	ldr	r3, [r2, #8]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	b410      	push	{r4}
 8004e78:	6093      	str	r3, [r2, #8]
 8004e7a:	da08      	bge.n	8004e8e <__sfputc_r+0x1e>
 8004e7c:	6994      	ldr	r4, [r2, #24]
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	db01      	blt.n	8004e86 <__sfputc_r+0x16>
 8004e82:	290a      	cmp	r1, #10
 8004e84:	d103      	bne.n	8004e8e <__sfputc_r+0x1e>
 8004e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e8a:	f7ff bd05 	b.w	8004898 <__swbuf_r>
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	1c58      	adds	r0, r3, #1
 8004e92:	6010      	str	r0, [r2, #0]
 8004e94:	7019      	strb	r1, [r3, #0]
 8004e96:	4608      	mov	r0, r1
 8004e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <__sfputs_r>:
 8004e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	460f      	mov	r7, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	18d5      	adds	r5, r2, r3
 8004ea8:	42ac      	cmp	r4, r5
 8004eaa:	d101      	bne.n	8004eb0 <__sfputs_r+0x12>
 8004eac:	2000      	movs	r0, #0
 8004eae:	e007      	b.n	8004ec0 <__sfputs_r+0x22>
 8004eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb4:	463a      	mov	r2, r7
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	f7ff ffda 	bl	8004e70 <__sfputc_r>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	d1f3      	bne.n	8004ea8 <__sfputs_r+0xa>
 8004ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ec4 <_vfiprintf_r>:
 8004ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec8:	460d      	mov	r5, r1
 8004eca:	b09d      	sub	sp, #116	; 0x74
 8004ecc:	4614      	mov	r4, r2
 8004ece:	4698      	mov	r8, r3
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	b118      	cbz	r0, 8004edc <_vfiprintf_r+0x18>
 8004ed4:	6983      	ldr	r3, [r0, #24]
 8004ed6:	b90b      	cbnz	r3, 8004edc <_vfiprintf_r+0x18>
 8004ed8:	f7ff feb8 	bl	8004c4c <__sinit>
 8004edc:	4b89      	ldr	r3, [pc, #548]	; (8005104 <_vfiprintf_r+0x240>)
 8004ede:	429d      	cmp	r5, r3
 8004ee0:	d11b      	bne.n	8004f1a <_vfiprintf_r+0x56>
 8004ee2:	6875      	ldr	r5, [r6, #4]
 8004ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ee6:	07d9      	lsls	r1, r3, #31
 8004ee8:	d405      	bmi.n	8004ef6 <_vfiprintf_r+0x32>
 8004eea:	89ab      	ldrh	r3, [r5, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d402      	bmi.n	8004ef6 <_vfiprintf_r+0x32>
 8004ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ef2:	f7ff ff49 	bl	8004d88 <__retarget_lock_acquire_recursive>
 8004ef6:	89ab      	ldrh	r3, [r5, #12]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	d501      	bpl.n	8004f00 <_vfiprintf_r+0x3c>
 8004efc:	692b      	ldr	r3, [r5, #16]
 8004efe:	b9eb      	cbnz	r3, 8004f3c <_vfiprintf_r+0x78>
 8004f00:	4629      	mov	r1, r5
 8004f02:	4630      	mov	r0, r6
 8004f04:	f7ff fd1a 	bl	800493c <__swsetup_r>
 8004f08:	b1c0      	cbz	r0, 8004f3c <_vfiprintf_r+0x78>
 8004f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f0c:	07dc      	lsls	r4, r3, #31
 8004f0e:	d50e      	bpl.n	8004f2e <_vfiprintf_r+0x6a>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	b01d      	add	sp, #116	; 0x74
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	4b7b      	ldr	r3, [pc, #492]	; (8005108 <_vfiprintf_r+0x244>)
 8004f1c:	429d      	cmp	r5, r3
 8004f1e:	d101      	bne.n	8004f24 <_vfiprintf_r+0x60>
 8004f20:	68b5      	ldr	r5, [r6, #8]
 8004f22:	e7df      	b.n	8004ee4 <_vfiprintf_r+0x20>
 8004f24:	4b79      	ldr	r3, [pc, #484]	; (800510c <_vfiprintf_r+0x248>)
 8004f26:	429d      	cmp	r5, r3
 8004f28:	bf08      	it	eq
 8004f2a:	68f5      	ldreq	r5, [r6, #12]
 8004f2c:	e7da      	b.n	8004ee4 <_vfiprintf_r+0x20>
 8004f2e:	89ab      	ldrh	r3, [r5, #12]
 8004f30:	0598      	lsls	r0, r3, #22
 8004f32:	d4ed      	bmi.n	8004f10 <_vfiprintf_r+0x4c>
 8004f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f36:	f7ff ff28 	bl	8004d8a <__retarget_lock_release_recursive>
 8004f3a:	e7e9      	b.n	8004f10 <_vfiprintf_r+0x4c>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	2320      	movs	r3, #32
 8004f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f4a:	2330      	movs	r3, #48	; 0x30
 8004f4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005110 <_vfiprintf_r+0x24c>
 8004f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f54:	f04f 0901 	mov.w	r9, #1
 8004f58:	4623      	mov	r3, r4
 8004f5a:	469a      	mov	sl, r3
 8004f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f60:	b10a      	cbz	r2, 8004f66 <_vfiprintf_r+0xa2>
 8004f62:	2a25      	cmp	r2, #37	; 0x25
 8004f64:	d1f9      	bne.n	8004f5a <_vfiprintf_r+0x96>
 8004f66:	ebba 0b04 	subs.w	fp, sl, r4
 8004f6a:	d00b      	beq.n	8004f84 <_vfiprintf_r+0xc0>
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4629      	mov	r1, r5
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff ff93 	bl	8004e9e <__sfputs_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f000 80aa 	beq.w	80050d2 <_vfiprintf_r+0x20e>
 8004f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f80:	445a      	add	r2, fp
 8004f82:	9209      	str	r2, [sp, #36]	; 0x24
 8004f84:	f89a 3000 	ldrb.w	r3, [sl]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80a2 	beq.w	80050d2 <_vfiprintf_r+0x20e>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f98:	f10a 0a01 	add.w	sl, sl, #1
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	9307      	str	r3, [sp, #28]
 8004fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa6:	4654      	mov	r4, sl
 8004fa8:	2205      	movs	r2, #5
 8004faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fae:	4858      	ldr	r0, [pc, #352]	; (8005110 <_vfiprintf_r+0x24c>)
 8004fb0:	f7fb f92e 	bl	8000210 <memchr>
 8004fb4:	9a04      	ldr	r2, [sp, #16]
 8004fb6:	b9d8      	cbnz	r0, 8004ff0 <_vfiprintf_r+0x12c>
 8004fb8:	06d1      	lsls	r1, r2, #27
 8004fba:	bf44      	itt	mi
 8004fbc:	2320      	movmi	r3, #32
 8004fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc2:	0713      	lsls	r3, r2, #28
 8004fc4:	bf44      	itt	mi
 8004fc6:	232b      	movmi	r3, #43	; 0x2b
 8004fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fd2:	d015      	beq.n	8005000 <_vfiprintf_r+0x13c>
 8004fd4:	9a07      	ldr	r2, [sp, #28]
 8004fd6:	4654      	mov	r4, sl
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f04f 0c0a 	mov.w	ip, #10
 8004fde:	4621      	mov	r1, r4
 8004fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe4:	3b30      	subs	r3, #48	; 0x30
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	d94e      	bls.n	8005088 <_vfiprintf_r+0x1c4>
 8004fea:	b1b0      	cbz	r0, 800501a <_vfiprintf_r+0x156>
 8004fec:	9207      	str	r2, [sp, #28]
 8004fee:	e014      	b.n	800501a <_vfiprintf_r+0x156>
 8004ff0:	eba0 0308 	sub.w	r3, r0, r8
 8004ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	9304      	str	r3, [sp, #16]
 8004ffc:	46a2      	mov	sl, r4
 8004ffe:	e7d2      	b.n	8004fa6 <_vfiprintf_r+0xe2>
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	1d19      	adds	r1, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	9103      	str	r1, [sp, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	bfbb      	ittet	lt
 800500c:	425b      	neglt	r3, r3
 800500e:	f042 0202 	orrlt.w	r2, r2, #2
 8005012:	9307      	strge	r3, [sp, #28]
 8005014:	9307      	strlt	r3, [sp, #28]
 8005016:	bfb8      	it	lt
 8005018:	9204      	strlt	r2, [sp, #16]
 800501a:	7823      	ldrb	r3, [r4, #0]
 800501c:	2b2e      	cmp	r3, #46	; 0x2e
 800501e:	d10c      	bne.n	800503a <_vfiprintf_r+0x176>
 8005020:	7863      	ldrb	r3, [r4, #1]
 8005022:	2b2a      	cmp	r3, #42	; 0x2a
 8005024:	d135      	bne.n	8005092 <_vfiprintf_r+0x1ce>
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	9203      	str	r2, [sp, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfb8      	it	lt
 8005032:	f04f 33ff 	movlt.w	r3, #4294967295
 8005036:	3402      	adds	r4, #2
 8005038:	9305      	str	r3, [sp, #20]
 800503a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005120 <_vfiprintf_r+0x25c>
 800503e:	7821      	ldrb	r1, [r4, #0]
 8005040:	2203      	movs	r2, #3
 8005042:	4650      	mov	r0, sl
 8005044:	f7fb f8e4 	bl	8000210 <memchr>
 8005048:	b140      	cbz	r0, 800505c <_vfiprintf_r+0x198>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	eba0 000a 	sub.w	r0, r0, sl
 8005050:	fa03 f000 	lsl.w	r0, r3, r0
 8005054:	9b04      	ldr	r3, [sp, #16]
 8005056:	4303      	orrs	r3, r0
 8005058:	3401      	adds	r4, #1
 800505a:	9304      	str	r3, [sp, #16]
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	482c      	ldr	r0, [pc, #176]	; (8005114 <_vfiprintf_r+0x250>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005066:	2206      	movs	r2, #6
 8005068:	f7fb f8d2 	bl	8000210 <memchr>
 800506c:	2800      	cmp	r0, #0
 800506e:	d03f      	beq.n	80050f0 <_vfiprintf_r+0x22c>
 8005070:	4b29      	ldr	r3, [pc, #164]	; (8005118 <_vfiprintf_r+0x254>)
 8005072:	bb1b      	cbnz	r3, 80050bc <_vfiprintf_r+0x1f8>
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	3307      	adds	r3, #7
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	3308      	adds	r3, #8
 800507e:	9303      	str	r3, [sp, #12]
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	443b      	add	r3, r7
 8005084:	9309      	str	r3, [sp, #36]	; 0x24
 8005086:	e767      	b.n	8004f58 <_vfiprintf_r+0x94>
 8005088:	fb0c 3202 	mla	r2, ip, r2, r3
 800508c:	460c      	mov	r4, r1
 800508e:	2001      	movs	r0, #1
 8005090:	e7a5      	b.n	8004fde <_vfiprintf_r+0x11a>
 8005092:	2300      	movs	r3, #0
 8005094:	3401      	adds	r4, #1
 8005096:	9305      	str	r3, [sp, #20]
 8005098:	4619      	mov	r1, r3
 800509a:	f04f 0c0a 	mov.w	ip, #10
 800509e:	4620      	mov	r0, r4
 80050a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a4:	3a30      	subs	r2, #48	; 0x30
 80050a6:	2a09      	cmp	r2, #9
 80050a8:	d903      	bls.n	80050b2 <_vfiprintf_r+0x1ee>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0c5      	beq.n	800503a <_vfiprintf_r+0x176>
 80050ae:	9105      	str	r1, [sp, #20]
 80050b0:	e7c3      	b.n	800503a <_vfiprintf_r+0x176>
 80050b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050b6:	4604      	mov	r4, r0
 80050b8:	2301      	movs	r3, #1
 80050ba:	e7f0      	b.n	800509e <_vfiprintf_r+0x1da>
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	462a      	mov	r2, r5
 80050c2:	4b16      	ldr	r3, [pc, #88]	; (800511c <_vfiprintf_r+0x258>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4630      	mov	r0, r6
 80050c8:	f3af 8000 	nop.w
 80050cc:	4607      	mov	r7, r0
 80050ce:	1c78      	adds	r0, r7, #1
 80050d0:	d1d6      	bne.n	8005080 <_vfiprintf_r+0x1bc>
 80050d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050d4:	07d9      	lsls	r1, r3, #31
 80050d6:	d405      	bmi.n	80050e4 <_vfiprintf_r+0x220>
 80050d8:	89ab      	ldrh	r3, [r5, #12]
 80050da:	059a      	lsls	r2, r3, #22
 80050dc:	d402      	bmi.n	80050e4 <_vfiprintf_r+0x220>
 80050de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050e0:	f7ff fe53 	bl	8004d8a <__retarget_lock_release_recursive>
 80050e4:	89ab      	ldrh	r3, [r5, #12]
 80050e6:	065b      	lsls	r3, r3, #25
 80050e8:	f53f af12 	bmi.w	8004f10 <_vfiprintf_r+0x4c>
 80050ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ee:	e711      	b.n	8004f14 <_vfiprintf_r+0x50>
 80050f0:	ab03      	add	r3, sp, #12
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	462a      	mov	r2, r5
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <_vfiprintf_r+0x258>)
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	4630      	mov	r0, r6
 80050fc:	f000 f880 	bl	8005200 <_printf_i>
 8005100:	e7e4      	b.n	80050cc <_vfiprintf_r+0x208>
 8005102:	bf00      	nop
 8005104:	08005720 	.word	0x08005720
 8005108:	08005740 	.word	0x08005740
 800510c:	08005700 	.word	0x08005700
 8005110:	08005760 	.word	0x08005760
 8005114:	0800576a 	.word	0x0800576a
 8005118:	00000000 	.word	0x00000000
 800511c:	08004e9f 	.word	0x08004e9f
 8005120:	08005766 	.word	0x08005766

08005124 <_printf_common>:
 8005124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	4616      	mov	r6, r2
 800512a:	4699      	mov	r9, r3
 800512c:	688a      	ldr	r2, [r1, #8]
 800512e:	690b      	ldr	r3, [r1, #16]
 8005130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005134:	4293      	cmp	r3, r2
 8005136:	bfb8      	it	lt
 8005138:	4613      	movlt	r3, r2
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005140:	4607      	mov	r7, r0
 8005142:	460c      	mov	r4, r1
 8005144:	b10a      	cbz	r2, 800514a <_printf_common+0x26>
 8005146:	3301      	adds	r3, #1
 8005148:	6033      	str	r3, [r6, #0]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	0699      	lsls	r1, r3, #26
 800514e:	bf42      	ittt	mi
 8005150:	6833      	ldrmi	r3, [r6, #0]
 8005152:	3302      	addmi	r3, #2
 8005154:	6033      	strmi	r3, [r6, #0]
 8005156:	6825      	ldr	r5, [r4, #0]
 8005158:	f015 0506 	ands.w	r5, r5, #6
 800515c:	d106      	bne.n	800516c <_printf_common+0x48>
 800515e:	f104 0a19 	add.w	sl, r4, #25
 8005162:	68e3      	ldr	r3, [r4, #12]
 8005164:	6832      	ldr	r2, [r6, #0]
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	42ab      	cmp	r3, r5
 800516a:	dc26      	bgt.n	80051ba <_printf_common+0x96>
 800516c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005170:	1e13      	subs	r3, r2, #0
 8005172:	6822      	ldr	r2, [r4, #0]
 8005174:	bf18      	it	ne
 8005176:	2301      	movne	r3, #1
 8005178:	0692      	lsls	r2, r2, #26
 800517a:	d42b      	bmi.n	80051d4 <_printf_common+0xb0>
 800517c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005180:	4649      	mov	r1, r9
 8005182:	4638      	mov	r0, r7
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d01e      	beq.n	80051c8 <_printf_common+0xa4>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	68e5      	ldr	r5, [r4, #12]
 800518e:	6832      	ldr	r2, [r6, #0]
 8005190:	f003 0306 	and.w	r3, r3, #6
 8005194:	2b04      	cmp	r3, #4
 8005196:	bf08      	it	eq
 8005198:	1aad      	subeq	r5, r5, r2
 800519a:	68a3      	ldr	r3, [r4, #8]
 800519c:	6922      	ldr	r2, [r4, #16]
 800519e:	bf0c      	ite	eq
 80051a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051a4:	2500      	movne	r5, #0
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bfc4      	itt	gt
 80051aa:	1a9b      	subgt	r3, r3, r2
 80051ac:	18ed      	addgt	r5, r5, r3
 80051ae:	2600      	movs	r6, #0
 80051b0:	341a      	adds	r4, #26
 80051b2:	42b5      	cmp	r5, r6
 80051b4:	d11a      	bne.n	80051ec <_printf_common+0xc8>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e008      	b.n	80051cc <_printf_common+0xa8>
 80051ba:	2301      	movs	r3, #1
 80051bc:	4652      	mov	r2, sl
 80051be:	4649      	mov	r1, r9
 80051c0:	4638      	mov	r0, r7
 80051c2:	47c0      	blx	r8
 80051c4:	3001      	adds	r0, #1
 80051c6:	d103      	bne.n	80051d0 <_printf_common+0xac>
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d0:	3501      	adds	r5, #1
 80051d2:	e7c6      	b.n	8005162 <_printf_common+0x3e>
 80051d4:	18e1      	adds	r1, r4, r3
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	2030      	movs	r0, #48	; 0x30
 80051da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051de:	4422      	add	r2, r4
 80051e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e8:	3302      	adds	r3, #2
 80051ea:	e7c7      	b.n	800517c <_printf_common+0x58>
 80051ec:	2301      	movs	r3, #1
 80051ee:	4622      	mov	r2, r4
 80051f0:	4649      	mov	r1, r9
 80051f2:	4638      	mov	r0, r7
 80051f4:	47c0      	blx	r8
 80051f6:	3001      	adds	r0, #1
 80051f8:	d0e6      	beq.n	80051c8 <_printf_common+0xa4>
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7d9      	b.n	80051b2 <_printf_common+0x8e>
	...

08005200 <_printf_i>:
 8005200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005204:	7e0f      	ldrb	r7, [r1, #24]
 8005206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005208:	2f78      	cmp	r7, #120	; 0x78
 800520a:	4691      	mov	r9, r2
 800520c:	4680      	mov	r8, r0
 800520e:	460c      	mov	r4, r1
 8005210:	469a      	mov	sl, r3
 8005212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005216:	d807      	bhi.n	8005228 <_printf_i+0x28>
 8005218:	2f62      	cmp	r7, #98	; 0x62
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x32>
 800521c:	2f00      	cmp	r7, #0
 800521e:	f000 80d8 	beq.w	80053d2 <_printf_i+0x1d2>
 8005222:	2f58      	cmp	r7, #88	; 0x58
 8005224:	f000 80a3 	beq.w	800536e <_printf_i+0x16e>
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005230:	e03a      	b.n	80052a8 <_printf_i+0xa8>
 8005232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005236:	2b15      	cmp	r3, #21
 8005238:	d8f6      	bhi.n	8005228 <_printf_i+0x28>
 800523a:	a101      	add	r1, pc, #4	; (adr r1, 8005240 <_printf_i+0x40>)
 800523c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005240:	08005299 	.word	0x08005299
 8005244:	080052ad 	.word	0x080052ad
 8005248:	08005229 	.word	0x08005229
 800524c:	08005229 	.word	0x08005229
 8005250:	08005229 	.word	0x08005229
 8005254:	08005229 	.word	0x08005229
 8005258:	080052ad 	.word	0x080052ad
 800525c:	08005229 	.word	0x08005229
 8005260:	08005229 	.word	0x08005229
 8005264:	08005229 	.word	0x08005229
 8005268:	08005229 	.word	0x08005229
 800526c:	080053b9 	.word	0x080053b9
 8005270:	080052dd 	.word	0x080052dd
 8005274:	0800539b 	.word	0x0800539b
 8005278:	08005229 	.word	0x08005229
 800527c:	08005229 	.word	0x08005229
 8005280:	080053db 	.word	0x080053db
 8005284:	08005229 	.word	0x08005229
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005229 	.word	0x08005229
 8005290:	08005229 	.word	0x08005229
 8005294:	080053a3 	.word	0x080053a3
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	1d1a      	adds	r2, r3, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	602a      	str	r2, [r5, #0]
 80052a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0a3      	b.n	80053f4 <_printf_i+0x1f4>
 80052ac:	6820      	ldr	r0, [r4, #0]
 80052ae:	6829      	ldr	r1, [r5, #0]
 80052b0:	0606      	lsls	r6, r0, #24
 80052b2:	f101 0304 	add.w	r3, r1, #4
 80052b6:	d50a      	bpl.n	80052ce <_printf_i+0xce>
 80052b8:	680e      	ldr	r6, [r1, #0]
 80052ba:	602b      	str	r3, [r5, #0]
 80052bc:	2e00      	cmp	r6, #0
 80052be:	da03      	bge.n	80052c8 <_printf_i+0xc8>
 80052c0:	232d      	movs	r3, #45	; 0x2d
 80052c2:	4276      	negs	r6, r6
 80052c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c8:	485e      	ldr	r0, [pc, #376]	; (8005444 <_printf_i+0x244>)
 80052ca:	230a      	movs	r3, #10
 80052cc:	e019      	b.n	8005302 <_printf_i+0x102>
 80052ce:	680e      	ldr	r6, [r1, #0]
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052d6:	bf18      	it	ne
 80052d8:	b236      	sxthne	r6, r6
 80052da:	e7ef      	b.n	80052bc <_printf_i+0xbc>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1d19      	adds	r1, r3, #4
 80052e2:	6029      	str	r1, [r5, #0]
 80052e4:	0601      	lsls	r1, r0, #24
 80052e6:	d501      	bpl.n	80052ec <_printf_i+0xec>
 80052e8:	681e      	ldr	r6, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <_printf_i+0xf2>
 80052ec:	0646      	lsls	r6, r0, #25
 80052ee:	d5fb      	bpl.n	80052e8 <_printf_i+0xe8>
 80052f0:	881e      	ldrh	r6, [r3, #0]
 80052f2:	4854      	ldr	r0, [pc, #336]	; (8005444 <_printf_i+0x244>)
 80052f4:	2f6f      	cmp	r7, #111	; 0x6f
 80052f6:	bf0c      	ite	eq
 80052f8:	2308      	moveq	r3, #8
 80052fa:	230a      	movne	r3, #10
 80052fc:	2100      	movs	r1, #0
 80052fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005302:	6865      	ldr	r5, [r4, #4]
 8005304:	60a5      	str	r5, [r4, #8]
 8005306:	2d00      	cmp	r5, #0
 8005308:	bfa2      	ittt	ge
 800530a:	6821      	ldrge	r1, [r4, #0]
 800530c:	f021 0104 	bicge.w	r1, r1, #4
 8005310:	6021      	strge	r1, [r4, #0]
 8005312:	b90e      	cbnz	r6, 8005318 <_printf_i+0x118>
 8005314:	2d00      	cmp	r5, #0
 8005316:	d04d      	beq.n	80053b4 <_printf_i+0x1b4>
 8005318:	4615      	mov	r5, r2
 800531a:	fbb6 f1f3 	udiv	r1, r6, r3
 800531e:	fb03 6711 	mls	r7, r3, r1, r6
 8005322:	5dc7      	ldrb	r7, [r0, r7]
 8005324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005328:	4637      	mov	r7, r6
 800532a:	42bb      	cmp	r3, r7
 800532c:	460e      	mov	r6, r1
 800532e:	d9f4      	bls.n	800531a <_printf_i+0x11a>
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <_printf_i+0x14c>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	07de      	lsls	r6, r3, #31
 8005338:	d508      	bpl.n	800534c <_printf_i+0x14c>
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	6861      	ldr	r1, [r4, #4]
 800533e:	4299      	cmp	r1, r3
 8005340:	bfde      	ittt	le
 8005342:	2330      	movle	r3, #48	; 0x30
 8005344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800534c:	1b52      	subs	r2, r2, r5
 800534e:	6122      	str	r2, [r4, #16]
 8005350:	f8cd a000 	str.w	sl, [sp]
 8005354:	464b      	mov	r3, r9
 8005356:	aa03      	add	r2, sp, #12
 8005358:	4621      	mov	r1, r4
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fee2 	bl	8005124 <_printf_common>
 8005360:	3001      	adds	r0, #1
 8005362:	d14c      	bne.n	80053fe <_printf_i+0x1fe>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	b004      	add	sp, #16
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	4835      	ldr	r0, [pc, #212]	; (8005444 <_printf_i+0x244>)
 8005370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005374:	6829      	ldr	r1, [r5, #0]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f851 6b04 	ldr.w	r6, [r1], #4
 800537c:	6029      	str	r1, [r5, #0]
 800537e:	061d      	lsls	r5, r3, #24
 8005380:	d514      	bpl.n	80053ac <_printf_i+0x1ac>
 8005382:	07df      	lsls	r7, r3, #31
 8005384:	bf44      	itt	mi
 8005386:	f043 0320 	orrmi.w	r3, r3, #32
 800538a:	6023      	strmi	r3, [r4, #0]
 800538c:	b91e      	cbnz	r6, 8005396 <_printf_i+0x196>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f023 0320 	bic.w	r3, r3, #32
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	2310      	movs	r3, #16
 8005398:	e7b0      	b.n	80052fc <_printf_i+0xfc>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f043 0320 	orr.w	r3, r3, #32
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	2378      	movs	r3, #120	; 0x78
 80053a4:	4828      	ldr	r0, [pc, #160]	; (8005448 <_printf_i+0x248>)
 80053a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053aa:	e7e3      	b.n	8005374 <_printf_i+0x174>
 80053ac:	0659      	lsls	r1, r3, #25
 80053ae:	bf48      	it	mi
 80053b0:	b2b6      	uxthmi	r6, r6
 80053b2:	e7e6      	b.n	8005382 <_printf_i+0x182>
 80053b4:	4615      	mov	r5, r2
 80053b6:	e7bb      	b.n	8005330 <_printf_i+0x130>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	6826      	ldr	r6, [r4, #0]
 80053bc:	6961      	ldr	r1, [r4, #20]
 80053be:	1d18      	adds	r0, r3, #4
 80053c0:	6028      	str	r0, [r5, #0]
 80053c2:	0635      	lsls	r5, r6, #24
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	d501      	bpl.n	80053cc <_printf_i+0x1cc>
 80053c8:	6019      	str	r1, [r3, #0]
 80053ca:	e002      	b.n	80053d2 <_printf_i+0x1d2>
 80053cc:	0670      	lsls	r0, r6, #25
 80053ce:	d5fb      	bpl.n	80053c8 <_printf_i+0x1c8>
 80053d0:	8019      	strh	r1, [r3, #0]
 80053d2:	2300      	movs	r3, #0
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	4615      	mov	r5, r2
 80053d8:	e7ba      	b.n	8005350 <_printf_i+0x150>
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	1d1a      	adds	r2, r3, #4
 80053de:	602a      	str	r2, [r5, #0]
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	6862      	ldr	r2, [r4, #4]
 80053e4:	2100      	movs	r1, #0
 80053e6:	4628      	mov	r0, r5
 80053e8:	f7fa ff12 	bl	8000210 <memchr>
 80053ec:	b108      	cbz	r0, 80053f2 <_printf_i+0x1f2>
 80053ee:	1b40      	subs	r0, r0, r5
 80053f0:	6060      	str	r0, [r4, #4]
 80053f2:	6863      	ldr	r3, [r4, #4]
 80053f4:	6123      	str	r3, [r4, #16]
 80053f6:	2300      	movs	r3, #0
 80053f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053fc:	e7a8      	b.n	8005350 <_printf_i+0x150>
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	462a      	mov	r2, r5
 8005402:	4649      	mov	r1, r9
 8005404:	4640      	mov	r0, r8
 8005406:	47d0      	blx	sl
 8005408:	3001      	adds	r0, #1
 800540a:	d0ab      	beq.n	8005364 <_printf_i+0x164>
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	079b      	lsls	r3, r3, #30
 8005410:	d413      	bmi.n	800543a <_printf_i+0x23a>
 8005412:	68e0      	ldr	r0, [r4, #12]
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	4298      	cmp	r0, r3
 8005418:	bfb8      	it	lt
 800541a:	4618      	movlt	r0, r3
 800541c:	e7a4      	b.n	8005368 <_printf_i+0x168>
 800541e:	2301      	movs	r3, #1
 8005420:	4632      	mov	r2, r6
 8005422:	4649      	mov	r1, r9
 8005424:	4640      	mov	r0, r8
 8005426:	47d0      	blx	sl
 8005428:	3001      	adds	r0, #1
 800542a:	d09b      	beq.n	8005364 <_printf_i+0x164>
 800542c:	3501      	adds	r5, #1
 800542e:	68e3      	ldr	r3, [r4, #12]
 8005430:	9903      	ldr	r1, [sp, #12]
 8005432:	1a5b      	subs	r3, r3, r1
 8005434:	42ab      	cmp	r3, r5
 8005436:	dcf2      	bgt.n	800541e <_printf_i+0x21e>
 8005438:	e7eb      	b.n	8005412 <_printf_i+0x212>
 800543a:	2500      	movs	r5, #0
 800543c:	f104 0619 	add.w	r6, r4, #25
 8005440:	e7f5      	b.n	800542e <_printf_i+0x22e>
 8005442:	bf00      	nop
 8005444:	08005771 	.word	0x08005771
 8005448:	08005782 	.word	0x08005782

0800544c <__sread>:
 800544c:	b510      	push	{r4, lr}
 800544e:	460c      	mov	r4, r1
 8005450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005454:	f000 f894 	bl	8005580 <_read_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	bfab      	itete	ge
 800545c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800545e:	89a3      	ldrhlt	r3, [r4, #12]
 8005460:	181b      	addge	r3, r3, r0
 8005462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005466:	bfac      	ite	ge
 8005468:	6563      	strge	r3, [r4, #84]	; 0x54
 800546a:	81a3      	strhlt	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__swrite>:
 800546e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005472:	461f      	mov	r7, r3
 8005474:	898b      	ldrh	r3, [r1, #12]
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	4605      	mov	r5, r0
 800547a:	460c      	mov	r4, r1
 800547c:	4616      	mov	r6, r2
 800547e:	d505      	bpl.n	800548c <__swrite+0x1e>
 8005480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005484:	2302      	movs	r3, #2
 8005486:	2200      	movs	r2, #0
 8005488:	f000 f868 	bl	800555c <_lseek_r>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	4632      	mov	r2, r6
 800549a:	463b      	mov	r3, r7
 800549c:	4628      	mov	r0, r5
 800549e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a2:	f000 b817 	b.w	80054d4 <_write_r>

080054a6 <__sseek>:
 80054a6:	b510      	push	{r4, lr}
 80054a8:	460c      	mov	r4, r1
 80054aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ae:	f000 f855 	bl	800555c <_lseek_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	bf15      	itete	ne
 80054b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054c2:	81a3      	strheq	r3, [r4, #12]
 80054c4:	bf18      	it	ne
 80054c6:	81a3      	strhne	r3, [r4, #12]
 80054c8:	bd10      	pop	{r4, pc}

080054ca <__sclose>:
 80054ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ce:	f000 b813 	b.w	80054f8 <_close_r>
	...

080054d4 <_write_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	; (80054f4 <_write_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fb fb99 	bl	8000c1a <_write>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_write_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_write_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200001c8 	.word	0x200001c8

080054f8 <_close_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d06      	ldr	r5, [pc, #24]	; (8005514 <_close_r+0x1c>)
 80054fc:	2300      	movs	r3, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	f7fb fba5 	bl	8000c52 <_close>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_close_r+0x1a>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_close_r+0x1a>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	200001c8 	.word	0x200001c8

08005518 <_fstat_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d07      	ldr	r5, [pc, #28]	; (8005538 <_fstat_r+0x20>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	602b      	str	r3, [r5, #0]
 8005526:	f7fb fba0 	bl	8000c6a <_fstat>
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	d102      	bne.n	8005534 <_fstat_r+0x1c>
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	b103      	cbz	r3, 8005534 <_fstat_r+0x1c>
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	bd38      	pop	{r3, r4, r5, pc}
 8005536:	bf00      	nop
 8005538:	200001c8 	.word	0x200001c8

0800553c <_isatty_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_isatty_r+0x1c>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	602b      	str	r3, [r5, #0]
 8005548:	f7fb fb9f 	bl	8000c8a <_isatty>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_isatty_r+0x1a>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_isatty_r+0x1a>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	200001c8 	.word	0x200001c8

0800555c <_lseek_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	; (800557c <_lseek_r+0x20>)
 8005560:	4604      	mov	r4, r0
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	2200      	movs	r2, #0
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7fb fb98 	bl	8000ca0 <_lseek>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_lseek_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_lseek_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	200001c8 	.word	0x200001c8

08005580 <_read_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	; (80055a0 <_read_r+0x20>)
 8005584:	4604      	mov	r4, r0
 8005586:	4608      	mov	r0, r1
 8005588:	4611      	mov	r1, r2
 800558a:	2200      	movs	r2, #0
 800558c:	602a      	str	r2, [r5, #0]
 800558e:	461a      	mov	r2, r3
 8005590:	f7fb fb26 	bl	8000be0 <_read>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_read_r+0x1e>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_read_r+0x1e>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	200001c8 	.word	0x200001c8

080055a4 <_init>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	bf00      	nop
 80055a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055aa:	bc08      	pop	{r3}
 80055ac:	469e      	mov	lr, r3
 80055ae:	4770      	bx	lr

080055b0 <_fini>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr
